<#@ template language="C#" hostspecific="true" debug="true" #>
<#@ assembly name="System.Web" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Web.Razor" #>
<#@ assembly name="System.Web.Mvc" #>
<#@ assembly name="System.Web.WebPages" #>
<#@ assembly name="System.Web.WebPages.Razor" #>
<#@ output extension="cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Web.Configuration" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Web.Razor" #>
<#@ import namespace="System.Web.Razor.Parser" #>
<#@ import namespace="System.Web.Razor.Parser.SyntaxTree" #>
<#@ import namespace="System.Web.WebPages" #>
<#@ import namespace="System.Web.WebPages.Razor" #>
<#@ import namespace="System.Web" #>
<#@ import namespace="System.Web.Mvc" #>
<#@ import namespace="System.Web.WebPages.Razor.Configuration" #>
<#
var appRoot = @"C:\Projects\BoC\Samples\ToDoList";
var virtualPath = "~/LogOn.cshtml";
var FileNameSpace = "mytest";
			var configFile = this.Host.ResolvePath("web.config");
			
			var vdm = new VirtualDirectoryMapping(Path.GetDirectoryName(configFile), true);
			var wcfm = new WebConfigurationFileMap();
			wcfm.VirtualDirectories.Add("/", vdm);

			var config = WebConfigurationManager.OpenMappedWebConfiguration(wcfm, "/");
			//System.Configuration.ConfigurationManager.OpenExeConfiguration(configFile);

			var InputFilePath = this.Host.ResolvePath(virtualPath.Substring(2));
			var inputFileContent = File.ReadAllText(InputFilePath);

			// Determine the project-relative path
            string projectRelativePath = InputFilePath.Substring(appRoot.Length);
  			
			var sectGroup = new RazorWebSectionGroup();
    		sectGroup.Host = (HostSection) config.GetSection(HostSection.SectionName) ?? new HostSection{ FactoryType = typeof(MvcWebRazorHostFactory).AssemblyQualifiedName };
    		sectGroup.Pages = (RazorPagesSection) config.GetSection(RazorPagesSection.SectionName);
			
            // Create the same type of Razor host that's used to process Razor files in App_Code
            var host = WebRazorHostFactory.CreateHostFromConfig(sectGroup, virtualPath, InputFilePath);
						//new MvcWebPageRazorHost(virtualPath, InputFilePath);
            // Set the namespace to be the same as what's used by default for regular .cs files
            host.DefaultNamespace = FileNameSpace;

			var systemWebPages = config.GetSection("system.web/pages") as PagesSection;
			foreach (NamespaceInfo ns in systemWebPages.Namespaces)
			{
				host.NamespaceImports.Add(ns.Namespace);
			}
			
			// Create a Razor engine nad pass it our host
var engine = new RazorTemplateEngine(host);
// Generate code
GeneratorResults results = null;
try {
    using (TextReader reader = new StringReader(inputFileContent)) {
        results = engine.GenerateCode(reader);
    }
}
catch (Exception e) {
    //Returning null signifies that generation has failed
    return null;
}


            // Output errors
            foreach (RazorError error in results.ParserErrors) {
                this.Error(error.Message + " at Line " + (uint)error.Location.LineIndex + 1 + "," + (uint)error.Location.CharacterIndex + 1);
            }

            CodeDomProvider provider = GetCodeProvider();

            try {
                using (StringWriter writer = new StringWriter(new StringBuilder())) {
                    CodeGeneratorOptions options = new CodeGeneratorOptions();
                    options.BlankLinesBetweenMembers = false;
                    options.BracingStyle = "C";
					options.IndentString = "\t";

                    // Add a GeneratedCode attribute to the generated class
                    CodeCompileUnit generatedCode = results.GeneratedCode;
                    CodeTypeDeclaration generatedType = generatedCode.Namespaces[0].Types[0];
                    generatedType.CustomAttributes.Add(
                        new CodeAttributeDeclaration(
                            new CodeTypeReference(typeof(PageVirtualPathAttribute)),
                            new CodeAttributeArgument(new CodePrimitiveExpression(virtualPath))));

                    //Generate the code
                    provider.GenerateCodeFromCompileUnit(generatedCode, writer, options);

                    writer.Flush();
					
					this.WriteLine(writer.ToString());
                    /*// Save as UTF8
                    Encoding enc = Encoding.UTF8;

                    //Get the preamble (byte-order mark) for our encoding
                    byte[] preamble = enc.GetPreamble();
                    int preambleLength = preamble.Length;

                    //Convert the writer contents to a byte array
                    byte[] body = enc.GetBytes(writer.ToString());

                    //Prepend the preamble to body (store result in resized preamble array)
                    Array.Resize<byte>(ref preamble, preambleLength + body.Length);
                    Array.Copy(body, 0, preamble, preambleLength, body.Length);

                    //Return the combined byte array
                    return preamble;*/
				}
			}
			catch (Exception e) {
                this.Error(e.ToString());
                //Returning null signifies that generation has failed
                return null;
			}
#>
<#+
/// <summary>
/// Returns a CodeDomProvider object for the language of the project containing
/// the project item the generator was called on
/// </summary>
/// <returns>A CodeDomProvider object</returns>
CodeDomProvider codeDomProvider = null;
CodeDomProvider GetCodeProvider()
{
    if (codeDomProvider == null)
    {
	    //In the case where no language specific CodeDom is available, fall back to C#
	    codeDomProvider = CodeDomProvider.CreateProvider("C#");
    }
    return codeDomProvider;
}
#>
