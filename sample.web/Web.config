<?xml version="1.0"?>
<configuration xmlns="http://schemas.microsoft.com/.NetConfiguration/v2.0">
	<configSections>
		<sectionGroup name="microsoft.web" type="Microsoft.Web.Configuration.MicrosoftWebSectionGroup">
			<section name="converters" type="Microsoft.Web.Configuration.ConvertersSection" requirePermission="false"/>
			<section name="webServices" type="Microsoft.Web.Configuration.WebServicesSection" requirePermission="false"/>
			<section name="authenticationService" type="Microsoft.Web.Configuration.AuthenticationServiceSection" requirePermission="false"/>
			<section name="profileService" type="Microsoft.Web.Configuration.ProfileServiceSection" requirePermission="false"/>
		</sectionGroup>
	</configSections>
	<!-- 
      The microsoft.web section defines items required for the Atlas framework.
  -->
	<microsoft.web>
		<converters>
			<add type="Microsoft.Web.Script.Serialization.Converters.DataSetConverter"/>
			<add type="Microsoft.Web.Script.Serialization.Converters.DataRowConverter"/>
			<add type="Microsoft.Web.Script.Serialization.Converters.DataTableConverter"/>
		</converters>
		<webServices enableBrowserAccess="true"/>
		<!--
      Uncomment this line to enable the authentication service.
    <authenticationService enabled="true" />
    -->
		<!-- Uncomment these lines to enable the profile service. To allow profile properties to be retrieved 
         and modified in Atlas applications, you need to add each property name to the setProperties and 
         getProperties attributes.  If you intend for all properties to be available, you can use "*"
         as a shorthand rather than enumerating each property  -->
		<!--  
    <profileService enabled="true" 
                    setProperties="propertyname1;propertyname2" 
                    getProperties="propertyname1;propertyname2" />
    -->
	</microsoft.web>
	<appSettings>
		<add key="camzimporter.profiles-url" value="file://C:/Documents and Settings/Chris.HOME-OFZO/Bureaublad/camz.xml"/>
	</appSettings>
	<system.web>
		<roleManager enabled="true"/>
		<pages theme="Simple">
			<controls>
				<add namespace="Microsoft.Web.UI" assembly="Microsoft.Web.Atlas" tagPrefix="atlas"/>
				<add namespace="Microsoft.Web.UI.Controls" assembly="Microsoft.Web.Atlas" tagPrefix="atlas"/>
			</controls>
		</pages>
		<compilation debug="true">
			<buildProviders>
				<add extension=".asbx" type="Microsoft.Web.Services.BridgeBuildProvider"/>
			</buildProviders>
			<assemblies>
				<add assembly="System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
				<add assembly="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
				<add assembly="System.Transactions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/></assemblies></compilation>
		<authentication mode="Forms">
			<forms loginUrl="Default.aspx" protection="Validation" timeout="300"/>
		</authentication>
		<authorization>
			<allow users="*"/>
		</authorization>
		<httpHandlers>
			<remove verb="*" path="*.asmx"/>
			<add verb="*" path="*.asmx" type="Microsoft.Web.Services.ScriptHandlerFactory" validate="false"/>
			<!--
          The MultiRequestHandler enables multiple requests to be handled in one
          roundtrip to the server. Its use requires Full Trust.
      -->
			<add verb="*" path="atlasbatchcall.axd" type="Microsoft.Web.Services.MultiRequestHandler" validate="false"/>
			<add verb="*" path="atlasglob.axd" type="Microsoft.Web.Globalization.GlobalizationHandler" validate="false"/>
			<!--
          The IFrameHandler enables a limited form of cross-domain calls to 'Atlas' web services.
          This should only be enabled if you need this functionality and you're willing to expose
          the data publicly on the Internet.
          To use it, you will also need to add the attribute [WebOperation(true, ResponseFormatMode.Json, true)]
          on the methods that you want to be called cross-domain.
          This attribute is by default on any DataService's GetData method.
          
      <add verb="*" path="iframecall.axd" type="Microsoft.Web.Services.IFrameHandler" validate="false"/>
      -->
			<add verb="*" path="*.asbx" type="Microsoft.Web.Services.ScriptHandlerFactory" validate="false"/>
		</httpHandlers>
		<httpModules>
      <add name="SteegApplicationFramework" type="Steeg.Framework.Web.SteegApplicationModule, Steeg.Framework" />
			<add name="ScriptModule" type="Microsoft.Web.Services.ScriptModule"/>
			<add name="BridgeModule" type="Microsoft.Web.Services.BridgeModule"/>
			<add name="WebResourceCompression" type="Microsoft.Web.Services.WebResourceCompressionModule"/>
		</httpModules>
		<webServices>
			<protocols>
				<add name="HttpSoap"/>
				<add name="HttpPost"/>
				<add name="HttpGet"/>
				<add name="Documentation"/>
			</protocols>
		</webServices>
		<membership defaultProvider="SteegFrameworkMemberShipProvider">
			<providers>
				<remove name="AspNetSqlMembershipProvider"/>
				<add name="SteegFrameworkMemberShipProvider" type="Steeg.Framework.Web.Security.SteegFrameworkMemberShipProvider, Steeg.Framework"/>
			</providers>
		</membership>
	</system.web>
</configuration>
