<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Data.Services.Providers.DomainService</name>
    </assembly>
    <members>
        <member name="T:System.Data.Services.Providers.RIA.DomainServiceDataProvider`1">
            <summary>
            Represents an Alexandria-based Astoria data service.
            </summary>
            <typeparam name="TDataProvider">A <see cref="T:System.Web.DomainServices.DomainService"/>.</typeparam>
        </member>
        <member name="F:System.Data.Services.Providers.RIA.DomainServiceDataProvider`1.dataServiceProvider">
            <summary>instance of the dataServiceProvider</summary>
        </member>
        <member name="F:System.Data.Services.Providers.RIA.DomainServiceDataProvider`1.serviceProvider">
            <summary>instance of the data service.</summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.DomainServiceDataProvider`1.#ctor(System.IServiceProvider)">
            <summary>
            Public constructor
            </summary>
            <param name="serviceProvider"> instance of the service.</param>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.DomainServiceDataProvider`1.GetService(System.Type)">
            <summary>
            Return the service instance for the given service type.
            </summary>
            <param name="serviceType">service type for which the instance needs to be removed.</param>
            <returns>service instance.</returns>
        </member>
        <member name="T:System.Data.Services.Providers.RIA.DomainServiceDataProvider`1.ExpandProvider">
            <summary>
            Expand Provider implementation
            TODO: need to figure out why we need this interface.
            </summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.DomainServiceDataProvider`1.ExpandProvider.ApplyExpansions(System.Linq.IQueryable,System.Collections.Generic.ICollection{System.Data.Services.ExpandSegmentCollection})">
            <summary>Applies expansions to the specified <paramref name="queryable"/>.</summary>
            <param name="queryable"><see cref="T:System.Linq.IQueryable"/> object to expand.</param>
            <param name="expandPaths">A collection of ordered <see cref="T:System.Data.Services.ExpandSegment"/> paths.</param>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> object of the same type as the given <paramref name="queryable"/>,
            with the results including the specified <paramref name="expansions"/>.
            </returns>
            <remarks>
            This method may modify the <paramref name="expansions"/> to indicate which expansions
            are included.
            
            The returned <see cref="T:System.Collections.IEnumerable"/> may implement the <see cref="T:System.Data.Services.IExpandedResult"/>
            interface to provide enumerable objects for the expansions; otherwise, the expanded
            information is expected to be found directly in the enumerated objects.
            </remarks>
        </member>
        <member name="T:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider">
            <summary>
            AlexandriaDataServiceProvider class which implements IDataServiceProvider interface
            </summary>
        </member>
        <member name="F:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.knownTypes">
            <summary>Tracks the list of the clr types and corresponding resource types.</summary>
        </member>
        <member name="F:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.dataProvider">
            <summary>Underlying domain service instance.</summary>
        </member>
        <member name="F:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.resourceTypes">
            <summary>List of resource types and its set</summary>
        </member>
        <member name="F:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.serviceOperations">
            <summary>List of service operations</summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.#ctor(System.Web.DomainServices.DomainService)">
            <summary>
            Creates a new instance of Alexandria Data Service Provider.
            </summary>
            <param name="dataProvider">underlying instance of domain service.</param>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.DisposeDataSource">
            <summary>
            Dispose the data provider
            </summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.GetSetForResourceType(System.Data.Services.Providers.ResourceType)">
            <summary>Gets the name of the container that holds this resource type.This method is called for open types only</summary>
            <param name="resourceType">Resource to get container for.</param>
            <returns>
            The name of the container for the specified resource; null if it cannot
            be determined.
            </returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.GetOpenPropertyValues(System.Object)">
            <summary>
            Get the name and values of all the properties defined in the given instance of an open type.
            </summary>
            <param name="target">instance of a open type.</param>
            <returns>collection of name and values of all the open properties.</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.GetPropertyValue(System.Object,System.Data.Services.Providers.ResourceProperty)">
            <summary>
            Get the value of the strongly typed property.
            </summary>
            <param name="target">instance of the type declaring the property.</param>
            <param name="resourceProperty">resource property describing the property.</param>
            <returns>value for the property.</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.GetQueryRootForResourceSet(System.Data.Services.Providers.ResourceSet)">
            <summary>
            Returns the IQueryable that represents the resource set.
            </summary>
            <param name="resourceSet">resource set representing the entity set.</param>
            <returns>
            An IQueryable that represents the set; null if there is 
            no set for the specified name.
            </returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.GetResourceType(System.Object)">
            <summary>Gets the <see cref="T:System.Data.Services.Providers.ResourceType"/> for the specified <paramref name="instance"/>.</summary>
            <param name="target">Target instance to extract a <see cref="T:System.Data.Services.Providers.ResourceType"/> from.</param>
            <returns>The <see cref="T:System.Data.Services.Providers.ResourceType"/> that describes this <paramref name="instance"/> in this provider.</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.TryResolveResourceSet(System.String)">
            <summary>Given the specified name, tries to find a resource set.</summary>
            <param name="name">Name of the resource set to resolve.</param>
            <returns>Resolved resource set, possibly null.</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.TryResolveServiceOperation(System.String)">
            <summary>Given the specified name, tries to find a service operation.</summary>
            <param name="name">Name of the service operation to resolve.</param>
            <returns>Resolved service operation, possibly null.</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.TryResolveResourceType(System.String)">
            <summary>Given the specified name, tries to find a type.</summary>
            <param name="name">Name of the type to resolve.</param>
            <returns>Resolved resource type, possibly null.</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.InvokeServiceOperation(System.Data.Services.Providers.ServiceOperation,System.Object[])">
            <summary>
            Invoke the given service operation and returns the results.
            </summary>
            <param name="serviceOperation">service operation to invoke.</param>
            <param name="parameters">value of parameters to pass to the service operation.</param>
            <returns>returns the result of the service operation. If the service operation returns void, then this should return null.</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.GetPropertyValue(System.Object,System.String)">
            <summary>
            Get the value of the open property.
            </summary>
            <param name="target">instance of the type declaring the open property.</param>
            <param name="propertyName">name of the open property.</param>
            <returns>value for the open property.</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.GetDerivedTypes(System.Data.Services.Providers.ResourceType)">
            <summary>
            Returns the list of derived types for the given resource type.
            </summary>
            <param name="resourceType">Resource type whose derived types needs to be returned.</param>
            <returns>the list of derived types for the given resource type.</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.HasDerivedTypes(System.Data.Services.Providers.ResourceType)">
            <summary>
            Returns true if <paramref name="resourceType"/> represents an Entity Type which has derived Entity Types, else false.
            </summary>
            <param name="resourceType">instance of the resource type in question.</param>
            <returns>True if <paramref name="resourceType"/> represents an Entity Type which has derived Entity Types, else false.</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.GetGenericInterfaceElementType(System.Type,System.Reflection.TypeFilter)">
            <summary>
            Returns the "T" in the IQueryable of T implementation of type.
            </summary>
            <param name="type">Type to check.</param>
            <param name="typeFilter">filter against which the type is checked</param>
            <returns>
            The element type for the generic IQueryable interface of the type,
            or null if it has none or if it's ambiguous.
            </returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.IQueryableTypeFilter(System.Type,System.Object)">
            <summary>Filter callback for finding IQueryable implementations.</summary>
            <param name="m">Type to inspect.</param>
            <param name="filterCriteria">Filter criteria.</param>
            <returns>true if the specified type is an IQueryable of T; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.IEnumerableTypeFilter(System.Type,System.Object)">
            <summary>Filter callback for finding IEnumerable implementations.</summary>
            <param name="m">Type to inspect.</param>
            <param name="filterCriteria">Filter criteria.</param>
            <returns>true if the specified type is an IEnumerable of T; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.PopulateMetadataForTypes(System.Collections.Generic.Dictionary{System.Type,System.Data.Services.Providers.ResourceType},System.Collections.Generic.Queue{System.Data.Services.Providers.ResourceType})">
            <summary>
            Populates the metadata for the given unvisited types and all the associated types with this type
            </summary>
            <param name="knownTypes">list of known types</param>
            <param name="unvisitedTypes">list of unvisited type</param>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.BuildTypeProperties(System.Data.Services.Providers.ResourceType,System.Collections.Generic.IDictionary{System.Type,System.Data.Services.Providers.ResourceType},System.Collections.Generic.Queue{System.Data.Services.Providers.ResourceType})">
            <summary>
            Populates the metadata for the properties of the given resource type
            </summary>
            <param name="parentResourceType">resource type whose properties metadata needs to be populated</param>
            <param name="knownTypes">list of known types</param>
            <param name="unvisitedTypes">list of unvisited type</param>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.BuildHierarchyForEntityType(System.Type,System.Collections.Generic.IDictionary{System.Type,System.Data.Services.Providers.ResourceType},System.Collections.Generic.Queue{System.Data.Services.Providers.ResourceType},System.Boolean)">
            <summary>
            Walks through the list of ancestors and finds the root base type and collects metadata for the entire chain of ancestors
            </summary>
            <param name="type">type whose ancestors metadata needs to be populated</param>
            <param name="knownTypes">list of already known types</param>
            <param name="unvisitedTypes">list of unvisited types</param>
            <param name="entityTypeCandidate">Whether <paramref name="type"/> is a candidate to be an entity type.</param>
            <returns>return true if this given type is a entity type, otherwise returns false</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.IsEntityOrComplexType(System.Type,System.Collections.Generic.IDictionary{System.Type,System.Data.Services.Providers.ResourceType},System.Collections.Generic.Queue{System.Data.Services.Providers.ResourceType})">
            <summary>
            If the given type is a entity or complex type, it returns the resource type corresponding to the given type
            </summary>
            <param name="type">clr type</param>
            <param name="knownTypes">list of already known types</param>
            <param name="unvisitedTypes">list of unvisited types</param>
            <returns>resource type corresponding to the given clr type, if the clr type is entity or complex</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.IsComplexType(System.Type)">
            <summary>Checks whether the specified type is a complex type.</summary>
            <param name="type">Type to check.</param>
            <returns>
            true if the specified type is a complex type; false otherwise. Note
            that resources are not distinguished from complex types.
            </returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.TryGetType(System.Collections.Generic.IDictionary{System.Type,System.Data.Services.Providers.ResourceType},System.Type,System.Data.Services.Providers.ResourceType@)">
            <summary>
            Find the corresponding ResourceType for a given Type, primitive or not
            </summary>
            <param name="knownTypes">Non-primitive types to search</param>
            <param name="type">Type to look for</param>
            <param name="resourceType">Corresponding ResourceType, if found</param>
            <returns>True if type found, false otherwise</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.DoesTypeHaveKeyProperties(System.Type,System.Boolean)">
            <summary>
            Checks whether there is a key defined for the given type.
            </summary>
            <param name="type">type to check </param>
            <param name="entityTypeCandidate">
            Whether <paramref name="type"/> is being considered as a possible 
            entity type.
            </param>
            <returns>returns true if there are one or key properties present else returns false</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.IsPropertyKeyProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>Checks whether the given property is a key property.</summary>
            <param name="property">property to check</param>
            <returns>true if this is a key property, else returns false</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.PopulateMetadata">
            <summary>
            Populates the metadata for this provider.
            </summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.PopulateMetadataForResourceSets">
            <summary>
            Populate metadata for resource sets and service operations.
            </summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.GetServiceOperationParameters(System.Web.DomainServices.DomainOperationEntry)">
            <summary>
            Returns the parameters for the method representation by the domain operation entry.
            </summary>
            <param name="entry">domain operation which represents the method.</param>
            <returns>the collection of serviceoperationparameter instances for parameters in service operations.</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.GetServiceOperationReturnType(System.Web.DomainServices.DomainOperationEntry,System.Data.Services.Providers.ServiceOperationResultKind@)">
            <summary>
            Returns the return type for the service operation.
            </summary>
            <param name="entry">DomainOperationEntry instance representing the service operation.</param>
            <param name="resultKind">kind of the return type.</param>
            <returns>returns an instance of resource type which represents the clr return type.</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.GetType(System.Type)">
            <summary>
            Returns the resource type for the given clr type.
            </summary>
            <param name="type">clr type for which resource type needs to be returned.</param>
            <returns>returns an instane of the resource type for the given clr type.</returns>
        </member>
        <member name="P:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.ContainerName">
            <summary>
            Return the container name for the alexandria context.
            </summary>
        </member>
        <member name="P:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.ContainerNamespace">
            <summary>
            Return the container namespace for the alexandria context.
            </summary>
        </member>
        <member name="P:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.ResourceSets">
            <summary>
            Return the sets for the alexandria context
            </summary>
        </member>
        <member name="P:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.CurrentDataSource">
            <summary>
            Returns the instance of alexandria context
            </summary>
        </member>
        <member name="P:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.NullPropagationRequired">
            <summary>Gets a value indicating whether null propagation is required in expression trees.</summary>
        </member>
        <member name="P:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.ServiceOperations">
            <summary>Returns all the service operations in this data source</summary>
        </member>
        <member name="P:System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider.Types">
            <summary>Returns all the types in this data source</summary>
        </member>
        <member name="T:System.Data.Services.Providers.RIA.AlexandriaObjectContext">
            <summary>
            Implements IUpdatable for alexandria data provider.
            </summary>
        </member>
        <member name="F:System.Data.Services.Providers.RIA.AlexandriaObjectContext.queuedOperations">
            <summary>List of queued operations that we need to take care during SubmitChanges.</summary>
        </member>
        <member name="F:System.Data.Services.Providers.RIA.AlexandriaObjectContext.provider">
            <summary>Instance to the underlying data provider.</summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaObjectContext.#ctor(System.Data.Services.Providers.RIA.AlexandriaDataServiceProvider)">
            <summary>
            Creates a new instance of Alexandria Object Context.
            </summary>
            <param name="provider">instance of the underlying provider.</param>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaObjectContext.AddReferenceToCollection(System.Object,System.String,System.Object)">
            <summary>
            Adds the given value to the collection
            </summary>
            <param name="targetResource">target object which defines the property</param>
            <param name="propertyName">name of the property whose value needs to be updated</param>
            <param name="resourceToBeAdded">value of the property which needs to be added</param>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaObjectContext.ClearChanges">
            <summary>
            Revert all the pending changes.
            </summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaObjectContext.CreateResource(System.String,System.String)">
            <summary>
            Creates the resource of the given type and belonging to the given container
            </summary>
            <param name="containerName">container name to which the resource needs to be added</param>
            <param name="fullTypeName">full type name i.e. Namespace qualified type name of the resource</param>
            <returns>object representing a resource of given type and belonging to the given container</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaObjectContext.DeleteResource(System.Object)">
            <summary>
            Delete the given resource
            </summary>
            <param name="targetResource">resource that needs to be deleted</param>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaObjectContext.GetResource(System.Linq.IQueryable,System.String)">
            <summary>
            Gets the resource of the given type that the query points to
            </summary>
            <param name="query">query pointing to a particular resource</param>
            <param name="fullTypeName">full type name i.e. Namespace qualified type name of the resource</param>
            <returns>object representing a resource of given type and as referenced by the query</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaObjectContext.GetValue(System.Object,System.String)">
            <summary>
            Gets the value of the given property on the target object
            </summary>
            <param name="targetResource">target object which defines the property</param>
            <param name="propertyName">name of the property whose value needs to be updated</param>
            <returns>the value of the property for the given target resource</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaObjectContext.RemoveReferenceFromCollection(System.Object,System.String,System.Object)">
            <summary>
            Removes the given value from the collection
            </summary>
            <param name="targetResource">target object which defines the property</param>
            <param name="propertyName">name of the property whose value needs to be updated</param>
            <param name="resourceToBeRemoved">value of the property which needs to be removed</param>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaObjectContext.ResetResource(System.Object)">
            <summary>
            Resets the value of the given resource to its default value
            </summary>
            <param name="resource">resource whose value needs to be reset</param>
            <returns>same resource with its value reset</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaObjectContext.ResolveResource(System.Object)">
            <summary>
            Returns the actual instance of the resource represented by the given resource object
            </summary>
            <param name="resource">object representing the resource whose instance needs to be fetched</param>
            <returns>The actual instance of the resource represented by the given resource object</returns>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaObjectContext.SaveChanges">
            <summary>
            Saves all the pending changes made till now
            </summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaObjectContext.SetReference(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the given reference property on the target object
            </summary>
            <param name="targetResource">target object which defines the property</param>
            <param name="propertyName">name of the property whose value needs to be updated</param>
            <param name="propertyValue">value of the property</param>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaObjectContext.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the given property on the target object
            </summary>
            <param name="targetResource">target object which defines the property</param>
            <param name="propertyName">name of the property whose value needs to be updated</param>
            <param name="propertyValue">value of the property</param>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaObjectContext.SetConcurrencyValues(System.Object,System.Boolean,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Passes the etag value for the given resource.
            </summary>
            <param name="resourceCookie">cookie representing the resource.</param>
            <param name="checkForEquality">true if we need to compare the property values for equality. If false, then we need to compare values for non-equality.</param>
            <param name="concurrencyValues">list of the etag property names and its corresponding values.</param>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaObjectContext.InternalSetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the given property in the target resource.
            </summary>
            <param name="targetResource">resource which contains the property.</param>
            <param name="propertyName">name of the property.</param>
            <param name="propertyValue">new value for the property.</param>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.AlexandriaObjectContext.EnsureTracked(System.Object,System.Web.DomainServices.DomainOperation)">
            <summary>
            Checks whether the given resource is tracked or not.
            </summary>
            <param name="targetResource">instance of the target resource.</param>
            <param name="operation">operation performed on the resource.</param>
        </member>
        <member name="T:System.Data.Services.Providers.RIA.Strings">
            <summary>
               Strongly-typed and parameterized string resources.
            </summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.Strings.InvalidEntityType(System.Object)">
            <summary>
            A string like "Unable to load metadata for type '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.Strings.MultipleParameterlessSelectMethodForType(System.Object)">
            <summary>
            A string like "There cannot be more than one parameterless select method for a type. Please make sure type '{0}' has only one parameterless select method."
            </summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.Strings.CUDMethodsSpecifiedWithoutSelectMethod(System.Object)">
            <summary>
            A string like "In order to support Insert, Update or Delete on a type, Select method must be specified for a type, along with the respective Insert, Update and/or Delete methods. For type '{0}', a Insert/Update/Delete method was specified, but no select method was specified."
            </summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.Strings.InvalidParameterTypeForServiceOperation(System.Object,System.Object,System.Object)">
            <summary>
            A string like " The type '{0}' of parameter '{1}' of Service Operation '{2}' is not valid. The parameter type must be known primitive type, complex type or an entity type."
            </summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.Strings.InvalidReturnTypeForServiceOperation(System.Object,System.Object)">
            <summary>
            A string like "Return type '{1}' of Service Operation '{0}' is not valid. The return type must be known primitive type, complex type or an entity type."
            </summary>
        </member>
        <member name="T:System.Data.Services.Providers.RIA.Error">
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.Error.ArgumentNull(System.String)">
            <summary>
            The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
            </summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.Error.ArgumentOutOfRange(System.String)">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
            </summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.Error.NotImplemented">
            <summary>
            The exception that is thrown when the author has yet to implement the logic at this point in the program. This can act as an exception based TODO tag.
            </summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.Error.NotSupported">
            <summary>
            The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality. 
            </summary>
        </member>
        <member name="M:System.Data.Services.Providers.RIA.TextResDescriptionAttribute.#ctor(System.String)">
            <summary>
                Constructs a new sys description.
            </summary>
            <param name='description'>
                description text.
            </param>
        </member>
        <member name="P:System.Data.Services.Providers.RIA.TextResDescriptionAttribute.Description">
            <summary>
                Retrieves the description text.
            </summary>
            <returns>
                description
            </returns>
        </member>
        <member name="T:System.Data.Services.Providers.RIA.TextRes">
             <summary>
                AutoGenerated resource class. Usage:
            
                    string s = TextRes.GetString(TextRes.MyIdenfitier);
             </summary>
        </member>
    </members>
</doc>
