<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Data.Services.Client</name>
    </assembly>
    <members>
        <member name="T:System.Data.Services.Client.HttpProcessUtility">
            <summary>Provides helper methods for processing HTTP requests.</summary>
        </member>
        <member name="F:System.Data.Services.Client.HttpProcessUtility.EncodingUtf8NoPreamble">
            <summary>UTF-8 encoding, without the BOM preamble.</summary>
            <remarks>
            While a BOM preamble on UTF8 is generally benign, it seems that some MIME handlers under IE6 will not 
            process the payload correctly when included.
            
            Because the data service should include the encoding as part of the Content-Type in the response,
            there should be no ambiguity as to what encoding is being used.
            
            For further information, see http://www.unicode.org/faq/utf_bom.html#BOM.
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.HttpProcessUtility.ReadContentType(System.String,System.String@,System.Text.Encoding@)">
            <summary>Reads a Content-Type header and extracts the MIME type/subtype and encoding.</summary>
            <param name="contentType">The Content-Type header.</param>
            <param name="mime">The MIME type in standard type/subtype form, without parameters.</param>
            <param name="encoding">Encoding (possibly null).</param>
            <returns>parameters of content type</returns>
        </member>
        <member name="M:System.Data.Services.Client.HttpProcessUtility.TryReadVersion(System.String,System.Collections.Generic.KeyValuePair{System.Version,System.String}@)">
            <summary>Tries to read an ADO.NET Data Service version string.</summary>
            <param name="text">Text to read.</param>
            <param name="result">Parsed version and trailing text.</param>
            <returns>true if the version was read successfully; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Services.Client.HttpProcessUtility.EncodingFromName(System.String)">
            <summary>Gets the named encoding if specified.</summary>
            <param name="name">Name (possibly null or empty).</param>
            <returns>
            The named encoding if specified; the encoding for HTTP missing 
            charset specification otherwise.
            </returns>
            <remarks>
            See http://tools.ietf.org/html/rfc2616#section-3.4.1 for details.
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.HttpProcessUtility.ReadMediaTypeAndSubtype(System.String,System.Int32@,System.String@,System.String@)">
            <summary>Reads the type and subtype specifications for a MIME type.</summary>
            <param name='text'>Text in which specification exists.</param>
            <param name='textIndex'>Pointer into text.</param>
            <param name='type'>Type of media found.</param>
            <param name='subType'>Subtype of media found.</param>
        </member>
        <member name="M:System.Data.Services.Client.HttpProcessUtility.ReadMediaType(System.String)">
            <summary>Reads a media type definition as used in a Content-Type header.</summary>
            <param name="text">Text to read.</param>
            <returns>The <see cref="T:System.Data.Services.Client.HttpProcessUtility.MediaType"/> defined by the specified <paramref name="text"/></returns>
            <remarks>All syntactic errors will produce a 400 - Bad Request status code.</remarks>
        </member>
        <member name="M:System.Data.Services.Client.HttpProcessUtility.ReadToken(System.String,System.Int32@)">
            <summary>
            Reads a token on the specified text by advancing an index on it.
            </summary>
            <param name="text">Text to read token from.</param>
            <param name="textIndex">Index for the position being scanned on text.</param>
            <returns>true if the end of the text was reached; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Services.Client.HttpProcessUtility.SkipWhitespace(System.String,System.Int32@)">
            <summary>
            Skips whitespace in the specified text by advancing an index to
            the next non-whitespace character.
            </summary>
            <param name="text">Text to scan.</param>
            <param name="textIndex">Index to begin scanning from.</param>
            <returns>true if the end of the string was reached, false otherwise.</returns>
        </member>
        <member name="M:System.Data.Services.Client.HttpProcessUtility.ReadMediaTypeParameter(System.String,System.Int32@,System.Collections.Generic.KeyValuePair{System.String,System.String}[]@)">
            <summary>Read a parameter for a media type/range.</summary>
            <param name="text">Text to read from.</param>
            <param name="textIndex">Pointer in text.</param>
            <param name="parameters">Array with parameters to grow as necessary.</param>
        </member>
        <member name="M:System.Data.Services.Client.HttpProcessUtility.ReadQuotedParameterValue(System.String,System.String,System.Int32@)">
            <summary>
            Reads Mime type parameter value for a particular parameter in the Content-Type/Accept headers.
            </summary>
            <param name="parameterName">Name of parameter.</param>
            <param name="headerText">Header text.</param>
            <param name="textIndex">Parsing index in <paramref name="headerText"/>.</param>
            <returns>String representing the value of the <paramref name="parameterName"/> parameter.</returns>
        </member>
        <member name="M:System.Data.Services.Client.HttpProcessUtility.IsHttpSeparator(System.Char)">
            <summary>
            Determines whether the specified character is a valid HTTP separator.
            </summary>
            <param name="c">Character to verify.</param>
            <returns>true if c is a separator; false otherwise.</returns>
            <remarks>
            See RFC 2616 2.2 for further information.
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.HttpProcessUtility.IsHttpToken(System.Char)">
            <summary>
            Determines whether the specified character is a valid HTTP header token character.
            </summary>
            <param name="c">Character to verify.</param>
            <returns>true if c is a valid HTTP header token character; false otherwise.</returns>
        </member>
        <member name="P:System.Data.Services.Client.HttpProcessUtility.FallbackEncoding">
            <summary>Encoding to fall back to an appropriate encoding is not available.</summary>
        </member>
        <member name="P:System.Data.Services.Client.HttpProcessUtility.MissingEncoding">
            <summary>Encoding implied by an unspecified encoding value.</summary>
            <remarks>See http://tools.ietf.org/html/rfc2616#section-3.4.1 for details.</remarks>
        </member>
        <member name="T:System.Data.Services.Client.HttpProcessUtility.MediaType">
            <summary>Use this class to represent a media type definition.</summary>
        </member>
        <member name="F:System.Data.Services.Client.HttpProcessUtility.MediaType.parameters">
            <summary>Parameters specified on the media type.</summary>
        </member>
        <member name="F:System.Data.Services.Client.HttpProcessUtility.MediaType.subType">
            <summary>Sub-type specification (for example, 'plain').</summary>
        </member>
        <member name="F:System.Data.Services.Client.HttpProcessUtility.MediaType.type">
            <summary>Type specification (for example, 'text').</summary>
        </member>
        <member name="M:System.Data.Services.Client.HttpProcessUtility.MediaType.#ctor(System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Initializes a new <see cref="T:System.Data.Services.Client.HttpProcessUtility.MediaType"/> read-only instance.
            </summary>
            <param name="type">Type specification (for example, 'text').</param>
            <param name="subType">Sub-type specification (for example, 'plain').</param>
            <param name="parameters">Parameters specified on the media type.</param>
        </member>
        <member name="M:System.Data.Services.Client.HttpProcessUtility.MediaType.SelectEncoding">
            <summary>
            Selects the encoding appropriate for this media type specification
            (possibly null).
            </summary>
            <returns>
            The encoding explicitly defined on the media type specification, or
            the default encoding for well-known media types.
            </returns>
            <remarks>
            As per http://tools.ietf.org/html/rfc2616#section-3.7, the type, 
            subtype and parameter name attributes are case-insensitive.
            </remarks>
        </member>
        <member name="P:System.Data.Services.Client.HttpProcessUtility.MediaType.MimeType">
            <summary>Returns the MIME type in standard type/subtype form, without parameters.</summary>
        </member>
        <member name="P:System.Data.Services.Client.HttpProcessUtility.MediaType.Parameters">
            <summary>media type parameters</summary>
        </member>
        <member name="T:System.Data.Services.Parsing.WebConvert">
            <summary>Use this class to convert URI and payload values.</summary>
        </member>
        <member name="F:System.Data.Services.Parsing.WebConvert.HexValues">
            <summary>Constant table of nibble-to-hex convertion values.</summary>
        </member>
        <member name="F:System.Data.Services.Parsing.WebConvert.XmlHexEncodePrefix">
            <summary>Prefix to hex-encoded values.</summary>
        </member>
        <member name="M:System.Data.Services.Parsing.WebConvert.ConvertByteArrayToKeyString(System.Byte[])">
            <summary>Converts the given byte[] into string.</summary>
            <param name="byteArray">byte[] that needs to be converted.</param>
            <returns>String containing hex values representing the byte[].</returns>
        </member>
        <member name="M:System.Data.Services.Parsing.WebConvert.IsKeyTypeQuoted(System.Type)">
            <summary>
            Determines whether the values for the specified types should be 
            quoted in URI keys.
            </summary>
            <param name='type'>Type to check.</param>
            <returns>
            true if values of <paramref name='type' /> require quotes; false otherwise.
            </returns>
        </member>
        <member name="M:System.Data.Services.Parsing.WebConvert.TryKeyPrimitiveToString(System.Object,System.String@)">
            <summary>Converts the specified value to a serializable string for URI key.</summary>
            <param name="value">Non-null value to convert.</param>
            <param name="result">out parameter for value converted to a serializable string for URI key.</param>
            <returns>true/ false indicating success</returns>
        </member>
        <member name="M:System.Data.Services.Parsing.WebConvert.TryXmlPrimitiveToString(System.Object,System.String@)">
            <summary>Converts the specified value to a serializable string for XML content.</summary>
            <param name="value">Non-null value to convert.</param>
            <param name="result">The specified value converted to a serializable string for XML content. </param>
            <returns>boolean value indicating conversion successful conversion</returns>
        </member>
        <member name="T:System.Data.Services.Client.XmlConstants">
            <summary>
            Class that contains all the constants for various schemas.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.ClrServiceInitializationMethodName">
            <summary>"InitializeService" method name for service initialize.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpContentID">
            <summary>id of the corresponding body</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpContentLength">
            <summary>byte-length of the corresponding body</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpContentType">
            <summary>mime-type of the corresponding body</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpHost">
            <summary>Host name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpDataServiceVersion">
            <summary>'DataServiceVersion' - HTTP header name for data service version.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpMaxDataServiceVersion">
            <summary>'MaxDataServiceVersion' - HTTP header name for maximum understood data service version.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpCacheControlNoCache">
            <summary>'no-cache' - HTTP value for Cache-Control header.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpCharsetParameter">
            <summary>'charset' - HTTP parameter name.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpMethodGet">
            <summary>HTTP method name for GET requests.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpMethodPost">
            <summary>HTTP method name for POST requests.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpMethodPut">
            <summary> Http Put Method name - basically used for updating resource.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpMethodDelete">
            <summary>HTTP method name for delete requests.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpMethodMerge">
            <summary>HTTP method name for </summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpQueryStringExpand">
            <summary>HTTP query string parameter value for expand.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpQueryStringFilter">
            <summary>HTTP query string parameter value for filtering.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpQueryStringOrderBy">
            <summary>HTTP query string parameter value for ordering.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpQueryStringSkip">
            <summary>HTTP query string parameter value for skipping elements.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpQueryStringTop">
            <summary>HTTP query string parameter value for limiting the number of elements.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpQueryStringInlineCount">
            <summary>HTTP query string parameter value for counting query result set</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpQueryStringSkipToken">
            <summary>HTTP query string parameter value for skipping results based on paging.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.SkipTokenPropertyPrefix">
            <summary>Property prefix for the skip token property in expanded results for a skip token</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpQueryStringValueCount">
            <summary>HTTP query string parameter value for counting query result set</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpQValueParameter">
            <summary>'q' - HTTP q-value parameter name.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpXMethod">
            <summary>'X-HTTP-Method' - HTTP header name for requests that want to tunnel a method through POST.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpRequestAccept">
            <summary>HTTP name for Accept header</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpRequestAcceptCharset">
            <summary>HTTP name for If-Match header</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpRequestIfMatch">
            <summary>HTTP name for If-Match header</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpRequestIfNoneMatch">
            <summary>HTTP name for If-None-Match header</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpMultipartBoundary">
            <summary>multi-part keyword in content-type to identify batch separator</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpMultipartBoundaryBatch">
            <summary>multi-part mixed batch separator</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpMultipartBoundaryChangeSet">
            <summary>multi-part mixed changeset separator</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpResponseAllow">
            <summary>'Allow' - HTTP response header for allowed verbs.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpResponseCacheControl">
            <summary>'no-cache' - HTTP value for Cache-Control header.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpResponseETag">
            <summary>HTTP name for ETag header</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpResponseLocation">
            <summary>HTTP name for location header</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpResponseStatusCode">
            <summary>HTTP name for Status-Code header</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpMultipartBoundaryBatchResponse">
            <summary>multi-part mixed batch separator for response stream</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpMultipartBoundaryChangesetResponse">
            <summary>multi-part mixed changeset separator</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpContentTransferEncoding">
            <summary>Content-Transfer-Encoding header for batch requests.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpVersionInBatching">
            <summary>Http Version in batching requests and response.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpAnyETag">
            <summary>To checks if the resource exists or not.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpWeakETagPrefix">
            <summary>Weak etags in HTTP must start with W/.
            Look in http://www.ietf.org/rfc/rfc2616.txt?number=2616 section 14.19 for more information.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpAcceptCharset">
            <summary>The character set the client wants the response to be in.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.HttpCookie">
            <summary>The name of the Cookie HTTP header</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeAny">
            <summary>MIME type for requesting any media type.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeApplicationAtom">
            <summary>MIME type for ATOM bodies (http://www.iana.org/assignments/media-types/application/).</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeApplicationAtomService">
            <summary>MIME type for ATOM Service Documents (http://tools.ietf.org/html/rfc5023#section-8).</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeApplicationJson">
            <summary>MIME type for JSON bodies (http://www.iana.org/assignments/media-types/application/).</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeApplicationOctetStream">
            <summary>MIME type general binary bodies (http://www.iana.org/assignments/media-types/application/).</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeApplicationHttp">
            <summary>MIME type for batch requests - this mime type must be specified in CUD changesets or GET batch requests.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeApplicationType">
            <summary>'application' - MIME type for application types.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeApplicationXml">
            <summary>MIME type for XML bodies.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeJsonSubType">
            <summary>'json' - constant for MIME JSON subtypes.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeMetadata">
            <summary>"application/xml", MIME type for metadata requests.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeMultiPartMixed">
            <summary>MIME type for changeset multipart/mixed</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeTextPlain">
            <summary>MIME type for plain text bodies.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeTextType">
            <summary>'text' - MIME type for text subtypes.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeTextXml">
            <summary>MIME type for XML bodies (deprecated).</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeXmlSubType">
            <summary>'xml' - constant for MIME xml subtypes.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.BatchRequestContentTransferEncoding">
            <summary>Content-Transfer-Encoding value for batch requests.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeTypeFeed">
            <summary>trailer for MimeApplicationXml</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeTypeEntry">
            <summary>trailer for MimeApplicationXml</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Utf8Encoding">
            <summary>text for the utf8 encoding</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MimeTypeUtf8Encoding">
            <summary>Default encoding used for writing textual media link entries</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.UriHttpAbsolutePrefix">
            <summary>A prefix that turns an absolute-path URI into an absolute-URI.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.UriMetadataSegment">
            <summary>A segment name in a URI that indicates metadata is being requested.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.UriValueSegment">
            <summary>A segment name in a URI that indicates a plain primitive value is being requested.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.UriBatchSegment">
            <summary>A segment name in a URI that indicates metadata is being requested.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.UriLinkSegment">
            <summary>A segment name in a URI that indicates that this is a link operation.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.UriCountSegment">
            <summary>A segment name in a URI that indicates that this is a count operation.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.UriRowCountAllOption">
            <summary>A const value for the query parameter $inlinecount to set counting mode to inline</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.UriRowCountOffOption">
            <summary>A const value for the query parameter $inlinecount to set counting mode to none</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.WcfBinaryElementName">
            <summary>"Binary" - WCF element name for binary content in XML-wrapping streams.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomContentElementName">
            <summary>XML element name to mark content element in Atom.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomEntryElementName">
            <summary>XML element name to mark entry element in Atom.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomFeedElementName">
            <summary>XML element name to mark feed element in Atom.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomAuthorElementName">
            <summary>'author' - XML element name for ATOM 'author' element for entries.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomCategoryElementName">
            <summary>'category' - XML element name for ATOM 'category' element for entries.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomCategorySchemeAttributeName">
            <summary>'scheme' - XML attribute name for ATOM 'scheme' attribute for categories.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomCategoryTermAttributeName">
            <summary>'term' - XML attribute name for ATOM 'term' attribute for categories.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomIdElementName">
            <summary>XML element name to mark id element in Atom.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomLinkElementName">
            <summary>XML element name to mark link element in Atom.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomLinkRelationAttributeName">
            <summary>XML element name to mark link relation attribute in Atom.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomContentSrcAttributeName">
            <summary>Atom attribute that indicates the actual location for an entry's content.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomUpdatedElementName">
            <summary>'updated' - XML element name for ATOM 'updated' element for entries.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MetadataAttributeEpmContentKind">
            <summary>Type of content for syndication property which can be one of Plaintext, Html or XHtml</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MetadataAttributeEpmKeepInContent">
            <summary>Whether to keep the property value in the content section</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MetadataAttributeEpmNsPrefix">
            <summary>TargetNamespace prefix for non-syndication mapping</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MetadataAttributeEpmNsUri">
            <summary>TargetNamespace URI for non-syndication mapping</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MetadataAttributeEpmTargetPath">
            <summary>Target element or attribute name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.MetadataAttributeEpmSourcePath">
            <summary>Source property name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.SyndAuthorEmail">
            <summary>author/email</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.SyndAuthorName">
            <summary>author/name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.SyndAuthorUri">
            <summary>author/uri</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.SyndPublished">
            <summary>published</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.SyndRights">
            <summary>rights</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.SyndSummary">
            <summary>summary</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.SyndTitle">
            <summary>title</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.SyndContentKindPlaintext">
            <summary>Plaintext</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.SyndContentKindHtml">
            <summary>HTML</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.SyndContentKindXHtml">
            <summary>XHTML</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomHRefAttributeName">
            <summary>XML element name to mark href attribute element in Atom.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomSummaryElementName">
            <summary>XML element name to mark summary element in Atom.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomNameElementName">
            <summary>XML element name to mark author/name element in Atom.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomEmailElementName">
            <summary>XML element name to mark author/email element in Atom.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomUriElementName">
            <summary>XML element name to mark author/uri element in Atom.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomPublishedElementName">
            <summary>XML element name to mark published element in Atom.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomRightsElementName">
            <summary>XML element name to mark rights element in Atom.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomPublishingCollectionElementName">
            <summary>XML element name to mark 'collection' element in APP.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomPublishingServiceElementName">
            <summary>XML element name to mark 'service' element in APP.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomPublishingWorkspaceDefaultValue">
            <summary>XML value for a default workspace in APP.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomPublishingWorkspaceElementName">
            <summary>XML element name to mark 'workspace' element in APP.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomTitleElementName">
            <summary>XML element name to mark title element in Atom.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomTypeAttributeName">
            <summary>XML element name to mark title element in Atom.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomSelfRelationAttributeValue">
            <summary> Atom link relation attribute value for self links.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomEditRelationAttributeValue">
            <summary> Atom link relation attribute value for edit links.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomEditMediaRelationAttributeValue">
            <summary> Atom link relation attribute value for edit-media links.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomNullAttributeName">
            <summary> Atom attribute which indicates the null value for the element.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomETagAttributeName">
            <summary> Atom attribute which indicates the etag value for the declaring entry element.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomInlineElementName">
            <summary>'Inline' - wrapping element for inlined entry/feed content.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomPropertiesElementName">
            <summary>Element containing property values when 'content' is used for media link entries</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.RowCountElement">
            <summary>'count' element</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlCollectionItemElementName">
            <summary>'element', the XML element name for items in enumerations.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlErrorElementName">
            <summary>XML element name for an error.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlErrorCodeElementName">
            <summary>XML element name for an error code.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlErrorInnerElementName">
            <summary>XML element name for the inner error details.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlErrorInternalExceptionElementName">
            <summary>XML element name for an internal exception.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlErrorTypeElementName">
            <summary>XML element name for an exception type.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlErrorStackTraceElementName">
            <summary>XML element name for an exception stack trace.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlErrorMessageElementName">
            <summary>XML element name for an error message.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlFalseLiteral">
            <summary>'false' literal, as used in XML.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlTrueLiteral">
            <summary>'true' literal, as used in XML.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlInfinityLiteral">
            <summary>'INF' literal, as used in XML for infinity.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlNaNLiteral">
            <summary>'NaN' literal, as used in XML for not-a-number values.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlSingleInfinityLiteral">
            <summary>'INF' literal, as used in XML for infinity.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlSingleNaNLiteral">
            <summary>'NaN' literal, as used in XML for not-a-number values.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlBaseAttributeName">
            <summary>XML attribute value to indicate the base URI for a document or element.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlLangAttributeName">
            <summary>'lang' XML attribute name for annotation language.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlSpaceAttributeName">
            <summary>XML attribute name for whitespace parsing control.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlSpacePreserveValue">
            <summary>XML attribute value to indicate whitespace should be preserved.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmV1Namespace">
            <summary> Schema Namespace For Edm.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmV2Namespace">
            <summary> Schema Namespace For Edm.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataWebNamespace">
            <summary> Schema Namespace For DataWeb.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataWebMetadataNamespace">
            <summary> Schema Namespace For DataWeb.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataWebRelatedNamespace">
            <summary> Schema Namespace For DataWeb.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataWebSchemeNamespace">
            <summary>ATOM Scheme Namespace For DataWeb.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataWebV2Namespace">
            <summary> Schema Namespace For DataWeb.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataWebV2MetadataNamespace">
            <summary> Schema Namespace For DataWeb.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataWebV2RelatedNamespace">
            <summary> Schema Namespace For DataWeb.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataWebV2SchemeNamespace">
            <summary>ATOM Scheme Namespace For DataWeb.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataWebV2NamespacePrefix">
            <summary> Schema Namespace Prefix For DataWeb.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataWebV2MetadataNamespacePrefix">
            <summary>'adsm' - namespace prefix for DataWebMetadataNamespace.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AppNamespace">
            <summary>Schema Namespace for Atom Publishing Protocol.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AtomNamespace">
            <summary> Schema Namespace For Atom.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlnsNamespacePrefix">
            <summary> Schema Namespace prefix For xmlns.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlNamespacePrefix">
            <summary> Schema Namespace prefix For xml.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataWebNamespacePrefix">
            <summary> Schema Namespace Prefix For DataWeb.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataWebMetadataNamespacePrefix">
            <summary>'adsm' - namespace prefix for DataWebMetadataNamespace.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.XmlNamespacesNamespace">
            <summary>'http://www.w3.org/2000/xmlns/' - namespace for namespace declarations.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmxNamespace">
            <summary> Edmx namespace in metadata document.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmxNamespacePrefix">
            <summary> Prefix for Edmx Namespace in metadata document.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Association">
            <summary> Association Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.AssociationSet">
            <summary> AssociationSet Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.ComplexType">
            <summary> ComplexType Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Dependent">
            <summary> Dependent Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmCollectionTypeFormat">
            <summary>Format string to describe a collection of a given type.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmEntitySetAttributeName">
            <summary>EntitySet attribute name in CSDL documents.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmFunctionImportElementName">
            <summary>FunctionImport element name in CSDL documents.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmModeAttributeName">
            <summary>Mode attribute name in CSDL documents.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmModeInValue">
            <summary>Mode attribute value for 'in' direction in CSDL documents.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmParameterElementName">
            <summary>Parameter element name in CSDL documents.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmReturnTypeAttributeName">
            <summary>ReturnType attribute name in CSDL documents.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.End">
            <summary> End Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EntityType">
            <summary> EntityType Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EntityContainer">
            <summary> EntityContainer Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Key">
            <summary> Key Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.NavigationProperty">
            <summary> NavigationProperty Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.OnDelete">
            <summary> OnDelete Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Principal">
            <summary> Principal Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Property">
            <summary> Property Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.PropertyRef">
            <summary> PropetyRef Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.ReferentialConstraint">
            <summary> ReferentialConstraint Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Role">
            <summary> Role Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Schema">
            <summary> Schema Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmxElement">
            <summary> Edmx Element Name in the metadata document.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmxDataServicesElement">
            <summary> Edmx DataServices Element Name in the metadata document.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmxVersion">
            <summary>Version attribute for the root Edmx Element in the metadata document.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmxVersionValue">
            <summary>Value of the version attribute in the root edmx element in metadata document.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Action">
            <summary> Action attribute Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.BaseType">
            <summary> BaseType attribute Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EntitySet">
            <summary> EntitySet attribute and Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.FromRole">
            <summary> FromRole attribute Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Abstract">
            <summary>Abstract attribute Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Multiplicity">
            <summary>Multiplicity attribute Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Name">
            <summary>Name attribute Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Namespace">
            <summary>Namespace attribute Element Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.ToRole">
            <summary>ToRole attribute Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Type">
            <summary>Type attribute Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Relationship">
            <summary>Relationship attribute Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Many">
            <summary>Value for Many multiplicity in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.One">
            <summary>Value for One multiplicity in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.ZeroOrOne">
            <summary>Value for ZeroOrOne multiplicity in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.Nullable">
            <summary>Nullable Facet Name in csdl.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.ConcurrencyAttribute">
            <summary>Name of the concurrency attribute.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.ConcurrencyFixedValue">
            <summary>Value of the concurrency attribute.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataWebMimeTypeAttributeName">
            <summary>'MimeType' - attribute name for property MIME type attributes.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataWebOpenTypeAttributeName">
            <summary>'OpenType' - attribute name to indicate a type is an OpenType property.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataWebAccessHasStreamAttribute">
            <summary>'HasStream' - attribute name to indicate a type has a default stream property.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataWebAccessDefaultStreamPropertyValue">
            <summary>'$default' - attribute value to indicate a type has a default stream property.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.IsDefaultEntityContainerAttribute">
            <summary>Attribute to indicate whether this is a default entity container or not.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.ServiceOperationHttpMethodName">
            <summary>Attribute name in the csdl to indicate whether the service operation must be called using POST or GET verb.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.UriElementName">
            <summary>uri element name for link bind/unbind operations</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.NextElementName">
            <summary>next element name for link paging</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.LinkCollectionElementName">
            <summary>XML element name for writing out collection of links.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonError">
            <summary>JSON property name for an error.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonErrorCode">
            <summary>JSON property name for an error code.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonErrorInner">
            <summary>JSON property name for the inner error details.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonErrorInternalException">
            <summary>JSON property name for an internal exception.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonErrorMessage">
            <summary>JSON property name for an error message.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonErrorStackTrace">
            <summary>JSON property name for an exception stack trace.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonErrorType">
            <summary>JSON property name for an exception type.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonErrorValue">
            <summary>JSON property name for an error message value.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonMetadataString">
            <summary>metadata element name in json payload.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonUriString">
            <summary>uri element name in json payload.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonTypeString">
            <summary>type element name in json payload.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonEditMediaString">
            <summary>edit_media element name in json payload.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonMediaSrcString">
            <summary>media_src element name in json payload.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonContentTypeString">
            <summary>content_type element name in json payload.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonDeferredString">
            <summary>deferred element name in json payload.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonETagString">
            <summary>etag element name in json payload.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonRowCountString">
            <summary>row count element name in json payload</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.JsonNextString">
            <summary>next page link element name in json payload</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmNamespace">
            <summary>namespace for edm primitive types.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmBinaryTypeName">
            <summary>edm binary primitive type name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmBooleanTypeName">
            <summary>edm boolean primitive type name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmByteTypeName">
            <summary>edm byte primitive type name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmDateTimeTypeName">
            <summary>edm datetime primitive type name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmDecimalTypeName">
            <summary>edm decimal primitive type name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmDoubleTypeName">
            <summary>edm double primitive type name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmGuidTypeName">
            <summary>edm guid primitive type name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmSingleTypeName">
            <summary>edm single primitive type name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmSByteTypeName">
            <summary>edm sbyte primitive type name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmInt16TypeName">
            <summary>edm int16 primitive type name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmInt32TypeName">
            <summary>edm int32 primitive type name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmInt64TypeName">
            <summary>edm int64 primitive type name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.EdmStringTypeName">
            <summary>edm string primitive type name</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataServiceVersion1Dot0">
            <summary>'1.0' - the version 1.0 text for a data service.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataServiceVersion2Dot0">
            <summary>'2.0' - the version 2.0 text for a data service.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataServiceVersionCurrent">
            <summary>'2.0;' - the text for the current server version text.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataServiceVersionCurrentMajor">
            <summary>1 - the version 1 text for a data service.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.DataServiceVersionCurrentMinor">
            <summary>0 - the current minor version for a data service.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.LiteralPrefixBinary">
            <summary>'binary' constant prefixed to binary literals.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.LiteralPrefixDateTime">
            <summary>'datetime' constant prefixed to datetime literals.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.LiteralPrefixGuid">
            <summary>'guid' constant prefixed to guid literals.</summary>
        </member>
        <member name="F:System.Data.Services.Client.XmlConstants.NullLiteralInETag">
            <summary>null liternal that needs to be return in ETag value when the value is null</summary>
        </member>
        <member name="T:System.Data.Services.Common.EpmSerializationKind">
            <summary>
            What kind of xml nodes to serialize
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EpmSerializationKind.Attributes">
            <summary>
            Serialize only attributes
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EpmSerializationKind.Elements">
            <summary>
            Serialize only elements
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EpmSerializationKind.All">
            <summary>
            Serialize everything
            </summary>
        </member>
        <member name="T:System.Data.Services.Common.EpmContentSerializerBase">
            <summary>
            Base visitor class for performing serialization of content whose location in the syndication
            feed is provided through EntityPropertyMappingAttributes
            </summary>
        </member>
        <member name="M:System.Data.Services.Common.EpmContentSerializerBase.#ctor(System.Data.Services.Common.EpmTargetTree,System.Boolean,System.Object,System.Xml.XmlWriter)">
            <summary>
            Constructor decided whether to use syndication or non-syndication sub-tree for target content mappings
            </summary>
            <param name="tree">Target tree containing mapping information</param>
            <param name="isSyndication">Helps in deciding whether to use syndication sub-tree or non-syndication one</param>
            <param name="element">Object to be serialized</param>
            <param name="target">SyndicationItem to which content will be added</param>
        </member>
        <member name="M:System.Data.Services.Common.EpmContentSerializerBase.Serialize">
            <summary>Public interface used by the EpmContentSerializer class</summary>
        </member>
        <member name="M:System.Data.Services.Common.EpmContentSerializerBase.Serialize(System.Data.Services.Common.EpmTargetPathSegment,System.Data.Services.Common.EpmSerializationKind)">
            <summary>
            Internal interface to be overridden in the subclasses. 
            Goes through each subsegments and invokes itself for the children
            </summary>
            <param name="targetSegment">Current root segment in the target tree</param>
            <param name="kind">Which sub segments to serialize</param>
        </member>
        <member name="P:System.Data.Services.Common.EpmContentSerializerBase.Root">
            <summary>Root of the target tree containing mapped xml elements/attribute</summary>
        </member>
        <member name="P:System.Data.Services.Common.EpmContentSerializerBase.Element">
            <summary>Object whose properties we will read</summary>
        </member>
        <member name="P:System.Data.Services.Common.EpmContentSerializerBase.Target">
            <summary>Target SyndicationItem on which we are going to add the serialized content</summary>
        </member>
        <member name="P:System.Data.Services.Common.EpmContentSerializerBase.Success">
            <summary>Indicates the success or failure of serialization</summary>
        </member>
        <member name="T:System.Data.Services.Common.EpmCustomContentSerializer">
            <summary>
            Base visitor class for performing serialization of custom content in the feed entry whose mapping
            is provided through EntityPropertyMappingAttributes
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EpmCustomContentSerializer.disposed">
            <summary>IDisposable helper state</summary>
        </member>
        <member name="F:System.Data.Services.Common.EpmCustomContentSerializer.visitorContent">
            <summary>
            Dictionary mapping visitor content and with target paths
            </summary>
        </member>
        <member name="M:System.Data.Services.Common.EpmCustomContentSerializer.#ctor(System.Data.Services.Common.EpmTargetTree,System.Object,System.Xml.XmlWriter)">
            <summary>
            Constructor initializes the base class be identifying itself as a custom content serializer
            </summary>
            <param name="targetTree">Target tree containing mapping information</param>
            <param name="element">Object to be serialized</param>
            <param name="target">SyndicationItem to which content will be added</param>
        </member>
        <member name="M:System.Data.Services.Common.EpmCustomContentSerializer.Dispose">
            <summary>
            Closes all the XmlWriter and MemoryStream objects in the tree and adds them to the SyndicationItem 
            as ElementExtensions. Invokes the NodeDataCleaner to dispose off any existing memory stream and 
            XmlWriter objects
            </summary>
        </member>
        <member name="M:System.Data.Services.Common.EpmCustomContentSerializer.Serialize(System.Data.Services.Common.EpmTargetPathSegment,System.Data.Services.Common.EpmSerializationKind)">
            <summary>
            Override of the base Visitor method, which actually performs mapping search and serialization
            </summary>
            <param name="targetSegment">Current segment being checked for mapping</param>
            <param name="kind">Which sub segments to serialize</param>
        </member>
        <member name="M:System.Data.Services.Common.EpmCustomContentSerializer.WriteAttribute(System.Data.Services.Common.EpmTargetPathSegment)">
            <summary>
            Given a segment, writes the attribute to xml writer corresponding to it
            </summary>
            <param name="targetSegment">Segment being written</param>
        </member>
        <member name="M:System.Data.Services.Common.EpmCustomContentSerializer.WriteElement(System.Data.Services.Common.EpmTargetPathSegment)">
            <summary>
            Given a segment, writes the element to xml writer corresponding to it, works recursively to write child elements/attributes
            </summary>
            <param name="targetSegment">Segment being written</param>
        </member>
        <member name="M:System.Data.Services.Common.EpmCustomContentSerializer.InitializeVisitorContent">
            <summary>Initializes content for the serializer visitor</summary>
        </member>
        <member name="M:System.Data.Services.Common.EpmCustomContentSerializer.InitializeSubSegmentVisitorContent(System.Data.Services.Common.EpmTargetPathSegment)">
            <summary>Initialize the visitor content for all of root's grandchildren and beyond</summary>
            <param name="subSegment">One of root's children</param>
        </member>
        <member name="T:System.Data.Services.Common.EpmCustomContentWriterNodeData">
            <summary>
            Data held by each node in the EpmTargetTree containing information used by the
            EpmCustomContentWriter visitor
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EpmCustomContentWriterNodeData.disposed">
            <summary>
            IDisposable helper state
            </summary>
        </member>
        <member name="M:System.Data.Services.Common.EpmCustomContentWriterNodeData.#ctor(System.Data.Services.Common.EpmTargetPathSegment,System.Object)">
            <summary>Initializes the per node data for custom serializer</summary>
            <param name="segment">Segment in target tree corresponding to this node</param>
            <param name="element">Object from which to read properties</param>
        </member>
        <member name="M:System.Data.Services.Common.EpmCustomContentWriterNodeData.#ctor(System.Data.Services.Common.EpmCustomContentWriterNodeData,System.Data.Services.Common.EpmTargetPathSegment,System.Object)">
            <summary>Initializes the per node data for custom serializer</summary>
            <param name="parentData">Parent node whose xml writer we are going to reuse</param>
            <param name="segment">Segment in target tree corresponding to this node</param>
            <param name="element">Object from which to read properties</param>
        </member>
        <member name="M:System.Data.Services.Common.EpmCustomContentWriterNodeData.Dispose">
            <summary>
            Closes XmlWriter and disposes the MemoryStream
            </summary>
        </member>
        <member name="M:System.Data.Services.Common.EpmCustomContentWriterNodeData.AddContentToTarget(System.Xml.XmlWriter)">
            <summary>
            Adds the content generated through custom serialization to the SyndicationItem or XmlWriter
            </summary>
            <param name="target">SyndicationItem or XmlWriter being serialized</param>
        </member>
        <member name="M:System.Data.Services.Common.EpmCustomContentWriterNodeData.PopulateData(System.Data.Services.Common.EpmTargetPathSegment,System.Object)">
            <summary>
            Populates the data value corresponding to this node, also updates the list of null attributes
            in the parent null attribute list if current node is attribute with null value
            </summary>
            <param name="segment">Segment being populated</param>
            <param name="element">Object whose property will be read</param>
        </member>
        <member name="P:System.Data.Services.Common.EpmCustomContentWriterNodeData.XmlContentStream">
            <summary>
            Memory stream on top of which XmlWriter works
            </summary>
        </member>
        <member name="P:System.Data.Services.Common.EpmCustomContentWriterNodeData.XmlContentWriter">
            <summary>
            Xml writer used for holding custom content fragment
            </summary>
        </member>
        <member name="P:System.Data.Services.Common.EpmCustomContentWriterNodeData.Data">
            <summary>Data for current node</summary>
        </member>
        <member name="T:System.Data.Services.Common.EpmSourceTree">
            <summary>
            Tree representing the sourceName properties in all the EntityPropertyMappingAttributes for a resource type
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EpmSourceTree.root">
            <summary>Root of the tree</summary>
        </member>
        <member name="F:System.Data.Services.Common.EpmSourceTree.epmTargetTree">
            <summary><see cref="T:System.Data.Services.Common.EpmTargetTree"/> corresponding to this tree</summary>
        </member>
        <member name="M:System.Data.Services.Common.EpmSourceTree.#ctor(System.Data.Services.Common.EpmTargetTree)">
            <summary>Default constructor creates a null root</summary>
            <param name="epmTargetTree">Target xml tree</param>
        </member>
        <member name="M:System.Data.Services.Common.EpmSourceTree.Add(System.Data.Services.Common.EntityPropertyMappingInfo)">
            <summary>
            Adds a path to the source and target tree which is obtained by looking at the EntityPropertyMappingAttribute in the <paramref name="epmInfo"/>
            </summary>
            <param name="epmInfo">EnitityPropertyMappingInfo holding the source path</param>
        </member>
        <member name="P:System.Data.Services.Common.EpmSourceTree.Root">
            <summary>
            Root of the tree
            </summary>
        </member>
        <member name="T:System.Data.Services.Common.EpmSourcePathSegment">
            <summary>
            Representation of each node in the <see cref="T:System.Data.Services.Common.EpmSourceTree"/>
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EpmSourcePathSegment.propertyName">
            <summary>Name of the property under the parent resource type</summary>
        </member>
        <member name="F:System.Data.Services.Common.EpmSourcePathSegment.subProperties">
            <summary>List of sub-properties if this segment corresponds to a complex type</summary>
        </member>
        <member name="M:System.Data.Services.Common.EpmSourcePathSegment.#ctor(System.String)">
            <summary>
            Constructor creates a source path segment with the name set to <paramref name="propertyName"/>
            </summary>
            <param name="propertyName">Segment property name</param>
        </member>
        <member name="P:System.Data.Services.Common.EpmSourcePathSegment.PropertyName">
            <summary>Name of the property under the parent resource type</summary>
        </member>
        <member name="P:System.Data.Services.Common.EpmSourcePathSegment.SubProperties">
            <summary>List of sub-properties if this segment corresponds to a complex type</summary>
        </member>
        <member name="P:System.Data.Services.Common.EpmSourcePathSegment.EpmInfo">
            <summary>Corresponding EntityPropertyMappingInfo</summary>
        </member>
        <member name="T:System.Data.Services.Common.EpmTargetTree">
            <summary>
            Tree representing the targetName properties in all the EntityPropertyMappingAttributes for a resource type
            </summary>
        </member>
        <member name="M:System.Data.Services.Common.EpmTargetTree.#ctor">
            <summary>Initializes the sub-trees for syndication and non-syndication content</summary>
        </member>
        <member name="M:System.Data.Services.Common.EpmTargetTree.Add(System.Data.Services.Common.EntityPropertyMappingInfo)">
            <summary>
            Adds a path to the tree which is obtained by looking at the EntityPropertyMappingAttribute in the <paramref name="epmInfo"/>
            </summary>
            <param name="epmInfo">EnitityPropertyMappingInfo holding the target path</param>
        </member>
        <member name="M:System.Data.Services.Common.EpmTargetTree.Remove(System.Data.Services.Common.EntityPropertyMappingInfo)">
            <summary>
            Removes a path in the tree which is obtained by looking at the EntityPropertyMappingAttribute in the <paramref name="epmInfo"/>
            </summary>
            <param name="epmInfo">EnitityPropertyMappingInfo holding the target path</param>
        </member>
        <member name="M:System.Data.Services.Common.EpmTargetTree.GetPropertyNameFromEpmInfo(System.Data.Services.Common.EntityPropertyMappingInfo)">
            <summary>
            Given an <see cref="T:System.Data.Services.Common.EntityPropertyMappingInfo"/> gives the correct target path for it
            </summary>
            <param name="epmInfo">Given <see cref="T:System.Data.Services.Common.EntityPropertyMappingInfo"/></param>
            <returns>String with the correct value for the target path</returns>
        </member>
        <member name="P:System.Data.Services.Common.EpmTargetTree.SyndicationRoot">
            <summary>Root of the sub-tree for syndication content</summary>
        </member>
        <member name="P:System.Data.Services.Common.EpmTargetTree.NonSyndicationRoot">
            <summary>Root of the sub-tree for custom content</summary>
        </member>
        <member name="T:System.Data.Services.Common.EpmTargetPathSegment">
            <summary>
            Representation of each node in the <see cref="T:System.Data.Services.Common.EpmTargetTree"/>
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EpmTargetPathSegment.segmentName">
            <summary>Name of the xml element/attribute</summary>
        </member>
        <member name="F:System.Data.Services.Common.EpmTargetPathSegment.segmentNamespaceUri">
            <summary>URI of the namespace to which the <see cref="F:System.Data.Services.Common.EpmTargetPathSegment.segmentName"/> belongs</summary>
        </member>
        <member name="F:System.Data.Services.Common.EpmTargetPathSegment.segmentNamespacePrefix">
            <summary>Prefix to be used in xml document for <see cref="F:System.Data.Services.Common.EpmTargetPathSegment.segmentNamespaceUri"/></summary>
        </member>
        <member name="F:System.Data.Services.Common.EpmTargetPathSegment.subSegments">
            <summary>If this is a non-leaf element, the child elements/attributes collection</summary>
        </member>
        <member name="F:System.Data.Services.Common.EpmTargetPathSegment.parentSegment">
            <summary>Parent element of this element/attribute</summary>
        </member>
        <member name="M:System.Data.Services.Common.EpmTargetPathSegment.#ctor">
            <summary>
            Constructor initializes the list of sub-nodes to be empty, used for creating root nodes
            in the <see cref="T:System.Data.Services.Common.EpmTargetTree"/>
            </summary>
        </member>
        <member name="M:System.Data.Services.Common.EpmTargetPathSegment.#ctor(System.String,System.String,System.String,System.Data.Services.Common.EpmTargetPathSegment)">
            <summary>Used for creating non-root nodes in the syndication/custom trees</summary>
            <param name="segmentName">Name of xml element/attribute</param>
            <param name="segmentNamespaceUri">URI of the namespace for <paramref name="segmentName"/></param>
            <param name="segmentNamespacePrefix">Namespace prefix to be used for <paramref name="segmentNamespaceUri"/></param>
            <param name="parentSegment">Reference to the parent node if this is a sub-node, useful for traversals in visitors</param>
        </member>
        <member name="P:System.Data.Services.Common.EpmTargetPathSegment.SegmentName">
            <summary>Name of the xml element/attribute</summary>
        </member>
        <member name="P:System.Data.Services.Common.EpmTargetPathSegment.SegmentNamespaceUri">
            <summary>URI of the namespace to which the <see cref="F:System.Data.Services.Common.EpmTargetPathSegment.segmentName"/> belongs</summary>
        </member>
        <member name="P:System.Data.Services.Common.EpmTargetPathSegment.SegmentNamespacePrefix">
            <summary>Prefix to be used in xml document for <see cref="F:System.Data.Services.Common.EpmTargetPathSegment.segmentNamespaceUri"/></summary>
        </member>
        <member name="P:System.Data.Services.Common.EpmTargetPathSegment.EpmInfo">
            <summary>EntityPropertyMappingInfo corresponding to current segement</summary>
        </member>
        <member name="P:System.Data.Services.Common.EpmTargetPathSegment.HasContent">
            <summary>Whether this node corresponds to ResourceType or ClientType property values</summary>
        </member>
        <member name="P:System.Data.Services.Common.EpmTargetPathSegment.IsAttribute">
            <summary>Does this node correspond to xml attribute</summary>
        </member>
        <member name="P:System.Data.Services.Common.EpmTargetPathSegment.ParentSegment">
            <summary>Parent node in the tree (always an element if present)</summary>
        </member>
        <member name="P:System.Data.Services.Common.EpmTargetPathSegment.SubSegments">
            <summary>Sub-nodes of this node. Only exist if current node is an element node</summary>
        </member>
        <member name="T:System.Data.Services.Common.EntityPropertyMappingInfo">
            <summary>
            Holds information needed during content serialization/deserialization for
            each EntityPropertyMappingAttribute
            </summary>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingInfo.Attribute">
            <summary>
            The <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/> corresponding to this object
            </summary>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingInfo.PropValReader">
            <summary>
            Delegate dynamically generated which is used for accessing the source property path
            for <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/>.
            </summary>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingInfo.DefiningType">
            <summary>
            Type that has the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/>
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.QueryResult">
            <summary>
            Wrapper HttpWebRequest &amp; HttWebResponse
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.BaseAsyncResult">
            <summary>
            Implementation of IAsyncResult
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.BaseAsyncResult.Source">
            <summary>Originating object, used to validate End*</summary>
        </member>
        <member name="F:System.Data.Services.Client.BaseAsyncResult.Method">
            <summary>Originating method on source, to differentiate between different methods from same source</summary>
        </member>
        <member name="F:System.Data.Services.Client.BaseAsyncResult.userCallback">
            <summary>User callback passed to Begin*</summary>
        </member>
        <member name="F:System.Data.Services.Client.BaseAsyncResult.userState">
            <summary>User state passed to Begin*</summary>
        </member>
        <member name="F:System.Data.Services.Client.BaseAsyncResult.asyncWait">
            <summary>wait handle for user to wait until done</summary>
        </member>
        <member name="F:System.Data.Services.Client.BaseAsyncResult.failure">
            <summary>Holding exception to throw as a nested exception during to End*</summary>
        </member>
        <member name="F:System.Data.Services.Client.BaseAsyncResult.abortable">
            <summary>Abortable request</summary>
        </member>
        <member name="F:System.Data.Services.Client.BaseAsyncResult.completedSynchronously">
            <summary>true unless something completes asynchronously</summary>
        </member>
        <member name="F:System.Data.Services.Client.BaseAsyncResult.userCompleted">
            <summary>true when really completed for the user</summary>
        </member>
        <member name="F:System.Data.Services.Client.BaseAsyncResult.completed">
            <summary>true when no more changes are pending, 0 false, 1 completed, 2 aborted</summary>
        </member>
        <member name="F:System.Data.Services.Client.BaseAsyncResult.userNotified">
            <summary>verify we only invoke the user callback once, 0 false, 1 true</summary>
        </member>
        <member name="F:System.Data.Services.Client.BaseAsyncResult.done">
            <summary>non-zero after End*, 0 false, 1, true</summary>
        </member>
        <member name="M:System.Data.Services.Client.BaseAsyncResult.#ctor(System.Object,System.String,System.AsyncCallback,System.Object)">
            <summary>
            ctor
            </summary>
            <param name="source">source object of async request</param>
            <param name="method">async method name on source object</param>
            <param name="callback">user callback to invoke when complete</param>
            <param name="state">user state</param>
        </member>
        <member name="M:System.Data.Services.Client.BaseAsyncResult.EndExecute``1(System.Object,System.String,System.IAsyncResult)">
            <summary>
            common handler for EndExecuteBatch &amp; EndSaveChanges
            </summary>
            <typeparam name="T">derived type of the AsyncResult</typeparam>
            <param name="source">source object of async request</param>
            <param name="method">async method name on source object</param>
            <param name="asyncResult">the asyncResult being ended</param>
            <returns>data service response for batch</returns>
        </member>
        <member name="M:System.Data.Services.Client.BaseAsyncResult.HandleCompleted">
            <summary>Set the AsyncWait and invoke the user callback.</summary>
            <remarks>
            If the background thread gets a ThreadAbort, the userCallback will never be invoked.
            This is why it's generally important to never wait forever, but to have more specific
            time limit.  Also then cancel the operation, to make sure its stopped, to avoid 
            multi-threading if your wait time limit was just too short.
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.BaseAsyncResult.HandleFailure(System.Exception)">
            <summary>Cache the exception that happened on the background thread for the caller of EndSaveChanges.</summary>
            <param name="e">exception object from background thread</param>
            <returns>true if the exception (like StackOverflow or ThreadAbort) should be rethrown</returns>
        </member>
        <member name="M:System.Data.Services.Client.BaseAsyncResult.SetAborted">
            <summary>Set the async result as completed and aborted.</summary>
        </member>
        <member name="M:System.Data.Services.Client.BaseAsyncResult.SetCompleted">
            <summary>Set the async result as completed.</summary>
        </member>
        <member name="M:System.Data.Services.Client.BaseAsyncResult.CompletedRequest">
            <summary>invoked for derived classes to cleanup before callback is invoked</summary>
        </member>
        <member name="P:System.Data.Services.Client.BaseAsyncResult.AsyncState">
            <summary>user state object parameter</summary>
        </member>
        <member name="P:System.Data.Services.Client.BaseAsyncResult.AsyncWaitHandle">
            <summary>wait handle for when waiting is required</summary>
            <remarks>if displayed by debugger, it undesirable to create the WaitHandle</remarks>
        </member>
        <member name="P:System.Data.Services.Client.BaseAsyncResult.CompletedSynchronously">
            <summary>did the result complete synchronously?</summary>
        </member>
        <member name="P:System.Data.Services.Client.BaseAsyncResult.IsCompleted">
            <summary>is the result complete?</summary>
        </member>
        <member name="P:System.Data.Services.Client.BaseAsyncResult.IsCompletedInternally">
            <summary>is the result complete?</summary>
        </member>
        <member name="P:System.Data.Services.Client.BaseAsyncResult.IsAborted">
            <summary>abort the result</summary>
        </member>
        <member name="P:System.Data.Services.Client.BaseAsyncResult.Abortable">
            <summary>
            WebRequest available for DataServiceContext.CancelRequest
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.BaseAsyncResult.Failure">
            <summary>first exception that happened</summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryResult.ServiceRequest">
            <summary>Originating service request</summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryResult.Request">
            <summary>Originating WebRequest</summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryResult.reusableAsyncCopyBuffer">
            <summary>reusuable async copy buffer</summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryResult.requestStreamContent">
            <summary>content to write to request stream</summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryResult.requestStream">
            <summary>active web request stream</summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryResult.httpWebResponse">
            <summary>web response, closed when completed</summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryResult.asyncResponseStream">
            <summary>async response stream, closed when completed</summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryResult.asyncStreamCopyBuffer">
            <summary>buffer when copying async stream to response stream cache</summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryResult.responseStream">
            <summary>response stream, returned to other parts of the system</summary>
            <remarks>with async, the asyncResponseStream is copied into this stream</remarks>
        </member>
        <member name="F:System.Data.Services.Client.QueryResult.contentType">
            <summary>copy of HttpWebResponse.ContentType</summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryResult.contentLength">
            <summary>copy of HttpWebResponse.ContentLength</summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryResult.statusCode">
            <summary>copy of HttpWebResponse.StatusCode</summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryResult.responseStreamOwner">
            <summary>
            does this own the response stream or does the container of this QueryAsyncResult?
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryResult.usingBuffer">
            <summary>
            if the BeginRead has been called with asyncStreamCopyBuffer, but EndRead has not.
            do not return the buffer to general pool if any question of it being in use.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryResult.asyncCompleteStep">
            <summary>If CompletedSynchronously and asyncCompleteStep didn't increment, then underlying implementation lied.</summary>
        </member>
        <member name="M:System.Data.Services.Client.QueryResult.#ctor(System.Object,System.String,System.Data.Services.Client.DataServiceRequest,System.Net.HttpWebRequest,System.AsyncCallback,System.Object)">
            <summary>constructor</summary>
            <param name="source">source object of async request</param>
            <param name="method">async method name on source object</param>
            <param name="serviceRequest">Originating serviceRequest</param>
            <param name="request">Originating WebRequest</param>
            <param name="callback">user callback</param>
            <param name="state">user state</param>
        </member>
        <member name="M:System.Data.Services.Client.QueryResult.EndExecute``1(System.Object,System.IAsyncResult)">
            <summary>
            Ends the asynchronous query request.
            </summary>
            <typeparam name="TElement">Element type of the result.</typeparam>
            <param name="source">Source object of async request.</param>
            <param name="asyncResult">The asyncResult being ended.</param>
            <returns>Data service response.</returns>
        </member>
        <member name="M:System.Data.Services.Client.QueryResult.GetResponseStream">
            <summary>wrapper for HttpWebResponse.GetResponseStream</summary>
            <returns>stream</returns>
        </member>
        <member name="M:System.Data.Services.Client.QueryResult.BeginExecute">
            <summary>start the asynchronous request</summary>
        </member>
        <member name="M:System.Data.Services.Client.QueryResult.Execute">
            <summary>Synchronous web request</summary>
        </member>
        <member name="M:System.Data.Services.Client.QueryResult.GetResponse(System.Data.Services.Client.MaterializeAtom,System.Type)">
            <summary>
            Returns the response for the request.
            </summary>
            <param name="results">materialized results for the request.</param>
            <param name="elementType">element type of the results.</param>
            <returns>returns the instance of QueryOperationResponse containing the response.</returns>
        </member>
        <member name="M:System.Data.Services.Client.QueryResult.CompletedRequest">
            <summary>cleanup work to do once the request has completed</summary>
        </member>
        <member name="M:System.Data.Services.Client.QueryResult.GetAsyncResponseStreamCopy">
            <summary>get stream which of copy buffer (via response stream) will be copied into</summary>
            <returns>writtable stream, happens before GetAsyncResponseStreamCopyBuffer</returns>
        </member>
        <member name="M:System.Data.Services.Client.QueryResult.GetAsyncResponseStreamCopyBuffer">
            <summary>get buffer which response stream will be copied into</summary>
            <returns>writtable stream</returns>
        </member>
        <member name="M:System.Data.Services.Client.QueryResult.PutAsyncResponseStreamCopyBuffer(System.Byte[])">
            <summary>returning a buffer after being done with it</summary>
            <param name="buffer">buffer to return</param>
        </member>
        <member name="M:System.Data.Services.Client.QueryResult.SetHttpWebResponse(System.Net.HttpWebResponse)">
            <summary>set the http web response</summary>
            <param name="response">response object</param>
        </member>
        <member name="M:System.Data.Services.Client.QueryResult.AsyncEndGetResponse(System.IAsyncResult)">
            <summary>handle request.BeginGetResponse with request.EndGetResponse and then copy response stream</summary>
            <param name="asyncResult">async result</param>
        </member>
        <member name="M:System.Data.Services.Client.QueryResult.AsyncEndRead(System.IAsyncResult)">
            <summary>handle responseStream.BeginRead with responseStream.EndRead</summary>
            <param name="asyncResult">async result</param>
        </member>
        <member name="M:System.Data.Services.Client.QueryResult.CompleteCheck(System.Data.Services.Client.QueryResult,System.Data.Services.Client.InternalError)">
            <summary>verify non-null and not completed</summary>
            <param name="pereq">async result</param>
            <param name="errorcode">error code if null or completed</param>
            <returns>the next step to validate CompletedSyncronously</returns>
        </member>
        <member name="P:System.Data.Services.Client.QueryResult.ContentLength">
            <summary>HttpWebResponse.ContentLength</summary>
        </member>
        <member name="P:System.Data.Services.Client.QueryResult.ContentType">
            <summary>HttpWebResponse.ContentType</summary>
        </member>
        <member name="P:System.Data.Services.Client.QueryResult.StatusCode">
            <summary>HttpWebResponse.StatusCode</summary>
        </member>
        <member name="T:System.Data.Services.Client.QueryComponents">
            <summary>Represents the components of query</summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryComponents.version">
            <summary> Version for query </summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryComponents.uri">
            <summary> URI for query </summary>
        </member>
        <member name="M:System.Data.Services.Client.QueryComponents.#ctor(System.Uri,System.Version,System.Type)">
            <summary>
             Constructs a container for query components
            </summary>
            <param name="uri">URI for the query</param>
            <param name="version">Version for the query</param>
            <param name="t">Element type for the query</param>
        </member>
        <member name="P:System.Data.Services.Client.QueryComponents.Uri">
            <summary>The translated uri for a query</summary>
        </member>
        <member name="P:System.Data.Services.Client.QueryComponents.Version">
            <summary>The data service version associated with the uri</summary>
        </member>
        <member name="T:System.Data.Services.Client.ReflectionUtil">
            <summary>
            Static utility class for identifying methods in Queryable, Sequence, and IEnumerable
            and 
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ReflectionUtil.TryIdentifySequenceMethod(System.Reflection.MethodInfo,System.Data.Services.Client.SequenceMethod@)">
            <summary>
            Identifies methods as instances of known sequence operators.
            </summary>
            <param name="method">Method info to identify</param>
            <param name="sequenceMethod">Identified sequence operator</param>
            <returns><c>true</c> if method is known; <c>false</c> otherwise</returns>
        </member>
        <member name="M:System.Data.Services.Client.ReflectionUtil.GetCanonicalMethodDescription(System.Reflection.MethodInfo)">
            <remarks>
            Requires:
            - no collisions on type names
            - no output or reference method parameters
            </remarks>
            <summary>
            Produces a string description of a method consisting of the name and all parameters,
            where all generic type parameters have been substituted with number identifiers.
            </summary>
            <param name="method">Method to identify.</param>
            <returns>Canonical description of method (suitable for lookup)</returns>
        </member>
        <member name="M:System.Data.Services.Client.ReflectionUtil.GetAllLinqOperators">
            <summary>
            Returns all static methods in the Queryable and Enumerable classes.
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.SequenceMethod">
            <summary>
            Enumeration of known extension methods
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.InputReferenceExpression">
            <summary>
            Represents a reference to a bound resource set in the resource path
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.InputReferenceExpression.target">
            <summary>The resource or set referred to by this input reference expression</summary>
        </member>
        <member name="M:System.Data.Services.Client.InputReferenceExpression.#ctor(System.Type,System.Data.Services.Client.ResourceExpression)">
            <summary>
            Constructs a new input reference expression that refers to the specified resource set
            </summary>
            <param name="inputElementType">The result type of this expression - must be the same as the element type of <paramref name="target"/></param>
            <param name="target">The target resource set that the new expression will reference</param>
        </member>
        <member name="M:System.Data.Services.Client.InputReferenceExpression.OverrideTarget(System.Data.Services.Client.ResourceSetExpression)">
            <summary>
            Retargets this input reference to point to the resource set specified by <paramref name="newTarget"/>.
            </summary>
            <param name="newTarget">The <see cref="T:System.Data.Services.Client.ResourceSetExpression"/> that this input reference should use as its target</param>
        </member>
        <member name="P:System.Data.Services.Client.InputReferenceExpression.Target">
            <summary>
            Retrieves the resource set referred to by this input reference expression
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.CountOption">
            <summary>
            The counting option for the resource expression
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.CountOption.None">
            <summary>No counting</summary>
        </member>
        <member name="F:System.Data.Services.Client.CountOption.ValueOnly">
            <summary>Translates to the $count segment.</summary>
        </member>
        <member name="F:System.Data.Services.Client.CountOption.InlineAll">
            <summary>Translates to the $inlinecount=allpages query option</summary>
        </member>
        <member name="T:System.Data.Services.Client.ResourceExpression">
            <summary>
            Abstract base class for expressions that support Query Options
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceExpression.inputRef">
            <summary>Singleton InputReferenceExpression that should be used to indicate a reference to this element of the resource path</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceExpression.expandPaths">
            <summary>expand paths</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceExpression.countOption">
            <summary>The count query option for the resource set</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceExpression.customQueryOptions">
            <summary>custom query options</summary>
        </member>
        <member name="M:System.Data.Services.Client.ResourceExpression.#ctor(System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.List{System.Linq.Expressions.ConstantExpression},System.Data.Services.Client.CountOption,System.Collections.Generic.Dictionary{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression})">
            <summary>
            Creates a Resource expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="customQueryOptions">The custom query options</param>
            <param name="expandPaths">the expand paths</param>
            <param name="nodeType">the node type</param>
            <param name="countOption">the count option</param>
        </member>
        <member name="M:System.Data.Services.Client.ResourceExpression.CreateReference">
            <summary>
            Creates an <see cref="T:System.Data.Services.Client.InputReferenceExpression"/> that refers to this component of the resource path. 
            The returned expression is guaranteed to be reference-equal (object.ReferenceEquals)
            to any other InputReferenceExpression that also refers to this resource path component.
            </summary>
            <returns>The InputReferenceExpression that refers to this resource path component</returns>
        </member>
        <member name="P:System.Data.Services.Client.ResourceExpression.IsSingleton">
            <summary>
            Does this expression produce at most 1 resource?
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceExpression.ExpandPaths">
            <summary>
            Expand query option for ResourceSet
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceExpression.CountOption">
            <summary>
            Count query option for ResourceSet
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceExpression.CustomQueryOptions">
            <summary>
            custom query options for ResourceSet
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.Evaluator">
            <summary>
            performs funcletization on an expression tree
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <param name="canBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:System.Data.Services.Client.Evaluator.PartialEval(System.Linq.Expressions.Expression)">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:System.Data.Services.Client.Evaluator.CanBeEvaluatedLocally(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates if an expression can be evaluated locally.
            </summary>
            <param name="expression">the expression.</param>
            <returns>true/ false if can be evaluated locally</returns>
        </member>
        <member name="T:System.Data.Services.Client.Evaluator.SubtreeEvaluator">
            <summary>
            Evaluates and replaces sub-trees when first candidate is reached (top-down)
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceExpressionVisitor">
            <summary>
            Specific Vistior base class for the DataServiceQueryProvider.  
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.ExpressionVisitor">
            <summary>
            base vistor class for walking an expression tree bottom up.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Main visit method for ExpressionVisitor
            </summary>
            <param name="exp">The expression to visit</param>
            <returns>The visited expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            MemberBinding visit method
            </summary>
            <param name="binding">The MemberBinding expression to visit</param>
            <returns>The visited MemberBinding expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            ElementInit visit method
            </summary>
            <param name="initializer">The ElementInit expression to visit</param>
            <returns>The visited ElementInit expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            UnaryExpression visit method
            </summary>
            <param name="u">The UnaryExpression expression to visit</param>
            <returns>The visited UnaryExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            BinaryExpression visit method
            </summary>
            <param name="b">The BinaryExpression expression to visit</param>
            <returns>The visited BinaryExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            TypeBinaryExpression visit method
            </summary>
            <param name="b">The TypeBinaryExpression expression to visit</param>
            <returns>The visited TypeBinaryExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            ConstantExpression visit method
            </summary>
            <param name="c">The ConstantExpression expression to visit</param>
            <returns>The visited ConstantExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            ConditionalExpression visit method
            </summary>
            <param name="c">The ConditionalExpression expression to visit</param>
            <returns>The visited ConditionalExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            ParameterExpression visit method
            </summary>
            <param name="p">The ParameterExpression expression to visit</param>
            <returns>The visited ParameterExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            MemberExpression visit method
            </summary>
            <param name="m">The MemberExpression expression to visit</param>
            <returns>The visited MemberExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            MethodCallExpression visit method
            </summary>
            <param name="m">The MethodCallExpression expression to visit</param>
            <returns>The visited MethodCallExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Expression list visit method
            </summary>
            <param name="original">The expression list to visit</param>
            <returns>The visited expression list</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            MemberAssignment visit method
            </summary>
            <param name="assignment">The MemberAssignment to visit</param>
            <returns>The visited MemberAssignmentt</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            MemberMemberBinding visit method
            </summary>
            <param name="binding">The MemberMemberBinding to visit</param>
            <returns>The visited MemberMemberBinding</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            MemberListBinding visit method
            </summary>
            <param name="binding">The MemberListBinding to visit</param>
            <returns>The visited MemberListBinding</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Binding List visit method
            </summary>
            <param name="original">The Binding list to visit</param>
            <returns>The visited Binding list</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            ElementInit expression list visit method
            </summary>
            <param name="original">The ElementInit expression list  to visit</param>
            <returns>The visited ElementInit expression list </returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            LambdaExpression visit method
            </summary>
            <param name="lambda">The LambdaExpression to visit</param>
            <returns>The visited LambdaExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            NewExpression visit method
            </summary>
            <param name="nex">The NewExpression to visit</param>
            <returns>The visited NewExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            MemberInitExpression visit method
            </summary>
            <param name="init">The MemberInitExpression to visit</param>
            <returns>The visited MemberInitExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            ListInitExpression visit method
            </summary>
            <param name="init">The ListInitExpression to visit</param>
            <returns>The visited ListInitExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            NewArrayExpression visit method
            </summary>
            <param name="na">The NewArrayExpression to visit</param>
            <returns>The visited NewArrayExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            InvocationExpression visit method
            </summary>
            <param name="iv">The InvocationExpression to visit</param>
            <returns>The visited InvocationExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Main visit method.
            </summary>
            <param name="exp">Expression to visit</param>
            <returns>Visited expression</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceExpressionVisitor.VisitResourceSetExpression(System.Data.Services.Client.ResourceSetExpression)">
            <summary>
            ResourceSetExpression visit method.
            </summary>
            <param name="rse">ResourceSetExpression expression to visit</param>
            <returns>Visited ResourceSetExpression expression</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceExpressionVisitor.VisitNavigationPropertySingletonExpression(System.Data.Services.Client.NavigationPropertySingletonExpression)">
            <summary>
            NavigationPropertySingletonExpressionvisit method.
            </summary>
            <param name="npse">NavigationPropertySingletonExpression expression to visit</param>
            <returns>Visited NavigationPropertySingletonExpression expression</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceExpressionVisitor.VisitInputReferenceExpression(System.Data.Services.Client.InputReferenceExpression)">
            <summary>
            Visit an <see cref="T:System.Data.Services.Client.InputReferenceExpression"/>, producing a new InputReferenceExpression
            based on the visited form of the <see cref="T:System.Data.Services.Client.ResourceSetExpression"/> that is referenced by
            the InputReferenceExpression argument, <paramref name="ire"/>.
            </summary>
            <param name="ire">InputReferenceExpression expression to visit</param>
            <returns>Visited InputReferenceExpression expression</returns>
        </member>
        <member name="F:System.Data.Services.Client.Evaluator.SubtreeEvaluator.candidates">
            <summary>list of candidates</summary>
        </member>
        <member name="M:System.Data.Services.Client.Evaluator.SubtreeEvaluator.#ctor(System.Collections.Generic.HashSet{System.Linq.Expressions.Expression})">
            <summary>
            constructs an expression evaluator with a list of candidates
            </summary>
            <param name="candidates">List of expressions to evaluate</param>
        </member>
        <member name="M:System.Data.Services.Client.Evaluator.SubtreeEvaluator.Eval(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates an expression sub-tree
            </summary>
            <param name="exp">The expression to evaluate.</param>
            <returns>The evaluated expression.</returns>
        </member>
        <member name="M:System.Data.Services.Client.Evaluator.SubtreeEvaluator.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visit method for visitor
            </summary>
            <param name="exp">the expression to visit</param>
            <returns>visited expression</returns>
        </member>
        <member name="M:System.Data.Services.Client.Evaluator.SubtreeEvaluator.Evaluate(System.Linq.Expressions.Expression)">
            <summary>
            Evaluates expression
            </summary>
            <param name="e">the expression to evaluate</param>
            <returns>constant expression with return value of evaluation</returns>
        </member>
        <member name="T:System.Data.Services.Client.Evaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.Evaluator.Nominator.functionCanBeEvaluated">
            <summary>func to determine whether expression can be evaluated</summary>
        </member>
        <member name="F:System.Data.Services.Client.Evaluator.Nominator.candidates">
            <summary>candidate expressions for evaluation</summary>
        </member>
        <member name="F:System.Data.Services.Client.Evaluator.Nominator.cannotBeEvaluated">
            <summary>flag for when sub tree cannot be evaluated</summary>
        </member>
        <member name="M:System.Data.Services.Client.Evaluator.Nominator.#ctor(System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Creates the Nominator based on the function passed.
            </summary>
            <param name="functionCanBeEvaluated">
            A Func speficying whether an expression can be evaluated or not.
            </param>
            <returns>visited expression</returns>
        </member>
        <member name="M:System.Data.Services.Client.Evaluator.Nominator.Nominate(System.Linq.Expressions.Expression)">
            <summary>
            Nominates an expression to see if it can be evaluated
            </summary>
            <param name="expression">
            Expression to check
            </param>
            <returns>a list of expression sub trees that can be evaluated</returns>
        </member>
        <member name="M:System.Data.Services.Client.Evaluator.Nominator.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visit method for walking expression tree bottom up.
            </summary>
            <param name="expression">
            root expression to visit
            </param>
            <returns>visited expression</returns>
        </member>
        <member name="T:System.Data.Services.Client.ExpressionNormalizer">
            <summary>
            Replaces expression patterns produced by the compiler with approximations
            used in query translation. For instance, the following VB code:
            
                x = y
                
            becomes the expression
            
                Equal(MethodCallExpression(Microsoft.VisualBasic.CompilerServices.Operators.CompareString(x, y, False), 0)
                
            which is normalized to
            
                Equal(x, y)
                
            Comment convention:
            
                CODE(Lang): _VB or C# coding pattern being simplified_
                ORIGINAL: _original LINQ expression_
                NORMALIZED: _normalized LINQ expression_
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.ExpressionNormalizer.LiftToNull">
            <summary>
            If we encounter a MethodCallExpression, we never need to lift to lift to null. This capability
            exists to translate certain patterns in the language. In this case, the user (or compiler)
            has explicitly asked for a method invocation (at which point, lifting can no longer occur).
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.ExpressionNormalizer._patterns">
            <summary>
            Gets a dictionary mapping from LINQ expressions to matched by those expressions. Used
            to identify composite expression patterns.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionNormalizer.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Handle binary patterns:
            
            - VB 'Is' operator
            - Compare patterns
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionNormalizer.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            CODE: x
            ORIGINAL: Convert(x, t)) where t is assignable from typeof(x)
            ORIGINAL: x as t, where t is assignable from typeof(x)
            NORMALIZED: x
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionNormalizer.UnwrapObjectConvert(System.Linq.Expressions.Expression)">
            <summary>
            CODE: x
            ORIGINAL: Convert(x, typeof(object))
            ORIGINAL(Funcletized): Constant(x, typeof(object))
            NORMALIZED: x
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionNormalizer.IsConstantZero(System.Linq.Expressions.Expression)">
            <summary>
            Returns true if the given expression is a constant '0'.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionNormalizer.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Handles MethodCall patterns:
            
            - Operator overloads
            - VB operators
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionNormalizer.NormalizePredicateArgument(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Identifies and normalizes any predicate argument in the given call expression. If no changes
            are needed, returns the existing expression. Otherwise, returns a new call expression
            with a normalized predicate argument.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionNormalizer.HasPredicateArgument(System.Linq.Expressions.MethodCallExpression,System.Int32@)">
            <summary>
            Determines whether the given call expression has a 'predicate' argument (e.g. Where(source, predicate)) 
            and returns the ordinal for the predicate.
            </summary>
            <remarks>
            Obviously this method will need to be replaced if we ever encounter a method with multiple predicates.
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionNormalizer.TryMatchCoalescePattern(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression@)">
            <summary>
            Determines whether the given expression of the form Lambda(Coalesce(left, Constant(false)), ...), a pattern
            introduced by the VB compiler for predicate arguments. Returns the 'normalized' version of the expression
            Lambda((bool)left, ...)
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionNormalizer.RelationalOperatorPlaceholder``2(``0,``1)">
            <summary>
            This method exists solely to support creation of valid relational operator LINQ expressions that are not natively supported
            by the CLR (e.g. String > String). This method must not be invoked.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionNormalizer.CreateRelationalOperator(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Create an operator relating 'left' and 'right' given a relational operator.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionNormalizer.TryCreateRelationalOperator(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.BinaryExpression@)">
            <summary>
            Try to create an operator relating 'left' and 'right' using the given operator. If the given operator
            does not define a known relation, returns false.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionNormalizer.CreateCompareExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            CODE(C#): Class.Compare(left, right)
            ORIGINAL: MethodCallExpression(Compare, left, right)
            NORMALIZED: Condition(Equal(left, right), 0, Condition(left > right, 1, -1))
            
            Why is this an improvement? We know how to evaluate Condition in the store, but we don't
            know how to evaluate MethodCallExpression... Where the CompareTo appears within a larger expression,
            e.g. left.CompareTo(right) > 0, we can further simplify to left > right (we register the "ComparePattern"
            to make this possible).
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.ExpressionNormalizer.Pattern">
            <summary>
            Encapsulates an expression matching some pattern.
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ExpressionNormalizer.Pattern.Kind">
            <summary>
            Gets pattern kind.
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.ExpressionNormalizer.PatternKind">
            <summary>
            Gets pattern kind.
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.ExpressionNormalizer.ComparePattern">
            <summary>
            Matches expression of the form x.CompareTo(y) or Class.CompareTo(x, y)
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.ExpressionNormalizer.ComparePattern.Left">
            <summary>
            Gets left-hand argument to Compare operation.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.ExpressionNormalizer.ComparePattern.Right">
            <summary>
            Gets right-hand argument to Compare operation.
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.FilterQueryOptionExpression">
            <summary>
            An resource specific expression representing a filter query option.
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.QueryOptionExpression">
            <summary>
            An resource specific expression representing a query option.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.QueryOptionExpression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
            <summary>
            Creates a QueryOptionExpression expression
            </summary>
            <param name="nodeType">expression node type</param>
            <param name="type">the return type of the expression</param>
        </member>
        <member name="M:System.Data.Services.Client.QueryOptionExpression.ComposeMultipleSpecification(System.Data.Services.Client.QueryOptionExpression)">
            <summary>
            Composes the <paramref name="previous"/> expression with this one when it's specified multiple times.
            </summary>
            <param name="previous"><see cref="T:System.Data.Services.Client.QueryOptionExpression"/> to compose.</param>
            <returns>
            The expression that results from composing the <paramref name="previous"/> expression with this one.
            </returns>
        </member>
        <member name="F:System.Data.Services.Client.FilterQueryOptionExpression.predicate">
            <summary>predicate</summary>
        </member>
        <member name="M:System.Data.Services.Client.FilterQueryOptionExpression.#ctor(System.Type,System.Linq.Expressions.Expression)">
            <summary>
            Creates a FilterQueryOptionExpression expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="predicate">the predicate</param>
        </member>
        <member name="P:System.Data.Services.Client.FilterQueryOptionExpression.Predicate">
            <summary>Gets the query option value.</summary>
        </member>
        <member name="T:System.Data.Services.Client.InputBinder">
            <summary>
            Replaces references to resource sets - represented as either ParameterExpressions or one or more
            MemberExpressions over a ParameterExpression - with an appropriate InputReferenceExpression that
            indicates which resource set is referenced; effective 'binds' the argument expression to the
            resource sets that it references.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.InputBinder.referencedInputs">
            <summary>Tracks which resource sets are referenced by the argument expression</summary>
        </member>
        <member name="F:System.Data.Services.Client.InputBinder.input">
            <summary>Resource from which valid references must start; if no set with a transparent scope is present, only direct references to this resource will be rebound</summary>
        </member>
        <member name="F:System.Data.Services.Client.InputBinder.inputSet">
            <summary>The input resource, as a resource set (may be null if the input is actually a NavigationPropertySingletonExpression)</summary>
        </member>
        <member name="F:System.Data.Services.Client.InputBinder.inputParameter">
            <summary>The ParameterExpression that, if encountered, indicates a reference to the input resource set</summary>
        </member>
        <member name="M:System.Data.Services.Client.InputBinder.#ctor(System.Data.Services.Client.ResourceExpression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Constructs a new InputBinder based on the specified input resource set, which is represented by the specified ParameterExpression.
            </summary>
            <param name="resource">The current input resource from which valid references must start</param>
            <param name="setReferenceParam">The parameter that must be referenced in order to refer to the specified input resource set</param>
        </member>
        <member name="M:System.Data.Services.Client.InputBinder.Bind(System.Linq.Expressions.Expression,System.Data.Services.Client.ResourceExpression,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.List{System.Data.Services.Client.ResourceExpression})">
            <summary>
            Replaces Lambda parameter references or transparent scope property accesses over those Lambda
            parameter references with <see cref="T:System.Data.Services.Client.InputReferenceExpression"/>s to the appropriate corresponding
            <see cref="T:System.Data.Services.Client.ResourceSetExpression"/>s, based on the 'input' ResourceSetExpression to which the
            Lambda is logically applied and any enclosing transparent scope applied to that input resource set.
            </summary>
            <param name="e">The parameter to rebind</param>
            <param name="currentInput">
            The 'current input' resource set - either the root resource set or the
            rightmost set in the navigation chain.</param>
            <param name="inputParameter">The Lambda parameter that represents a reference to the 'input' set</param>
            <param name="referencedInputs">A list that will be populated with the resource sets that were referenced by the rebound expression</param>
            <returns>
            The rebound version of <paramref name="e"/> where MemberExpression/ParameterExpressions that
            represent resource set references have been replaced with appropriate InputReferenceExpressions.
            </returns>
        </member>
        <member name="M:System.Data.Services.Client.InputBinder.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Resolves member accesses that represent transparent scope property accesses to the corresponding resource set,
            iff the input resource set is enclosed in a transparent scope and the specified MemberExpression represents
            such a property access.
            </summary>
            <param name="m">MemberExpression expression to visit</param>
            <returns>
            An InputReferenceExpression if the member access represents a transparent scope property
            access that can be resolved to a resource set in the path that produces the input resource set;
            otherwise the same MemberExpression is returned.
            </returns>
        </member>
        <member name="M:System.Data.Services.Client.InputBinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Converts a parameter reference to the input resource set into an InputReferenceExpression,
            iff the parameter reference is to the parameter expression that represents the input resource set
            and the input resource set is not enclosed in a transparent scope.
            </summary>
            <param name="p">The parameter reference expression</param>
            <returns>
            An InputReferenceExpression if the parameter reference is to the input parameter;
            otherwise the same parameter reference expression
            </returns>
        </member>
        <member name="M:System.Data.Services.Client.InputBinder.CreateReference(System.Data.Services.Client.ResourceExpression)">
            <summary>
            Returns an <see cref="T:System.Data.Services.Client.InputReferenceExpression"/> that references the specified resource set,
            and also adds the the resource set to the hashset of resource sets that were referenced by the
            expression that is being rebound.
            </summary>
            <param name="resource">The resource(set) for which a reference was found</param>
            <returns>An InputReferenceExpression that represents a reference to the specified resource set</returns>
        </member>
        <member name="T:System.Data.Services.Client.OrderByQueryOptionExpression">
            <summary>
            An resource specific expression representing a OrderBy query option.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.OrderByQueryOptionExpression.selectors">
            <summary> selectors for OrderBy query option</summary>
        </member>
        <member name="M:System.Data.Services.Client.OrderByQueryOptionExpression.#ctor(System.Type,System.Collections.Generic.List{System.Data.Services.Client.OrderByQueryOptionExpression.Selector})">
            <summary>
            Creates a OrderByQueryOptionExpression expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="selectors">selectors for orderby expression</param>
        </member>
        <member name="P:System.Data.Services.Client.OrderByQueryOptionExpression.Selectors">
            <summary>
            Selectors for OrderBy expression
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.OrderByQueryOptionExpression.Selector">
            <summary>
            Structure for selectors.  Holds lambda expression + flag indicating desc.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.OrderByQueryOptionExpression.Selector.Expression">
            <summary>
            lambda expression for selector
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.OrderByQueryOptionExpression.Selector.Descending">
            <summary>
            flag indicating if descending
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.OrderByQueryOptionExpression.Selector.#ctor(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Creates a Selector
            </summary>
            <param name="e">lambda expression for selector</param>
            <param name="descending">flag indicating if descending</param>
        </member>
        <member name="T:System.Data.Services.Client.ResourceBinder">
            <summary>
            This class provides a Bind method that analyzes an input <see cref="T:System.Linq.Expressions.Expression"/> and returns a bound tree.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceBinder.setsRequiringKeyPredicate">
            <summary>
            Sets of <see cref="T:System.Data.Services.Client.ResourceSetExpression"/> that require a key predicate that hasn't been satisfied yet.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ResourceBinder.Bind(System.Linq.Expressions.Expression)">
            <summary>Analyzes and binds the specified expression.</summary>
            <param name="e">Expression to bind.</param>
            <returns>The expression with bound nodes.</returns>
        </member>
        <member name="M:System.Data.Services.Client.ResourceBinder.AnalyzePredicate(System.Linq.Expressions.MethodCallExpression)">
            <summary>Analyzes a predicate (Where clause).</summary>
            <param name="mce"><see cref="T:System.Linq.Expressions.MethodCallExpression"/> for a Where call.</param>
            <returns>
            An equivalent expression to <paramref name="mce"/>, possibly a different one with additional annotations.
            </returns>
        </member>
        <member name="M:System.Data.Services.Client.ResourceBinder.CollectionContentsEqual``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares the contents of both collections for equality, ignoring element order.
            </summary>
            <typeparam name="T">Type of collection elements.</typeparam>
            <param name="left">Left-hand side collection.</param>
            <param name="right">Right-hand side collection.</param>
            <param name="comparer">Comparer object.</param>
            <returns>true if both collections contain the same elements; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Services.Client.ResourceBinder.ExtractKeyPredicate(System.Data.Services.Client.ResourceSetExpression,System.Collections.Generic.List{System.Linq.Expressions.Expression},System.Collections.Generic.Dictionary{System.Reflection.PropertyInfo,System.Linq.Expressions.ConstantExpression}@)">
            <summary>
            Given a list of predicates, extracts key values for the specified <paramref name="target"/>.
            </summary>
            <param name="target">Target set.</param>
            <param name="predicates">Candidate predicates.</param>
            <param name="keyValues">Dictionary of values for each property.</param>
            <returns>true if predicates cover the key.</returns>
        </member>
        <member name="M:System.Data.Services.Client.ResourceBinder.AddConjuncts(System.Linq.Expressions.Expression,System.Collections.Generic.List{System.Linq.Expressions.Expression})">
            <summary>Adds all AND'ed expressions to the specified <paramref name="conjuncts"/> list.</summary>
            <param name="e">Expression to recursively add conjuncts from.</param>
            <param name="conjuncts">Target list of conjucts.</param>
        </member>
        <member name="M:System.Data.Services.Client.ResourceBinder.LimitCardinality(System.Linq.Expressions.MethodCallExpression,System.Int32)">
            <summary>Ensures that there's a limit on the cardinality of a query.</summary>
            <param name="mce"><see cref="T:System.Linq.Expressions.MethodCallExpression"/> for the method to limit First/Single(OrDefault).</param>
            <param name="maxCardinality">Maximum cardinality to allow.</param>
            <returns>
            An expression that limits <paramref name="mce"/> to no more than <paramref name="maxCardinality"/> elements.
            </returns>
            <remarks>This method is used by .First(OrDefault) and .Single(OrDefault) to limit cardinality.</remarks>
        </member>
        <member name="M:System.Data.Services.Client.ResourceBinder.RemoveTransparentScope(System.Type,System.Data.Services.Client.ResourceSetExpression)">
            <summary>
            Produces a new <see cref="T:System.Data.Services.Client.ResourceSetExpression"/> that is a clone of <paramref name="input"/> in all respects,
            other than its result type - which will be <paramref name="expectedResultType"/> - and it's transparent scope,
            which will be <c>null</c>. This is a shallow clone operation - sequence query options, key predicate, etc are
            not cloned, but are reassigned to the new instance. The <paramref name="input"/> resource expression should be
            discarded after being used with this method.
            </summary>
            <param name="expectedResultType">The result type - <see cref="P:System.Linq.Expressions.Expression.Type"/> - that the new resource set expression should have.</param>
            <param name="input">The resource set expression from which the transparent scope is being removed</param>
            <returns>A new resource set expression without an enclosing transparent scope and with the specified result type.</returns>
        </member>
        <member name="M:System.Data.Services.Client.ResourceBinder.PatternRules.MatchKeyProperty(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo@)">
            <summary>
            Checks whether the specified <paramref name="expression"/> is a member access to a key.
            </summary>
            <param name="expression">Expression to check.</param>
            <param name="property">If this is a key access, the property for the key.</param>
            <returns>true if <paramref name="expression"/> is a member access to a key; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Services.Client.ResourceBinder.PatternRules.GetKeyProperties(System.Type)">
            <summary>Gets the key properties from the specified <paramref name="type"/>.</summary>
            <param name="type">Type to get properties from.</param>
            <returns>A list of properties that are key for the type; possibly an empty list.</returns>
        </member>
        <member name="T:System.Data.Services.Client.ResourceBinder.PropertyInfoEqualityComparer">
            <summary>
            Equality and comparison implementation for PropertyInfo.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ResourceBinder.PropertyInfoEqualityComparer.#ctor">
            <summary>
            private constructor for the singleton pattern
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceBinder.PropertyInfoEqualityComparer.Instance">
            <summary>
            Static property which returns the single instance of the EqualityComparer
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ResourceBinder.PropertyInfoEqualityComparer.Equals(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
            Checks whether the given property info's refers to the same property or not.
            </summary>
            <param name="left">first property info</param>
            <param name="right">second property info</param>
            <returns>true if they refer to the same property, otherwise returns false.</returns>
        </member>
        <member name="M:System.Data.Services.Client.ResourceBinder.PropertyInfoEqualityComparer.GetHashCode(System.Reflection.PropertyInfo)">
            <summary>
            Computes the hashcode for the given property info
            </summary>
            <param name="obj">property info whose hash code needs to be computed.</param>
            <returns>the hashcode for the given property info.</returns>
        </member>
        <member name="T:System.Data.Services.Client.ResourceExpressionType">
            <summary>Enum for resource expression types</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceExpressionType.RootResourceSet">
            <summary>ResourceSet Expression</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceExpressionType.ResourceNavigationProperty">
            <summary>Resource Navigation Expression</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceExpressionType.ResourceNavigationPropertySingleton">
            <summary>Resource Navigation Expression to Singleton</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceExpressionType.TakeQueryOption">
            <summary>Take Query Option Expression</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceExpressionType.SkipQueryOption">
            <summary>Skip Query Option Expression</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceExpressionType.OrderByQueryOption">
            <summary>OrderBy Query Option Expression</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceExpressionType.FilterQueryOption">
            <summary>Filter Query Option Expression</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceExpressionType.InputReference">
            <summary>Reference to a bound component of the resource set path</summary>
        </member>
        <member name="T:System.Data.Services.Client.NavigationPropertySingletonExpression">
            <summary>ResourceSet Expression</summary>
        </member>
        <member name="F:System.Data.Services.Client.NavigationPropertySingletonExpression.source">
            <summary>source expression</summary>
        </member>
        <member name="F:System.Data.Services.Client.NavigationPropertySingletonExpression.memberExpression">
            <summary>property member name</summary>
        </member>
        <member name="M:System.Data.Services.Client.NavigationPropertySingletonExpression.#ctor(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.List{System.Linq.Expressions.ConstantExpression},System.Data.Services.Client.CountOption,System.Collections.Generic.Dictionary{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression})">
            <summary>
            Creates a NavigationPropertySingletonExpression expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="source">the source expression</param>
            <param name="memberExpression">property member name</param>
            <param name="expandPaths">expand paths for resource set</param>
            <param name="countOption">count option for the resource set</param>
            <param name="customQueryOptions">custom query options for resourcse set</param>
        </member>
        <member name="M:System.Data.Services.Client.NavigationPropertySingletonExpression.Cast(System.Type)">
            <summary>
            Cast changes the type of the ResourceExpression
            </summary>
            <param name="type">new type</param>
            <returns>new NavigationPropertySingletonExpression</returns>
        </member>
        <member name="P:System.Data.Services.Client.NavigationPropertySingletonExpression.MemberExpression">
            <summary>
            Gets the member expression.
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.NavigationPropertySingletonExpression.Source">
            <summary>
            Gets the source expression.
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.NavigationPropertySingletonExpression.ResourceType">
            <summary>
            The resource type of the singe instance produced by this singleton navigation.
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.NavigationPropertySingletonExpression.IsSingleton">
            <summary>
            Singleton navigation properties always produce at most 1 result
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.NavigationPropertySingletonExpression.HasQueryOptions">
            <summary>
            Does Singleton navigation have query options.
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.ResourceSetExpression">
            <summary>ResourceSet Expression</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceSetExpression.resourceType">
            <summary>
            The (static) type of the resources in this resource set.
            The resource type can differ from this.Type if this expression represents a transparent scope.
            For example, in TransparentScope{Category, Product}, the true element type is Product.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceSetExpression.source">
            <summary>source expression</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceSetExpression.member">
            <summary>property member name</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceSetExpression.keyFilter">
            <summary>key predicate</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceSetExpression.sequenceQueryOptions">
            <summary>sequence query options</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceSetExpression.leafResource">
            <summary>Is Leaf Resource</summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceSetExpression.transparentScope">
            <summary>enclosing transparent scope</summary>
        </member>
        <member name="M:System.Data.Services.Client.ResourceSetExpression.#ctor(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type,System.Collections.Generic.List{System.Linq.Expressions.ConstantExpression},System.Data.Services.Client.CountOption,System.Collections.Generic.Dictionary{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression})">
            <summary>
            Creates a ResourceSet expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="source">the source expression</param>
            <param name="memberExpression">property member name</param>
            <param name="resourceType">the element type of the resource set</param>
            <param name="expandPaths">expand paths for resource set</param>
            <param name="countOption">count query option for the resource set</param>
            <param name="customQueryOptions">custom query options for resourcse set</param>
        </member>
        <member name="M:System.Data.Services.Client.ResourceSetExpression.Cast(System.Type)">
            <summary>
            Cast ResourceSetExpression to new type
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ResourceSetExpression.AddSequenceQueryOption(System.Data.Services.Client.QueryOptionExpression)">
            <summary>
            Add query option to resource expression
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ResourceSetExpression.OverrideInputReference(System.Data.Services.Client.ResourceSetExpression)">
            <summary>
            Instructs this resource set expression to use the input reference expression from <paramref name="newInput"/> as it's
            own input reference, and to retarget the input reference from <paramref name="newInput"/> to this resource set expression.
            </summary>
            <param name="newInput">The resource set expression from which to take the input reference.</param>
            <remarks>Used exclusively by <see cref="M:System.Data.Services.Client.ResourceBinder.RemoveTransparentScope(System.Type,System.Data.Services.Client.ResourceSetExpression)"/>.</remarks>
        </member>
        <member name="P:System.Data.Services.Client.ResourceSetExpression.MemberExpression">
            <summary>
            Member for ResourceSet 
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceSetExpression.Source">
            <summary>
            source 
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceSetExpression.ResourceType">
            <summary>
            Type of resources contained in this ResourceSet - it's element type.
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceSetExpression.HasTransparentScope">
            <summary>
            Is this ResourceSet enclosed in an anonymously-typed transparent scope produced by a SelectMany operation? 
            Applies to navigation ResourceSets.
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceSetExpression.TransparentScope">
            <summary>
            The property accesses required to reference this ResourceSet and its source ResourceSet if a transparent scope is present.
            May be null. Use <see cref="P:System.Data.Services.Client.ResourceSetExpression.HasTransparentScope"/> to test for the presence of a value.
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceSetExpression.HasKeyPredicate">
            <summary>
            Has a key predicate restriction been applied to this ResourceSet?
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceSetExpression.KeyPredicate">
            <summary>
            The property name/required value pairs that comprise the key predicate (if any) applied to this ResourceSet.
            May be null. Use <see cref="P:System.Data.Services.Client.ResourceSetExpression.HasKeyPredicate"/> to test for the presence of a value.
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceSetExpression.IsSingleton">
            <summary>
            A resource set produces at most 1 result if constrained by a key predicate
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceSetExpression.HasQueryOptions">
            <summary>
            Have sequence query options (filter, orderby, skip, take), expand paths,
            or custom query options been applied to this resource set?
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceSetExpression.Filter">
            <summary>
            Filter query option for ResourceSet
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceSetExpression.OrderBy">
            <summary>
            OrderBy query option for ResourceSet
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceSetExpression.Skip">
            <summary>
            Skip query option for ResourceSet
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceSetExpression.Take">
            <summary>
            Take query option for ResourceSet
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceSetExpression.SequenceQueryOptions">
            <summary>
            Gets sequence query options for ResourcSet
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceSetExpression.HasSequenceQueryOptions">
            <summary>Whether there are any query options for the sequence.</summary>
        </member>
        <member name="P:System.Data.Services.Client.ResourceSetExpression.IsLeafResource">
            <summary>
            Is ResourcSet a leaf resource?
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.ResourceSetExpression.TransparentAccessors">
            <summary>
             Represents the property accesses required to access both this resource set and it's source
             resource/set (for navigations). This accesses are required to reference resource sets enclosed
             in transparent scopes introduced by use of SelectMany. 
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceSetExpression.TransparentAccessors.Accessor">
            <summary>
            The property reference that must be applied to reference this resource set
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.ResourceSetExpression.TransparentAccessors.SourceAccessor">
            <summary>
            The property reference that must be applied to reference the source resource set.
            Note that this set's Accessor is NOT required to access the source set, but the
            source set MAY impose it's own Transparent Accessors
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ResourceSetExpression.TransparentAccessors.#ctor(System.String,System.String)">
            <summary>
            Constructs a new transparent scope with the specified set and source set accessors
            </summary>
            <param name="acc">The name of the property required to access the resource set</param>
            <param name="sourceAcc">The name of the property required to access the resource set's source</param>
        </member>
        <member name="T:System.Data.Services.Client.SkipQueryOptionExpression">
            <summary>
            An resource specific expression representing a skip query option.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.SkipQueryOptionExpression.skipAmount">
            <summary>amount to skip</summary>
        </member>
        <member name="M:System.Data.Services.Client.SkipQueryOptionExpression.#ctor(System.Type,System.Linq.Expressions.ConstantExpression)">
            <summary>
            Creates a SkipQueryOption expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="skipAmount">the query option value</param>
        </member>
        <member name="M:System.Data.Services.Client.SkipQueryOptionExpression.ComposeMultipleSpecification(System.Data.Services.Client.QueryOptionExpression)">
            <summary>
            Composes the <paramref name="previous"/> expression with this one when it's specified multiple times.
            </summary>
            <param name="previous"><see cref="T:System.Data.Services.Client.QueryOptionExpression"/> to compose.</param>
            <returns>
            The expression that results from composing the <paramref name="previous"/> expression with this one.
            </returns>
        </member>
        <member name="P:System.Data.Services.Client.SkipQueryOptionExpression.SkipAmount">
            <summary>
            query option value
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.TakeQueryOptionExpression">
            <summary>
            An resource specific expression representing a take query option.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.TakeQueryOptionExpression.takeAmount">
            <summary>amount to skip</summary>
        </member>
        <member name="M:System.Data.Services.Client.TakeQueryOptionExpression.#ctor(System.Type,System.Linq.Expressions.ConstantExpression)">
            <summary>
            Creates a TakeQueryOption expression
            </summary>
            <param name="type">the return type of the expression</param>
            <param name="takeAmount">the query option value</param>
        </member>
        <member name="M:System.Data.Services.Client.TakeQueryOptionExpression.ComposeMultipleSpecification(System.Data.Services.Client.QueryOptionExpression)">
            <summary>
            Composes the <paramref name="previous"/> expression with this one when it's specified multiple times.
            </summary>
            <param name="previous"><see cref="T:System.Data.Services.Client.QueryOptionExpression"/> to compose.</param>
            <returns>
            The expression that results from composing the <paramref name="previous"/> expression with this one.
            </returns>
        </member>
        <member name="P:System.Data.Services.Client.TakeQueryOptionExpression.TakeAmount">
            <summary>
            query option value
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.TypeSystem">
            <summary>Utility functions for processing Expression trees</summary>
        </member>
        <member name="F:System.Data.Services.Client.TypeSystem.VisualBasicAssemblyFullName">
            <summary> VB Assembly name</summary>
        </member>
        <member name="F:System.Data.Services.Client.TypeSystem.expressionMethodMap">
            <summary> Method map for methods in URI query options</summary>
        </member>
        <member name="F:System.Data.Services.Client.TypeSystem.expressionVBMethodMap">
            <summary> VB Method map for methods in URI query options</summary>
        </member>
        <member name="F:System.Data.Services.Client.TypeSystem.propertiesAsMethodsMap">
            <summary> Properties that should be represented as methods</summary>
        </member>
        <member name="M:System.Data.Services.Client.TypeSystem.#cctor">
            <summary>
            Initializes method map
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.TypeSystem.TryGetQueryOptionMethod(System.Reflection.MethodInfo,System.String@)">
            <summary>
            Sees if method has URI equivalent
            </summary>
            <param name="mi">The method info</param>
            <param name="methodName">uri method name</param>
            <returns>true/ false</returns>
        </member>
        <member name="M:System.Data.Services.Client.TypeSystem.TryGetPropertyAsMethod(System.Reflection.PropertyInfo,System.Reflection.MethodInfo@)">
            <summary>
            Sees if property can be represented as method for translation to URI
            </summary>
            <param name="pi">The property info</param>
            <param name="mi">get method for property</param>
            <returns>true/ false</returns>
        </member>
        <member name="M:System.Data.Services.Client.TypeSystem.GetElementType(System.Type)">
            <summary>
            Gets the elementtype for a sequence
            </summary>
            <param name="seqType">The sequence type</param>
            <returns>The element type</returns>
        </member>
        <member name="M:System.Data.Services.Client.TypeSystem.IsPrivate(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether a property is private
            </summary>
            <param name="pi">The PropertyInfo structure for the property</param>
            <returns>true/ false if property is private</returns>
        </member>
        <member name="M:System.Data.Services.Client.TypeSystem.FindIEnumerable(System.Type)">
            <summary>
            Finds type that implements IEnumerable so can get elemtent type
            </summary>
            <param name="seqType">The Type to check</param>
            <returns>returns the type which implements IEnumerable</returns>
        </member>
        <member name="T:System.Data.Services.Client.UriHelper">
            <summary>utility class for helping construct uris</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.FORWARDSLASH">
            <summary>forwardslash character</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.LEFTPAREN">
            <summary>leftparan character</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.RIGHTPAREN">
            <summary>rightparan character</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.QUESTIONMARK">
            <summary>questionmark character</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.AMPERSAND">
            <summary>ampersand character</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.EQUALSSIGN">
            <summary>equals character</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.DOLLARSIGN">
            <summary>dollar sign character</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.SPACE">
            <summary>dollar sign character</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.COMMA">
            <summary>dollar sign character</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.QUOTE">
            <summary>single quote</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.OPTIONTOP">
            <summary>top</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.OPTIONSKIP">
            <summary>skip</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.OPTIONORDERBY">
            <summary>orderby</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.OPTIONFILTER">
            <summary>where</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.OPTIONDESC">
            <summary>desc</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.OPTIONEXPAND">
            <summary>expand</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.OPTIONCOUNT">
            <summary>inlinecount</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.COUNTALL">
            <summary>allpages</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.COUNT">
            <summary>value</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.AND">
            <summary>and</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.OR">
            <summary>or</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.EQ">
            <summary>eq</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.NE">
            <summary>ne</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.LT">
            <summary>lt</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.LE">
            <summary>le</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.GT">
            <summary>gt</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.GE">
            <summary>ge</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.ADD">
            <summary>add</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.SUB">
            <summary>sub</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.MUL">
            <summary>mul</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.DIV">
            <summary>div</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.MOD">
            <summary>mod</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.NEGATE">
            <summary>negate</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.NOT">
            <summary>not</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.NULL">
            <summary>null</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.ISOF">
            <summary>isof</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriHelper.CAST">
            <summary>cast</summary>
        </member>
        <member name="T:System.Data.Services.Client.ExpressionWriter">
            <summary>
            Special visitor to serialize supported expression as query parameters
            in the generated URI.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.ExpressionWriter.builder">
            <summary>Internal buffer.</summary>
        </member>
        <member name="F:System.Data.Services.Client.ExpressionWriter.context">
            <summary>Data context used to generate type names for types.</summary>
        </member>
        <member name="F:System.Data.Services.Client.ExpressionWriter.expressionStack">
            <summary>Stack of expressions being visited.</summary>
        </member>
        <member name="F:System.Data.Services.Client.ExpressionWriter.cantTranslateExpression">
            <summary>set if can't translate expression</summary>
        </member>
        <member name="F:System.Data.Services.Client.ExpressionWriter.parent">
            <summary>Parent expression of the current expression (expression.Peek()); possibly null.</summary>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.#ctor(System.Data.Services.Client.DataServiceContext)">
            <summary>
            Creates an ExpressionWriter for the specified <paramref name="context"/>.
            </summary>
            <param name='context'>Data context used to generate type names for types.</param>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.ExpressionToString(System.Data.Services.Client.DataServiceContext,System.Linq.Expressions.Expression)">
            <summary>
            Serializes an expression to a string
            </summary>
            <param name='context'>Data context used to generate type names for types.</param>
            <param name="e">Expression to serialize</param>
            <returns>serialized expression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.Visit(System.Linq.Expressions.Expression)">
            <summary>Main visit method.</summary>
            <param name="exp">Expression to visit</param>
            <returns>Visited expression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            ConditionalExpression visit method
            </summary>
            <param name="c">The ConditionalExpression expression to visit</param>
            <returns>The visited ConditionalExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            LambdaExpression visit method
            </summary>
            <param name="lambda">The LambdaExpression to visit</param>
            <returns>The visited LambdaExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            NewExpression visit method
            </summary>
            <param name="nex">The NewExpression to visit</param>
            <returns>The visited NewExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            MemberInitExpression visit method
            </summary>
            <param name="init">The MemberInitExpression to visit</param>
            <returns>The visited MemberInitExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            ListInitExpression visit method
            </summary>
            <param name="init">The ListInitExpression to visit</param>
            <returns>The visited ListInitExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            NewArrayExpression visit method
            </summary>
            <param name="na">The NewArrayExpression to visit</param>
            <returns>The visited NewArrayExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            InvocationExpression visit method
            </summary>
            <param name="iv">The InvocationExpression to visit</param>
            <returns>The visited InvocationExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.VisitInputReferenceExpression(System.Data.Services.Client.InputReferenceExpression)">
            <summary>
            Input resource set references are intentionally omitted from the URL string. 
            </summary>
            <param name="ire">The input reference</param>
            <returns>The same input reference expression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            MethodCallExpression visit method
            </summary>
            <param name="m">The MethodCallExpression expression to visit</param>
            <returns>The visited MethodCallExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Serializes an MemberExpression to a string
            </summary>
            <param name="m">Expression to serialize</param>
            <returns>MemberExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            ConstantExpression visit method
            </summary>
            <param name="c">The ConstantExpression expression to visit</param>
            <returns>The visited ConstantExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Serializes an UnaryExpression to a string
            </summary>
            <param name="u">Expression to serialize</param>
            <returns>UnaryExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Serializes an BinaryExpression to a string
            </summary>
            <param name="b">BinaryExpression to serialize</param>
            <returns>serialized expression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Serializes an TypeBinaryExpression to a string
            </summary>
            <param name="b">TypeBinaryExpression to serialize</param>
            <returns>serialized expression</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            ParameterExpression visit method.
            </summary>
            <param name="p">The ParameterExpression expression to visit</param>
            <returns>The visited ParameterExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.IsInputReference(System.Linq.Expressions.Expression)">
            <summary>
            References to the current input - the resource set - do not appear in the URL.
            </summary>
            <param name="exp">The expression to test</param>
            <returns><c>true</c> if the expression represents a reference to the current (resource set) input; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.TypeNameForUri(System.Type)">
            <summary>Gets the type name to be used in the URI for the given <paramref name="type"/>.</summary>
            <param name="type">Type to get name for.</param>
            <returns>The name for the <paramref name="type"/>, suitable for including in a URI.</returns>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.VisitOperand(System.Linq.Expressions.Expression)">
            <summary>
            Visits operands for Binary and Unary expressions.
            Will only output parens if operand is complex expression,
            this is so don't have unecessary parens in URI.
            </summary>
            <param name="e">The operand expression to visit</param>
        </member>
        <member name="M:System.Data.Services.Client.ExpressionWriter.Translate(System.Linq.Expressions.Expression)">
            <summary>
            Serializes an expression to a string
            </summary>
            <param name="e">Expression to serialize</param>
            <returns>serialized expression</returns>
        </member>
        <member name="T:System.Data.Services.Client.UriWriter">
            <summary>
            Translates resource bound expression trees into URIs.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.UriWriter.context">
            <summary>Data context used to generate type names for types.</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriWriter.uriBuilder">
            <summary>stringbuilder for constructed URI</summary>
        </member>
        <member name="F:System.Data.Services.Client.UriWriter.uriVersion">
            <summary>the data service version for the uri</summary>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.#ctor(System.Data.Services.Client.DataServiceContext)">
            <summary>
            Private constructor for creating UriWriter
            </summary>
            <param name='context'>Data context used to generate type names for types.</param>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.Translate(System.Data.Services.Client.DataServiceContext,System.Linq.Expressions.Expression)">
            <summary>
            Translates resource bound expression tree to a URI.
            </summary>
            <param name='context'>Data context used to generate type names for types.</param>
            <param name="e">The expression to translate</param>
            <returns>Uri as a string </returns>        
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            MethodCallExpression visit method
            </summary>
            <param name="m">The MethodCallExpression expression to visit</param>
            <returns>The visited MethodCallExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            UnaryExpression visit method
            </summary>
            <param name="u">The UnaryExpression expression to visit</param>
            <returns>The visited UnaryExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            BinaryExpression visit method
            </summary>
            <param name="b">The BinaryExpression expression to visit</param>
            <returns>The visited BinaryExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            ConstantExpression visit method
            </summary>
            <param name="c">The ConstantExpression expression to visit</param>
            <returns>The visited ConstantExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            TypeBinaryExpression visit method
            </summary>
            <param name="b">The TypeBinaryExpression expression to visit</param>
            <returns>The visited TypeBinaryExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            ConditionalExpression visit method
            </summary>
            <param name="c">The ConditionalExpression expression to visit</param>
            <returns>The visited ConditionalExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            ParameterExpression visit method
            </summary>
            <param name="p">The ParameterExpression expression to visit</param>
            <returns>The visited ParameterExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            MemberExpression visit method
            </summary>
            <param name="m">The MemberExpression expression to visit</param>
            <returns>The visited MemberExpression expression </returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            LambdaExpression visit method
            </summary>
            <param name="lambda">The LambdaExpression to visit</param>
            <returns>The visited LambdaExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            NewExpression visit method
            </summary>
            <param name="nex">The NewExpression to visit</param>
            <returns>The visited NewExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            MemberInitExpression visit method
            </summary>
            <param name="init">The MemberInitExpression to visit</param>
            <returns>The visited MemberInitExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            ListInitExpression visit method
            </summary>
            <param name="init">The ListInitExpression to visit</param>
            <returns>The visited ListInitExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            NewArrayExpression visit method
            </summary>
            <param name="na">The NewArrayExpression to visit</param>
            <returns>The visited NewArrayExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            InvocationExpression visit method
            </summary>
            <param name="iv">The InvocationExpression to visit</param>
            <returns>The visited InvocationExpression</returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitNavigationPropertySingletonExpression(System.Data.Services.Client.NavigationPropertySingletonExpression)">
            <summary>
            NavigationPropertySingletonExpression visit method.
            </summary>
            <param name="npse">NavigationPropertySingletonExpression expression to visit</param>
            <returns>Visited NavigationPropertySingletonExpression expression</returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitResourceSetExpression(System.Data.Services.Client.ResourceSetExpression)">
            <summary>
            ResourceSetExpression visit method.
            </summary>
            <param name="rse">ResourceSetExpression expression to visit</param>
            <returns>Visited ResourceSetExpression expression</returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitQueryOptions(System.Data.Services.Client.ResourceExpression)">
            <summary>
            Visit Query options for Resource
            </summary>
            <param name="re">Resource Expression with query options</param>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitQueryOptionExpression(System.Data.Services.Client.SkipQueryOptionExpression)">
            <summary>
            SkipQueryOptionExpression visit method.
            </summary>
            <param name="sqoe">SkipQueryOptionExpression expression to visit</param>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitQueryOptionExpression(System.Data.Services.Client.TakeQueryOptionExpression)">
            <summary>
            TakeQueryOptionExpression visit method.
            </summary>
            <param name="tqoe">TakeQueryOptionExpression expression to visit</param>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitQueryOptionExpression(System.Data.Services.Client.FilterQueryOptionExpression)">
            <summary>
            FilterQueryOptionExpression visit method.
            </summary>
            <param name="fqoe">FilterQueryOptionExpression expression to visit</param>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitQueryOptionExpression(System.Data.Services.Client.OrderByQueryOptionExpression)">
            <summary>
            OrderByQueryOptionExpression visit method.
            </summary>
            <param name="oboe">OrderByQueryOptionExpression expression to visit</param>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitExpandOptions(System.Collections.Generic.List{System.Linq.Expressions.ConstantExpression})">
            <summary>
            VisitExpandOptions visit method.
            </summary>
            <param name="paths">Expand Paths</param>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitCountOptions">
            <summary>
            VisitCountOptions visit method.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.VisitCustomQueryOptions(System.Collections.Generic.Dictionary{System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.ConstantExpression})">
            <summary>
            VisitCustomQueryOptions visit method.
            </summary>
            <param name="options">Custom query options</param>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.ExpressionToString(System.Linq.Expressions.Expression)">
            <summary>Serializes an expression to a string.</summary>
            <param name="expression">Expression to serialize</param>
            <returns>The serialized expression.</returns>
        </member>
        <member name="M:System.Data.Services.Client.UriWriter.EnsureMinimumVersion(System.Int32,System.Int32)">
            <summary>
            Ensure that the translated uri has the required minimum version associated with it
            </summary>
            <param name="major">The major number for the version. </param>
            <param name="minor">The minor number for the version. </param>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceQueryProvider">
            <summary>
            QueryProvider implementation
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceQueryProvider.Context">
            <summary>DataServiceContext for query provider</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQueryProvider.#ctor(System.Data.Services.Client.DataServiceContext)">
            <summary>Constructs a query provider based on the context passed in </summary>
            <param name="context">The context for the query provider</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>Factory method for creating DataServiceOrderedQuery based on expression </summary>
            <param name="expression">The expression for the new query</param>
            <returns>new DataServiceQuery</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>Factory method for creating DataServiceOrderedQuery based on expression </summary>
            <typeparam name="TElement">generic type</typeparam>
            <param name="expression">The expression for the new query</param>
            <returns>new DataServiceQuery</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>Creates and executes a DataServiceQuery based on the passed in expression</summary>
            <param name="expression">The expression for the new query</param>
            <returns>the results</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>Creates and executes a DataServiceQuery based on the passed in expression</summary>
            <typeparam name="TResult">generic type</typeparam>
            <param name="expression">The expression for the new query</param>
            <returns>the results</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQueryProvider.ReturnSingleton``1(System.Linq.Expressions.Expression)">
            <summary>Creates and executes a DataServiceQuery based on the passed in expression which results a single value</summary>
            <typeparam name="TElement">generic type</typeparam>
            <param name="expression">The expression for the new query</param>
            <returns>single valued results</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQueryProvider.Translate(System.Linq.Expressions.Expression)">
            <summary>Builds the Uri for the expression passed in.</summary>
            <param name="e">The expression to translate into a Uri</param>
            <returns>Query components</returns>
        </member>
        <member name="T:System.Data.Services.Client.ArraySet`1">
            <summary>a set, collection of unordered, distinct objects, implemented as an array</summary>
            <typeparam name="T">element type</typeparam>
        </member>
        <member name="F:System.Data.Services.Client.ArraySet`1.items">
            <summary>item array of T</summary>
        </member>
        <member name="F:System.Data.Services.Client.ArraySet`1.count">
            <summary>count of elements in the items array</summary>
        </member>
        <member name="F:System.Data.Services.Client.ArraySet`1.version">
            <summary>number of Add and RemoveAt operations</summary>
        </member>
        <member name="M:System.Data.Services.Client.ArraySet`1.#ctor(System.Int32)">
            <summary>
            array set with an intial capacity
            </summary>
            <param name="capacity">initial capacity</param>
        </member>
        <member name="M:System.Data.Services.Client.ArraySet`1.Add(`0,System.Func{`0,`0,System.Boolean})">
            <summary>add new element to the set</summary>
            <param name="item">element to add</param>
            <param name="equalityComparer">equality comparison function to avoid duplicates</param>
            <returns>true if actually added, false if a duplicate was discovered</returns>
        </member>
        <member name="M:System.Data.Services.Client.ArraySet`1.Contains(`0,System.Func{`0,`0,System.Boolean})">
            <summary>is the element contained within the set</summary>
            <param name="item">item to find</param>
            <param name="equalityComparer">comparer</param>
            <returns>true if the element is contained</returns>
        </member>
        <member name="M:System.Data.Services.Client.ArraySet`1.GetEnumerator">
            <summary>
            enumerator
            </summary>
            <returns>enumerator</returns>
        </member>
        <member name="M:System.Data.Services.Client.ArraySet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            enumerator
            </summary>
            <returns>enumerator</returns>
        </member>
        <member name="M:System.Data.Services.Client.ArraySet`1.IndexOf(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Find the current index of element within the set</summary>
            <param name="item">item to find</param>
            <param name="comparer">comparision function</param>
            <returns>index of the item else (-1)</returns>
        </member>
        <member name="M:System.Data.Services.Client.ArraySet`1.IndexOf``1(``0,System.Func{`0,``0},System.Func{``0,``0,System.Boolean})">
            <summary>Find the current index of element within the set</summary>
            <typeparam name="K">selected type</typeparam>
            <param name="item">item to find</param>
            <param name="select">selector for item to compare</param>
            <param name="comparer">item to compare</param>
            <returns>index of the item else (-1)</returns>
        </member>
        <member name="M:System.Data.Services.Client.ArraySet`1.Remove(`0,System.Func{`0,`0,System.Boolean})">
            <summary>Remove the matched item from within the set</summary>
            <param name="item">item to find within the set</param>
            <param name="equalityComparer">comparer to find item to remove</param>
            <returns>the item that was actually contained else its default</returns>
        </member>
        <member name="M:System.Data.Services.Client.ArraySet`1.RemoveAt(System.Int32)">
            <summary>Remove an item at a specific index from within the set</summary>
            <param name="index">index of item to remove within the set</param>
        </member>
        <member name="M:System.Data.Services.Client.ArraySet`1.Sort``1(System.Func{`0,``0},System.Func{``0,``0,System.Int32})">
            <summary>Sort array based on selected value out of item being stored</summary>
            <typeparam name="K">selected type</typeparam>
            <param name="selector">selector</param>
            <param name="comparer">comparer</param>
        </member>
        <member name="M:System.Data.Services.Client.ArraySet`1.IdentitySelect(`0)">
            <summary>identity selector, returns self</summary>
            <param name="arg">input</param>
            <returns>output</returns>
        </member>
        <member name="P:System.Data.Services.Client.ArraySet`1.Count">
            <summary>count of elements in the set</summary>
        </member>
        <member name="P:System.Data.Services.Client.ArraySet`1.Item(System.Int32)">
            <summary>get an item from an index in the set</summary>
            <param name="index">index to access</param>
        </member>
        <member name="T:System.Data.Services.Client.ArraySet`1.SelectorComparer`1">
            <summary>Compare selected value out of t</summary>
            <typeparam name="K">comparison type</typeparam>
        </member>
        <member name="F:System.Data.Services.Client.ArraySet`1.SelectorComparer`1.Selector">
            <summary>Select something out of T</summary>
        </member>
        <member name="F:System.Data.Services.Client.ArraySet`1.SelectorComparer`1.Comparer">
            <summary>Comparer of selected value</summary>
        </member>
        <member name="M:System.Data.Services.Client.ArraySet`1.SelectorComparer`1.System#Collections#Generic#IComparer{T}#Compare(`0,`0)">
            <summary>Compare</summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <returns>int</returns>
        </member>
        <member name="T:System.Data.Services.Client.BatchStreamState">
            <summary>
            states of the batch stream
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStreamState.EndBatch">
            <summary>EndBatch</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStreamState.StartBatch">
            <summary>StartBatch</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStreamState.BeginChangeSet">
            <summary>BeginChangeSet</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStreamState.EndChangeSet">
            <summary>EndChangeSet</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStreamState.Post">
            <summary>request Post</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStreamState.Put">
            <summary>request Put</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStreamState.Delete">
            <summary>request Delete</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStreamState.Get">
            <summary>request Get</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStreamState.Merge">
            <summary>request Merge</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStreamState.GetResponse">
            <summary>response to a Get</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStreamState.ChangeResponse">
            <summary>response to a Post/Put/Merge/Delete</summary>
        </member>
        <member name="T:System.Data.Services.Client.BindingPropertyKind">
            <summary>Type of property stored in BindingPropertyInfo.</summary>
        </member>
        <member name="F:System.Data.Services.Client.BindingPropertyKind.BindingPropertyKindComplex">
            <summary>Property type is a complex type.</summary>
        </member>
        <member name="F:System.Data.Services.Client.BindingPropertyKind.BindingPropertyKindEntity">
            <summary>Property type is an entity type with keys.</summary>
        </member>
        <member name="F:System.Data.Services.Client.BindingPropertyKind.BindingPropertyKindCollection">
            <summary>Property is of an ObservableEntityCollection.</summary>
        </member>
        <member name="T:System.Data.Services.Client.BindingEntityInfo">
            <summary>Cache of information about entity types and their observable properties</summary>
        </member>
        <member name="F:System.Data.Services.Client.BindingEntityInfo.bindingEntityInfos">
            <summary>Mapping between types and their corresponding entity information</summary>
        </member>
        <member name="M:System.Data.Services.Client.BindingEntityInfo.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:System.Data.Services.Client.BindingEntityInfo.GetObservableProperties(System.Type)">
            <summary>Obtain binding info corresponding to a given type</summary>
            <param name="entityType">Type for which to obtain information</param>
            <returns>Info about the <paramref name="entityType"/></returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingEntityInfo.GetEntitySet(System.Type)">
            <summary>Gets entity set corresponding to a given type</summary>
            <param name="entityType">Intput type</param>
            <returns>Entity set name for the type</returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingEntityInfo.GetClientType(System.Type)">
            <summary>Gets the ClientType corresponding to the given type</summary>
            <param name="entityType">Input type</param>
            <returns>Corresponding ClientType</returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingEntityInfo.GetBindingEntityInfoFor(System.Type)">
            <summary>Obtain binding info corresponding to a given type</summary>
            <param name="entityType">Type for which to obtain information</param>
            <returns>Info about the <paramref name="entityType"/></returns>
        </member>
        <member name="T:System.Data.Services.Client.BindingEntityInfo.BindingPropertyInfo">
            <summary>Information about a property interesting for binding</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingEntityInfo.BindingPropertyInfo.PropertyInfo">
            <summary>Property information</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingEntityInfo.BindingPropertyInfo.PropertyKind">
            <summary>Kind of the property i.e. complex, entity or collection.</summary>
        </member>
        <member name="T:System.Data.Services.Client.BindingEntityInfo.BindingEntityInfoPerType">
            <summary>Holder of information about entity properties for a type</summary>
        </member>
        <member name="F:System.Data.Services.Client.BindingEntityInfo.BindingEntityInfoPerType.observableProperties">
            <summary>Collection of properties interesting to the observer</summary>
        </member>
        <member name="M:System.Data.Services.Client.BindingEntityInfo.BindingEntityInfoPerType.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingEntityInfo.BindingEntityInfoPerType.EntitySet">
            <summary>Entity set of the entity</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingEntityInfo.BindingEntityInfoPerType.ClientType">
            <summary>Corresponding ClientTyp</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingEntityInfo.BindingEntityInfoPerType.ObservableProperties">
            <summary>Collection of properties interesting to the observer</summary>
        </member>
        <member name="T:System.Data.Services.Client.VertexColor">
            <summary>
            Color of each vertex to be used for Depth First Search
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.VertexColor.White">
            <summary>White color means un-visited</summary>
        </member>
        <member name="F:System.Data.Services.Client.VertexColor.Gray">
            <summary>Gray color means added to queue for DFS</summary>
        </member>
        <member name="F:System.Data.Services.Client.VertexColor.Black">
            <summary>Black color means already visited hence reachable from root</summary>
        </member>
        <member name="T:System.Data.Services.Client.BindingGraph">
            <summary>
            The BindingGraph maps objects tracked by the DataServiceContext to vertices in a 
            graph used to manage the information needed for data binding. The objects tracked 
            by the BindingGraph are entity type objects and observable entity collections.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.BindingGraph.observer">
            <summary>The observer of the graph</summary>
        </member>
        <member name="F:System.Data.Services.Client.BindingGraph.graph">
            <summary>Graph containing entities, collections and their relationships</summary>
        </member>
        <member name="F:System.Data.Services.Client.BindingGraph.bindingEntityInfo">
            <summary>Map between entity types and their type information</summary>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.#ctor(System.Data.Services.Client.BindingObserver)">
            <summary>Constructor</summary>
            <param name="observer">Observer of the graph</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.AddCollection(System.Object,System.String,System.Object,System.String)">
            <summary>Adds a collection to the graph</summary>
            <param name="source">Source object for the collection, this object has navigation property corresponding to collection</param>
            <param name="sourceProperty">Property in <paramref name="source"/> that corresponds to the collection</param>
            <param name="collection">Collection being added</param>
            <param name="collectionEntitySet">Entity set of entities in the collection</param>
            <returns>true if a new vertex had to be created, false if it already exists</returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.AddEntity(System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>Adds an entity to the graph</summary>
            <param name="source">Source object for the entity, this object has navigation property that links to entity</param>
            <param name="sourceProperty">Property in <paramref name="source"/> that links to entity</param>
            <param name="target">Entity being added</param>
            <param name="targetEntitySet">Entity set of entity being added</param>
            <param name="edgeSource">Item from which the directed edge in the graph goes into <paramref name="target"/>. This can be a collection</param>
            <returns>true if a new vertex had to be created, false if it already exists</returns>
            <remarks>
            This method processes the current 'target' entity and then recursively moves into the graph through
            the navigation properties. The 'source' is a previously processed item - it is the 'parent'
            of the target entity.
            The code generated EntitySetAttribute is processed by this method.
            A source entity can reference the target entity directly through an entity reference navigation property, 
            or indirectly through a collection navigation property.
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Remove(System.Object,System.Object,System.String)">
            <summary>
            Removes the <paramref name="item"/> from the binding graph
            </summary>
            <param name="item">Item to remove</param>
            <param name="parent">Parent of the <paramref name="item"/></param>
            <param name="parentProperty">Parent property that refers to <paramref name="item"/></param>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.RemoveCollection(System.Object)">
            <summary>Removes the collection from the graph</summary>
            <param name="collection">Collection to remove</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.RemoveRelation(System.Object,System.String)">
            <summary>Removes a relationship between two items based on source and relation label</summary>
            <param name="source">Source item</param>
            <param name="relation">Label for relation</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.RemoveNonTrackedEntities">
            <summary>Remove all non-tracked entities from the graph</summary>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Reset">
            <summary>Reset the graph after detaching notifications for everything</summary>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.GetPropertyValue(System.Object,System.String,System.Data.Services.Client.BindingEntityInfo.BindingPropertyInfo@)">
            <summary>
            Gets the value of a property and corresponding BindingPropertyInfo if property is being observed
            </summary>
            <param name="source">Source object whose property needs to be read</param>
            <param name="sourceProperty">Name of the source object property</param>
            <param name="bindingPropertyInfo">BindingPropertyInfo corresponding to <paramref name="propertyName"/></param>
            <returns>Value of the property</returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.GetEntityCollectionInfo(System.Object,System.Object@,System.String@,System.String@,System.String@)">
            <summary>Get the binding information for a collection</summary>
            <param name="collection">Collection</param>
            <param name="source">The source object that reference the target object through a navigation property.</param>
            <param name="sourceProperty">The navigation property in the source object that reference the target object.</param>
            <param name="sourceEntitySet">The entity set of the source object.</param>
            <param name="targetEntitySet">The entity set name of the target object.</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.AddFromProperties(System.Object)">
            <summary>Add items to the graph, from the <paramref name="entity"/> object's properties</summary>
            <param name="entity">Object whose properties are to be explored</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.ProcessEntitySetAttributes(System.Object,System.String)">
            <summary>
            Get the entity set name for the target entity object.
            </summary>
            <param name="target">An entity object.</param>
            <param name="targetEntitySet">The 'currently known' entity set name for the target object.</param>
            <returns>The entity set name for the target object.</returns>
            <remarks>
            Allow user code to provide the entity set name. If user code does not provide the entity set name, then 
            this method will get the entity set name from the value of the EntitySetAttribute.
            The 'currently known' entity set name for top level collections can be provided through OEC constructor
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.AttachCollectionNotification(System.Object)">
            <summary>Attach the CollectionChanged handler to an ObservableEntityCollection.</summary>
            <param name="target">An ObservableEntityCollection.</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.AttachEntityNotification(System.Object)">
            <summary>Attach the PropertyChanged handler to an entity object.</summary>
            <param name="target">An entity object.</param>
            <returns>True if the target is attached; otherwise false.</returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.DetachNotifications(System.Object)">
            <summary>Detach CollectionChanged or PropertyChanged handlers from the target</summary>
            <param name="target">An entity object or collection</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.DetachCollectionNotifications(System.Object)">
            <summary>Detach CollectionChanged handlers from the target</summary>
            <param name="target">A collection object</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.SetObserver``1(System.Collections.ICollection)">
            <summary>
            Sets the observer for a child ObservableEntityCollection
            </summary>
            <typeparam name="T">Entity type for the collection</typeparam>
            <param name="collection">Non-typed collection interface</param>
        </member>
        <member name="T:System.Data.Services.Client.BindingGraph.Graph">
            <summary>Graph implementation for tracking entities, collections for binding</summary>
        </member>
        <member name="F:System.Data.Services.Client.BindingGraph.Graph.vertices">
            <summary>Vertices of the graph, which also hold edges</summary>
        </member>
        <member name="F:System.Data.Services.Client.BindingGraph.Graph.root">
            <summary>The root vertex for the graph, DFS traversals start from this vertex</summary>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Graph.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Graph.AddVertex(System.Object)">
            <summary>Adds vertex to the graph</summary>
            <param name="item">Item corresponding to vertex</param>
            <returns>Newly created vertex</returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Graph.ClearEdgesForVertex(System.Data.Services.Client.BindingGraph.Vertex)">
            <summary>Removes all edges going out of and coming into the given vertex</summary>
            <param name="v">Vertex whose edges are to be cleared</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Graph.ExistsVertex(System.Object)">
            <summary>
            Checks if a vertex exists corresponding to given <paramref name="item"/>
            </summary>
            <param name="item">Item to lookup</param>
            <returns>true if vertex found, false otherwise</returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Graph.LookupVertex(System.Object)">
            <summary>Looksup the vertex corresponding to <paramref name="item"/></summary>
            <param name="item">Item to lookup</param>
            <returns>Vertex corresponding to item</returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Graph.AddEdge(System.Object,System.Object,System.String)">
            <summary>
            Adds edge between vertices corresponding to <paramref name="source"/> and <paramref name="target"/>
            objects which will be labeled with <paramref name="label"/>
            </summary>
            <param name="source">Outgoing end of the edge</param>
            <param name="target">Incoming end of the edge</param>
            <param name="label">Label for the vertex</param>
            <returns>Newly created edge</returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Graph.RemoveEdge(System.Object,System.Object,System.String)">
            <summary>
            Removes edge between vertices corresponding to <paramref name="source"/> and <paramref name="target"/>
            objects which was labeled with <paramref name="label"/>
            </summary>
            <param name="source">Outgoing end of the edge</param>
            <param name="target">Incoming end of the edge</param>
            <param name="label">Label for the vertex</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Graph.ExistsEdge(System.Object,System.Object,System.String)">
            <summary>
            Checks if an edge exists between <paramref name="source"/> and <paramref name="target"/> labeled
            with <paramref name="label"/>
            </summary>
            <param name="source">Outgoing end of the edge</param>
            <param name="target">Incoming end of the edge</param>
            <param name="label">Label for the vertex</param>
            <returns>true if an edge exists between source and target with given label, false otherwise</returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Graph.Select(System.Func{System.Object,System.Boolean})">
            <summary>
            Selects collection of objects tracked by the graph based on the given filter
            </summary>
            <param name="filter">Filter for the objects</param>
            <returns>Filtered list of objects tracked by the graph</returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Graph.Reset(System.Action{System.Object})">
            <summary>
            Removes everything from the graph after applying <paramref name="action"/>
            </summary>
            <param name="action">Action to apply before removal of each node</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Graph.RemoveUnreachableVertices(System.Action{System.Object})">
            <summary>Remove all vertices from graph that are unreachable from the root collection vertex</summary>
            <param name="detachAction">Action to perform for each removed vertex</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Graph.UnreachableVertices">
            <summary>Collects all vertices unreachable from the root collection vertex</summary>
            <returns>Sequence of vertices that are unreachable from the root collection vertex</returns>
            <remarks>
            Performs a depth first traversal of the graph starting from the root collection
            vertex and checks if <paramref name="target"/> was reached while doing the traversal.
            Alogrithm from Introduction to Algorithms 22.2 by Cormen et al.
            </remarks>
        </member>
        <member name="P:System.Data.Services.Client.BindingGraph.Graph.Root">
            <summary>Root vertex of the graph</summary>
        </member>
        <member name="T:System.Data.Services.Client.BindingGraph.Vertex">
            <summary>Vertex of the <see cref="T:System.Data.Services.Client.BindingGraph.Graph"/></summary>
        </member>
        <member name="F:System.Data.Services.Client.BindingGraph.Vertex.incomingEdges">
            <summary>Collection of incoming edges for the vertex</summary>
        </member>
        <member name="F:System.Data.Services.Client.BindingGraph.Vertex.outgoingEdges">
            <summary>Collection of outgoing edges for the vertex</summary>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Vertex.#ctor(System.Object)">
            <summary>Constructor</summary>
            <param name="item">Item corresponding to vertex</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Vertex.GetEntityCollectionInfo(System.Object@,System.String@,System.String@,System.String@)">
            <summary>Get the binding information for a collection vertex</summary>
            <param name="source">The source object that reference the target object through a navigation property corresponding to current collection vertex.</param>
            <param name="sourceProperty">The navigation property in the source object that reference the target object.</param>
            <param name="sourceEntitySet">The entity set of the source object.</param>
            <param name="targetEntitySet">The entity set of the target object.</param>
        </member>
        <member name="P:System.Data.Services.Client.BindingGraph.Vertex.Item">
            <summary>Item corresponding to the vertex</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingGraph.Vertex.EntitySet">
            <summary>Entity set of the item held by the vertex</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingGraph.Vertex.IsCollection">
            <summary>Is item a collection object</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingGraph.Vertex.Parent">
            <summary>Parent vertex, only exists for non-top level collection vertices</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingGraph.Vertex.ParentProperty">
            <summary>Property of the <see cref="P:System.Data.Services.Client.BindingGraph.Vertex.Parent"/> object that associates this vertex with it's parent</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingGraph.Vertex.IsRootCollection">
            <summary>Is item a root collection object</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingGraph.Vertex.Color">
            <summary>Color of the vertex</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingGraph.Vertex.IncomingEdges">
            <summary>Edges coming into this vertex</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingGraph.Vertex.OutgoingEdges">
            <summary>Edges going out of this vertex</summary>
        </member>
        <member name="T:System.Data.Services.Client.BindingGraph.Edge">
            <summary>
            Edge between two vertices of graph, directed and labeled
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.BindingGraph.Edge.Equals(System.Data.Services.Client.BindingGraph.Edge)">
            <summary>IEquatable override</summary>
            <param name="other">Comparand</param>
            <returns>true if equal, false otherwise</returns>
        </member>
        <member name="P:System.Data.Services.Client.BindingGraph.Edge.Source">
            <summary>Source vertex</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingGraph.Edge.Target">
            <summary>Target vertex</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingGraph.Edge.Label">
            <summary>Label of the edge</summary>
        </member>
        <member name="T:System.Data.Services.Client.BindingObserver">
            <summary>The BindingObserver class</summary>
        </member>
        <member name="F:System.Data.Services.Client.BindingObserver.bindingGraph">
            <summary>
            The BindingGraph maps objects tracked by the DataServiceContext to vertices in a 
            graph used to manage the information needed for data binding. The objects tracked 
            by the BindingGraph are entities, complex types and ObservableEntityCollections.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.BindingObserver.#ctor(System.Data.Services.Client.DataServiceContext,System.Func{System.Data.Services.Client.EntityChangedParams,System.Boolean},System.Func{System.Data.Services.Client.EntityCollectionChangedParams,System.Boolean})">
            <summary>Constructor</summary>
            <param name="context">The DataServiceContext associated with the BindingObserver.</param>
            <param name="entityChanged">EntityChanged delegate.</param>
            <param name="collectionChanged">EntityCollectionChanged delegate.</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingObserver.StartTracking``1(System.Data.Services.Client.ObservableEntityCollection{``0},System.String)">
            <summary>Start tracking the specified ObservableEntityCollection.</summary>
            <typeparam name="T">An entity type.</typeparam>
            <param name="collection">An ObservableEntityCollection.</param>
            <param name="collectionEntitySet">The entity set of the elements in <paramref name="collection"/>.</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingObserver.StopTracking">
            <summary>Stop tracking the root ObservableEntityCollection associated with the observer.</summary>
        </member>
        <member name="M:System.Data.Services.Client.BindingObserver.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Handle changes to tracked entity.</summary>
            <param name="source">The entity that raised the event.</param>
            <param name="eventArgs">Information about the event such as changed property name.</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingObserver.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Handle changes to tracked ObservableEntityCollection.</summary>
            <param name="collection">The ObservableEntityCollection that raised the event.</param>
            <param name="eventArgs">Information about the event such as added/removed entities, operation.</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingObserver.HandleAddEntity(System.Object,System.String,System.String,System.Collections.ICollection,System.Object,System.String)">
            <summary>Handle Adds to a tracked ObservableEntityCollection. Perform operations on context to reflect the changes.</summary>
            <param name="source">The source object that reference the target object through a navigation property.</param>
            <param name="sourceProperty">The navigation property in the source object that reference the target object.</param>
            <param name="sourceEntitySet">The entity set of the source object.</param>
            <param name="collection">The collection containing the target object.</param>
            <param name="target">The target entity to attach.</param>
            <param name="targetEntitySet">The entity set name of the target object.</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingObserver.HandleDeleteEntity(System.Object,System.String,System.String,System.Collections.ICollection,System.Object,System.String)">
            <summary>Handle Deletes from a tracked ObservableEntityCollection. Perform operations on context to reflect the changes.</summary>
            <param name="source">The source object that reference the target object through a navigation property.</param>
            <param name="sourceProperty">The navigation property in the source object that reference the target object.</param>
            <param name="sourceEntitySet">The entity set of the source object.</param>
            <param name="collection">The collection containing the target object.</param>
            <param name="target">The target entity.</param>
            <param name="targetEntitySet">The entity set name of the target object.</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingObserver.HandleUpdateEntityReference(System.Object,System.String,System.String,System.Object,System.String)">
            <summary>Handle changes to navigation properties of a tracked entity. Perform operations on context to reflect the changes.</summary>
            <param name="source">The source object that reference the target object through a navigation property.</param>
            <param name="sourceProperty">The navigation property in the source object that reference the target object.</param>
            <param name="sourceEntitySet">The entity set of the source object.</param>
            <param name="target">The target entity.</param>
            <param name="targetEntitySet">The entity set name of the target object.</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingObserver.IsContextTrackingEntity(System.Object)">
            <summary>Determine if the DataServiceContext is tracking the specified entity.</summary>
            <param name="entity">An entity object.</param>
            <returns>true if the entity is tracked; otherwise false.</returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingObserver.HandleUpdateEntity(System.Object,System.String,System.Object)">
            <summary>
            Handle changes to an entity object tracked by the BindingObserver
            </summary>
            <param name="entity">The entity object that has changed.</param>
            <param name="propertyName">The property of the target entity object that has changed.</param>
            <param name="propertyValue">The value of the changed property of the target object.</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingObserver.OnAddToCollection(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Object,System.String,System.String,System.Object)">
            <summary>Processes the INotifyCollectionChanged.Add event.</summary>
            <param name="eventArgs">Event information such as added items.</param>
            <param name="source">Parent entity to which collection belongs.</param>
            <param name="sourceProperty">Parent entity property referring to collection.</param>
            <param name="targetEntitySet">Entity set of the collection.</param>
            <param name="collection">Collection that changed.</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingObserver.OnDeleteFromCollection(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Object,System.String,System.Object)">
            <summary>Processes the INotifyCollectionChanged.Remove event.</summary>
            <param name="eventArgs">Event information such as deleted items.</param>
            <param name="source">Parent entity to which collection belongs.</param>
            <param name="sourceProperty">Parent entity property referring to collection.</param>
            <param name="collection">Collection that changed.</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingObserver.OnChangesSaved(System.Object,System.Data.Services.Client.SaveChangesEventArgs)">
            <summary>Handle the DataServiceContext.SaveChanges operation.</summary>
            <param name="sender">DataServiceContext for the observer.</param>
            <param name="eventArgs">Information about SaveChanges operation results.</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingObserver.CollectUnTrackingInfo(System.Object,System.Object,System.String,System.Collections.Generic.IList{System.Data.Services.Client.BindingObserver.UnTrackingInfo})">
            <summary>Collects a list of entities that observer is supposed to stop tracking</summary>
            <param name="currentEntity">Entity being delete along with it's children</param>
            <param name="parentEntity">Parent of the <paramref name="currentEntity"/></param>
            <param name="parentProperty">Property by which <paramref name="parentEntity"/> refers to <paramref name="currentEntity"/></param>
            <param name="entitiesToUnTrack">List in which entities to be untracked are collected</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingObserver.IsContextTrackingLink(System.Object,System.String,System.Object)">
            <summary>Determine if the DataServiceContext is tracking link between <paramref name="source"/> and <paramref name="target"/>.</summary>
            <param name="source">The source object side of the link.</param>
            <param name="sourceProperty">A property in the source side of the link that references the target.</param>
            <param name="target">The target object side of the link.</param>
            <returns>True if the link is tracked; otherwise false.</returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingObserver.IsDetachedOrDeletedFromContext(System.Object)">
            <summary>Checks whether the given entity is in detached or deleted state.</summary>
            <param name="entity">Entity being checked.</param>
            <returns>true if the entity is detached or deleted, otherwise returns false.</returns>
        </member>
        <member name="P:System.Data.Services.Client.BindingObserver.Context">
            <summary>The DataServiceContext associated with the BindingObserver.</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingObserver.AttachBehavior">
            <summary>The behavior of add operations should be Attach or Add on the context.</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingObserver.EntityChanged">
            <summary>
            Callback invoked when a property of an entity object tracked by the BindingObserver has changed.
            </summary>
            <remarks>
            Entity objects tracked by the BindingObserver implement INotifyPropertyChanged. Events of this type
            flow throw the EntityChangedParams. If this callback is not implemented by user code, or the user code
            implementation returns false, the BindingObserver executes a default implementation for the callback.
            </remarks>
        </member>
        <member name="P:System.Data.Services.Client.BindingObserver.CollectionChanged">
            <summary>
            Callback invoked when an ObservableEntityCollection tracked by the BindingObserver has changed.
            </summary>
            <remarks>
            ObservableEntityCollection objects tracked by the BindingObserver implement INotifyCollectionChanged.  
            Events of this type flow throw the EntityCollectionChanged callback. If this callback is not 
            implemented by user code, or the user code implementation returns false, the BindingObserver executes 
            a default implementation for the callback.
            </remarks>
        </member>
        <member name="T:System.Data.Services.Client.BindingObserver.UnTrackingInfo">
            <summary>Information regarding each entity to be untracked</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingObserver.UnTrackingInfo.Entity">
            <summary>Entity to untrack</summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingObserver.UnTrackingInfo.Parent">
            <summary>Parent object of <see cref="P:System.Data.Services.Client.BindingObserver.UnTrackingInfo.Entity"/></summary>
        </member>
        <member name="P:System.Data.Services.Client.BindingObserver.UnTrackingInfo.ParentProperty">
            <summary>Parent object property referring to <see cref="P:System.Data.Services.Client.BindingObserver.UnTrackingInfo.Entity"/></summary>
        </member>
        <member name="T:System.Data.Services.Client.BindingUtils">
            <summary>Utilities for binding related operations</summary>
        </member>
        <member name="M:System.Data.Services.Client.BindingUtils.IsObservableEntityCollection(System.Type)">
            <summary>
            Determine if the specified type is an ObservableEntityCollection.
            </summary>
            <remarks>
            If there a generic class in the inheritance hierarchy of the type, that has a single
            entity type paramenter T, and is assignable to ObservableEntityCollection(Of T), then
            the type is an ObservableEntityCollection.
            </remarks>
            <param name="collectionType">An object type specifier.</param>
            <returns>True if the type is an ObservableEntityCollection; otherwise false.</returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingUtils.IsEntityType(System.Type)">
            <summary>
            Determine if the specified type is an entity type.
            </summary>
            <param name="type">An object type specifier.</param>
            <returns>True if the type is an entity type; otherwise false.</returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingUtils.ValidateEntitySetName(System.String,System.Object)">
            <summary>
            Throw if the entity set name is null or empty
            </summary>
            <param name="entitySetName">entity set name.</param>
            <param name="entity">entity instance for which the entity set name is generated.</param>
        </member>
        <member name="M:System.Data.Services.Client.BindingUtils.GetCollectionEntityType(System.Type)">
            <summary>
            Given a collection type, gets it's entity type
            </summary>
            <param name="collectionType">Input collection type</param>
            <returns>Generic type argument for the collection</returns>
        </member>
        <member name="M:System.Data.Services.Client.BindingUtils.VerifyObserverNotPresent``1(System.Object,System.String,System.Type)">
            <summary>Verifies the absence of observer for an ObservableEntityCollection</summary>
            <typeparam name="T">Type of ObservableEntityCollection</typeparam>
            <param name="oec">Non-typed collection object</param>
            <param name="sourceProperty">Collection property of the source object which is being assigned to</param>
            <param name="sourceType">Type of the source object</param>
        </member>
        <member name="T:System.Data.Services.Common.EntitySetAttribute">
            <summary>
            This attribute allows users to specify an entity set name with a client type.
            </summary>
            <remarks>
            This attribute is generated only when there is one entity set associated with the type.
            When there are more than one entity set associated with the type, then the entity set
            name can be passed in through the EntitySetNameResolver event.
            </remarks>
        </member>
        <member name="F:System.Data.Services.Common.EntitySetAttribute.entitySet">
            <summary>
            The entity set name.
            </summary>
        </member>
        <member name="M:System.Data.Services.Common.EntitySetAttribute.#ctor(System.String)">
            <summary>
            Construct a EntitySetAttribute
            </summary>
            <param name="entitySet">The entity set name.</param>
        </member>
        <member name="P:System.Data.Services.Common.EntitySetAttribute.EntitySet">
            <summary>
            The entity set name.
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.SaveChangesEventArgs">
            <summary>
            Encapsulates the arguments for the DataServiceContext ChangesSaved event
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.SaveChangesEventArgs.response">
            <summary>
            DataServiceContext SaveChanges response
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.SaveChangesEventArgs.#ctor(System.Data.Services.Client.DataServiceResponse)">
            <summary>
            Construct a DataServiceSaveChangesEventArgs object.
            </summary>
            <param name="response">DataServiceContext SaveChanges response</param>
        </member>
        <member name="T:System.Data.Services.Client.EntityChangedParams">
            <summary>Encapsulates the arguments of EntityChanged delegate</summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityChangedParams.context">
            <summary>Context associated with the BindingObserver.</summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityChangedParams.entity">
            <summary>The entity object that has changed.</summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityChangedParams.propertyName">
            <summary>The property of the entity that has changed.</summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityChangedParams.propertyValue">
            <summary>The current value of the target property.</summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityChangedParams.sourceEntitySet">
            <summary>Entity set to which the entity object belongs</summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityChangedParams.targetEntitySet">
            <summary>Entity set to which the target propertyValue entity belongs</summary>
        </member>
        <member name="M:System.Data.Services.Client.EntityChangedParams.#ctor(System.Data.Services.Client.DataServiceContext,System.Object,System.String,System.Object,System.String,System.String)">
            <summary>
            Construct an EntityChangedParams object.
            </summary>
            <param name="context">Context to which the entity and propertyValue belong.</param>
            <param name="entity">The entity object that has changed.</param>
            <param name="propertyName">The property of the target entity object that has changed.</param>
            <param name="propertyValue">The current value of the entity property.</param>
            <param name="sourceEntitySet">Entity set to which the entity object belongs</param>
            <param name="targetEntitySet">Entity set to which the target propertyValue entity belongs</param>
        </member>
        <member name="P:System.Data.Services.Client.EntityChangedParams.Context">
            <summary>Context associated with the BindingObserver.</summary>
        </member>
        <member name="P:System.Data.Services.Client.EntityChangedParams.Entity">
            <summary>The entity object that has changed.</summary>
        </member>
        <member name="P:System.Data.Services.Client.EntityChangedParams.PropertyName">
            <summary>The property of the target entity object that has changed.</summary>
        </member>
        <member name="P:System.Data.Services.Client.EntityChangedParams.PropertyValue">
            <summary>The current value of the entity property.</summary>
        </member>
        <member name="P:System.Data.Services.Client.EntityChangedParams.SourceEntitySet">
            <summary>Entity set to which the entity object belongs</summary>
        </member>
        <member name="P:System.Data.Services.Client.EntityChangedParams.TargetEntitySet">
            <summary>Entity set to which the target propertyValue entity belongs</summary>
        </member>
        <member name="T:System.Data.Services.Client.EntityCollectionChangedParams">
            <summary>Encapsulates the arguments of an EntityCollectionChanged delegate</summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityCollectionChangedParams.context">
            <summary>Context associated with the BindingObserver.</summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityCollectionChangedParams.sourceEntity">
            <summary>
            The source object that references the target object through a collection navigation property.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityCollectionChangedParams.propertyName">
            <summary>The property of the source object that references the collection that has changed.</summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityCollectionChangedParams.sourceEntitySet">
            <summary>The entity set of the source object.</summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityCollectionChangedParams.collection">
            <summary>The collection that has changed.</summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityCollectionChangedParams.targetEntity">
            <summary>The target entity object involved in the change.</summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityCollectionChangedParams.targetEntitySet">
            <summary>The entity set name of the target object.</summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityCollectionChangedParams.action">
            <summary>
            The action that indicates how the collection was changed. The value will be Add or Remove.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.EntityCollectionChangedParams.#ctor(System.Data.Services.Client.DataServiceContext,System.Object,System.String,System.String,System.Collections.ICollection,System.Object,System.String,System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Construct an EntityCollectionChangedParams object.
            </summary>
            <param name="context">The DataServiceContext associated with the BindingObserver.</param>
            <param name="sourceEntity">The source object that references the target object through a collection navigation property.</param>
            <param name="propertyName">The property of the source object that references the collection that has changed.</param>
            <param name="sourceEntitySet">The entity set of the source object.</param>
            <param name="collection">The collection that has changed.</param>
            <param name="targetEntity">The target entity object involved in the change.</param>
            <param name="targetEntitySet">The entity set name of the target object.</param>
            <param name="action">The action that indicates how the collection was changed. The value will be Add or Remove.</param>
        </member>
        <member name="P:System.Data.Services.Client.EntityCollectionChangedParams.Context">
            <summary>Context to which source and target entities belong.</summary>
        </member>
        <member name="P:System.Data.Services.Client.EntityCollectionChangedParams.SourceEntity">
            <summary>
            The source object that references the target object through a collection navigation property.
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.EntityCollectionChangedParams.PropertyName">
            <summary>
            The property of the source object that references the collection that has changed.
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.EntityCollectionChangedParams.SourceEntitySet">
            <summary>The entity set of the source object.</summary>
        </member>
        <member name="P:System.Data.Services.Client.EntityCollectionChangedParams.TargetEntity">
            <summary>The target entity object involved in the change.</summary>
        </member>
        <member name="P:System.Data.Services.Client.EntityCollectionChangedParams.TargetEntitySet">
            <summary>The entity set name of the target object.</summary>
        </member>
        <member name="P:System.Data.Services.Client.EntityCollectionChangedParams.Collection">
            <summary>The collection that has changed.</summary>
        </member>
        <member name="P:System.Data.Services.Client.EntityCollectionChangedParams.Action">
            <summary>
            The action that indicates how the collection was changed. The value will be Add or Remove.
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.ObservableEntityCollection`1">
            <summary>
            An ObservableEntityCollection is a collection of entites.
            The collection implement INotifyCollectionChanged and INotifyPropertyChanged.
            </summary>
            <typeparam name="T">An entity class</typeparam>
        </member>
        <member name="F:System.Data.Services.Client.ObservableEntityCollection`1.context">
            <summary>The DataServiceContext associated with the ObservableEntityCollection</summary>
        </member>
        <member name="F:System.Data.Services.Client.ObservableEntityCollection`1.observer">
            <summary>The BindingObserver associated with the ObservableEntityCollection</summary>
        </member>
        <member name="F:System.Data.Services.Client.ObservableEntityCollection`1.rootCollection">
            <summary>Is this a root collection</summary>
        </member>
        <member name="M:System.Data.Services.Client.ObservableEntityCollection`1.#ctor">
            <summary>Creates a new ObservableEntityCollection.</summary>
            <remarks>
            This constructor is used by the code generator in order to intialize the navigation properties 
            of an existing entity and is not supposed to be used directly in order to initialize a new 
            ObservableEntityCollection. If used to initialize a new collection, the entities will not be 
            tracked.
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.ObservableEntityCollection`1.#ctor(System.Data.Services.Client.DataServiceContext)">
            <summary>Creates a new ObservableEntityCollection.</summary>
            <param name="context">DataServiceContext associated with the new collection.</param>
        </member>
        <member name="M:System.Data.Services.Client.ObservableEntityCollection`1.#ctor(System.Data.Services.Client.DataServiceContext,System.String)">
            <summary>Creates a new ObservableEntityCollection.</summary>
            <param name="context">DataServiceContext associated with the new collection.</param>
            <param name="entitySet">The entity set of the elements in the new collection.</param>
        </member>
        <member name="M:System.Data.Services.Client.ObservableEntityCollection`1.#ctor(System.Data.Services.Client.DataServiceContext,System.String,System.Func{System.Data.Services.Client.EntityChangedParams,System.Boolean},System.Func{System.Data.Services.Client.EntityCollectionChangedParams,System.Boolean})">
            <summary>Creates a new ObservableEntityCollection.</summary>
            <param name="context">DataServiceContext associated with the new collection.</param>
            <param name="entitySet">The entity set of the elements in the new collection.</param>
            <param name="entityChanged">Delegate that would get called when an entity changes.</param>
            <param name="collectionChanged">Delegate that would get called when an entity collection changes.</param>
        </member>
        <member name="M:System.Data.Services.Client.ObservableEntityCollection`1.#ctor(System.Data.Services.Client.DataServiceContext,System.Collections.Generic.IEnumerable{`0})">
            <summary>Creates a new ObservableEntityCollection.</summary>
            <param name="context">DataServiceContext associated with the new collection.</param>
            <param name="items">Collection to initialize the new ObservableEntityCollection with.</param>
        </member>
        <member name="M:System.Data.Services.Client.ObservableEntityCollection`1.#ctor(System.Data.Services.Client.DataServiceContext,System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>Creates a new ObservableEntityCollection.</summary>
            <param name="context">DataServiceContext associated with the new collection.</param>
            <param name="entitySet">The entity set of the elements in the new collection.</param>
            <param name="items">Collection to initialize the new ObservableEntityCollection with.</param>
        </member>
        <member name="M:System.Data.Services.Client.ObservableEntityCollection`1.#ctor(System.Data.Services.Client.DataServiceContext,System.String,System.Collections.Generic.IEnumerable{`0},System.Func{System.Data.Services.Client.EntityChangedParams,System.Boolean},System.Func{System.Data.Services.Client.EntityCollectionChangedParams,System.Boolean})">
            <summary>Creates a new ObservableEntityCollection.</summary>
            <param name="context">DataServiceContext associated with the new collection.</param>
            <param name="entitySet">The entity set of the elements in the collection.</param>
            <param name="items">Collection to initialize the new ObservableEntityCollection with.</param>
            <param name="entityChanged">Delegate that would get called when an entity changes.</param>
            <param name="collectionChanged">Delegate that would get called when an entity collection changes.</param>
        </member>
        <member name="M:System.Data.Services.Client.ObservableEntityCollection`1.Load(System.Collections.Generic.IEnumerable{`0})">
            <summary>Loads the collection from another collection.</summary>
            <param name="items">Collection whose elements will be loaded into the ObservableEntityCollection.</param>
            <remarks>
            The behavior of Load would be to attach all those entities that are not already tracked by the context
            associated with the collection. The operation will go deep into the input entities so that all related
            entities are attached to the context if not already present. All entities in <paramref name="items"/>
            will be tracked after Load is done.
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.ObservableEntityCollection`1.Load(`0)">
            <summary>Loads a single entity into the collection.</summary>
            <param name="item">Entity to be added.</param>
            <remarks>
            The behavior of Load would be to attach the entity if it is not already tracked by the context
            associated with the collection. The operation will go deep into the input entity so that all related
            entities are attached to the context if not already present. The <paramref name="item"/> will be 
            tracked after Load is done.
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.ObservableEntityCollection`1.Detach">
            <summary>Stop tracking the collection. The operation is only allowed for root collections.</summary>
            <remarks>
            All the entitities in the root collection and all it's related objects will be untracked at the
            end of this operation.
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.ObservableEntityCollection`1.ValidateIteratorParameter(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Verifies that input iterator parameter is not null and in case
            of Silverlight, it is not of DataServiceQuery type.
            </summary>
            <param name="items">Input iterator parameter.</param>
        </member>
        <member name="M:System.Data.Services.Client.ObservableEntityCollection`1.StartTracking(System.Collections.Generic.IEnumerable{`0},System.String,System.Func{System.Data.Services.Client.EntityChangedParams,System.Boolean},System.Func{System.Data.Services.Client.EntityCollectionChangedParams,System.Boolean})">
            <summary>Initialize and start tracking an ObservableEntityCollection</summary>
            <param name="items">Collection to initialize with</param>
            <param name="entitySet">The entity set of the elements in the collection.</param>
            <param name="entityChanged">delegate that needs to be called when an entity changes.</param>
            <param name="collectionChanged">delegate that needs to be called when an entity collection is changed.</param>
        </member>
        <member name="P:System.Data.Services.Client.ObservableEntityCollection`1.Observer">
            <summary>Observer for the collection.</summary>
            <remarks>The setter would get called only for child collections in the graph.</remarks>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceQueryException">
            <summary>
            The exception that is thrown when an error occurs while processing a batch request or
            during SaveChanges.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceQueryException.response">
            <summary>Actual response object.</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor">
            <summary>
            Creates a new instance of DataServiceQueryException.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor(System.String)">
            <summary>
            Creates a new instance of DataServiceQueryException.
            </summary>
            <param name="message">error message for this exception.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of DataServiceQueryException.
            </summary>
            <param name="message">error message for this exception.</param>
            <param name="innerException">Exception that caused this exception to be thrown.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor(System.String,System.Exception,System.Data.Services.Client.QueryOperationResponse)">
            <summary>
            Creates a new instance of DataServiceQueryException.
            </summary>
            <param name="message">error message for this exception.</param>
            <param name="innerException">Exception that caused this exception to be thrown.</param>
            <param name="response">response object for this exception.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the DataServiceQueryException class from the 
            specified SerializationInfo and StreamingContext instances.
            </summary>
            <param name="info">
            A SerializationInfo containing the information required to serialize 
            the new DataServiceQueryException.</param>
            <param name="context">
            A StreamingContext containing the source of the serialized stream 
            associated with the new DataServiceQueryException.</param>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceQueryException.Response">
            <summary>Error code to be used in payloads.</summary>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceRequestException">
            <summary>
            The exception that is thrown when executing a single query request.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceRequestException.response">
            <summary>Actual response object.</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor">
            <summary>
            Creates a new instance of DataServiceRequestException.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor(System.String)">
            <summary>
            Creates a new instance of DataServiceRequestException.
            </summary>
            <param name="message">error message for this exception.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of DataServiceRequestException.
            </summary>
            <param name="message">error message for this exception.</param>
            <param name="innerException">Exception that caused this exception to be thrown.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor(System.String,System.Exception,System.Data.Services.Client.DataServiceResponse)">
            <summary>
            Creates a new instance of DataServiceRequestException.
            </summary>
            <param name="message">error message for this exception.</param>
            <param name="innerException">Exception that caused this exception to be thrown.</param>
            <param name="response">response object for this exception.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the DataServiceQueryException class from the 
            specified SerializationInfo and StreamingContext instances.
            </summary>
            <param name="info">
            A SerializationInfo containing the information required to serialize 
            the new DataServiceException.</param>
            <param name="context">
            A StreamingContext containing the source of the serialized stream 
            associated with the new DataServiceException.</param>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceRequestException.Response">
            <summary>Error code to be used in payloads.</summary>
        </member>
        <member name="T:System.Data.Services.Client.Descriptor">
            <summary>
            represents the response object - either entity or link
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.Descriptor.state">
            <summary>State of the modified entity or link.</summary>
        </member>
        <member name="M:System.Data.Services.Client.Descriptor.#ctor(System.Data.Services.Client.EntityStates)">
            <summary>
            constructor
            </summary>
            <param name="state">entity state</param>
        </member>
        <member name="P:System.Data.Services.Client.Descriptor.State">
            <summary>
            returns the state of the entity or link object in response.
            </summary>
        </member>
        <member name="T:System.Data.Services.Common.SyndicationItemProperty">
            <summary>
            List of syndication properties settable through <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/>
            </summary>
            <remarks>
            Potentially the following atom specific elements could also be considered:
            * Author*
            * Category*
            * Content?
            * Contributor*
            * Id
            * Link*
            * Source?
            </remarks>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.CustomProperty">
            <summary>
            User specified a non-syndication property
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.AuthorEmail">
            <summary>
            author/email
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.AuthorName">
            <summary>
            author/name
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.AuthorUri">
            <summary>
            author/uri
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.Published">
            <summary>
            published
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.Rights">
            <summary>
            rights
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.Summary">
            <summary>
            summary
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationItemProperty.Title">
            <summary>
            title
            </summary>
        </member>
        <member name="T:System.Data.Services.Common.SyndicationTextContentKind">
            <summary>
            Type of content for a <see cref="T:System.Data.Services.Common.SyndicationItemProperty"/> if the property
            is of text type
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationTextContentKind.Plaintext">
            <summary>
            Plaintext
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationTextContentKind.Html">
            <summary>
            HTML
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.SyndicationTextContentKind.Xhtml">
            <summary>
            XHTML
            </summary>
        </member>
        <member name="T:System.Data.Services.Common.EntityPropertyMappingAttribute">
            <summary>
            Attribute used for mapping a given property or sub-property of a ResourceType to
            an xml element/attribute with arbitrary nesting
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EntityPropertyMappingAttribute.AtomNamespacePrefix">
            <summary> Schema Namespace prefix for atom.</summary>
        </member>
        <member name="F:System.Data.Services.Common.EntityPropertyMappingAttribute.sourcePath">
            <summary>
            Source property path
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EntityPropertyMappingAttribute.targetPath">
            <summary>
            Target Xml element/attribute
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EntityPropertyMappingAttribute.targetSyndicationItem">
            <summary>
            If mapping to syndication element, the name of syndication item
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EntityPropertyMappingAttribute.targetTextContentKind">
            <summary>
            If mapping to syndication content, the content type of syndication item
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EntityPropertyMappingAttribute.targetNamespacePrefix">
            <summary>
            If mapping to non-syndication element/attribute, the namespace prefix for the 
            target element/attribute
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EntityPropertyMappingAttribute.targetNamespaceUri">
            <summary>
            If mapping to non-syndication element/attribute, the namespace for the 
            target element/attribute
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.EntityPropertyMappingAttribute.keepInContent">
            <summary>
            The content can optionally be kept in the original location along with the 
            newly mapping location by setting this option to true, false by default
            </summary>
        </member>
        <member name="M:System.Data.Services.Common.EntityPropertyMappingAttribute.#ctor(System.String,System.Data.Services.Common.SyndicationItemProperty,System.Data.Services.Common.SyndicationTextContentKind,System.Boolean)">
            <summary>
            Used for mapping a resource property to syndication content
            </summary>
            <param name="sourcePath">Source property path</param>
            <param name="targetSyndicationItem">Syndication item to which the <see cref="F:System.Data.Services.Common.EntityPropertyMappingAttribute.sourcePath"/> is mapped</param>
            <param name="targetTextContentKind">Syndication content kind for <see cref="F:System.Data.Services.Common.EntityPropertyMappingAttribute.targetSyndicationItem"/></param>
            <param name="keepInContent">If true the property value is kept in the content section as before, 
            when false the property value is only placed at the mapped location</param>
        </member>
        <member name="M:System.Data.Services.Common.EntityPropertyMappingAttribute.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Used for mapping a resource property to arbitrary xml element/attribute
            </summary>
            <param name="sourcePath">Source property path</param>
            <param name="targetPath">Target element/attribute path</param>
            <param name="targetNamespacePrefix">Namespace prefix for the <see cref="F:System.Data.Services.Common.EntityPropertyMappingAttribute.targetNamespaceUri"/> to which <see cref="F:System.Data.Services.Common.EntityPropertyMappingAttribute.targetPath"/> belongs</param>
            <param name="targetNamespaceUri">Uri of the namespace to which <see cref="F:System.Data.Services.Common.EntityPropertyMappingAttribute.targetPath"/> belongs</param>
            <param name="keepInContent">If true the property value is kept in the content section as before, 
            when false the property value is only placed at the mapped location</param>
        </member>
        <member name="M:System.Data.Services.Common.EntityPropertyMappingAttribute.SyndicationItemPropertyToPath(System.Data.Services.Common.SyndicationItemProperty)">
            <summary>
            Maps the enumeration of allowed <see cref="T:System.Data.Services.Common.SyndicationItemProperty"/> values to their string representations
            </summary>
            <param name="targetSyndicationItem">Value of the <see cref="T:System.Data.Services.Common.SyndicationItemProperty"/> given in 
            the <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/> contstructor</param>
            <returns>String representing the xml element path in the syndication property</returns>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.SourcePath">
            <summary>
            Source property path
            </summary>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetPath">
            <summary>
            Target Xml element/attribute
            </summary>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetSyndicationItem">
            <summary>
            If mapping to syndication element, the name of syndication item
            </summary>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetNamespacePrefix">
            <summary>
            If mapping to non-syndication element/attribute, the namespace prefix for the 
            target element/attribute
            </summary>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetNamespaceUri">
            <summary>
            If mapping to non-syndication element/attribute, the namespace for the 
            target element/attribute
            </summary>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.TargetTextContentKind">
            <summary>
            If mapping to syndication content, the content type of syndication item
            </summary>
        </member>
        <member name="P:System.Data.Services.Common.EntityPropertyMappingAttribute.KeepInContent">
            <summary>
            The content can optionally be kept in the original location along with the 
            newly mapping location by setting this option to true, false by default
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.EpmContentDeserializer">
            <summary>
            Content deserialized for EPM related stuff on the client
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.EpmContentDeserializer.materializer">
            <summary>
            Materializer
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.EpmContentDeserializer.reader">
            <summary>
            Xml reader which reads content
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.EpmContentDeserializer.#ctor(System.Data.Services.Client.MaterializeAtom,System.Xml.XmlReader)">
            <summary>
            Constructor
            </summary>
            <param name="materializer">Materializer being used</param>
            <param name="reader">xml reader from which to read data</param>
        </member>
        <member name="M:System.Data.Services.Client.EpmContentDeserializer.DeSerialize(System.Data.Services.Client.ClientType,System.Object,System.Data.Services.Client.ArraySet{System.String}@,System.Data.Services.Client.EpmReaderState)">
            <summary>
            Reads teh content from the member xml reader and populates <paramref name="currentValue"/> properties using it
            </summary>
            <param name="currentType">Type of <paramref name="currentValue"/></param>
            <param name="currentValue">Object whose properties are being populated</param>
            <param name="haveSetKeyProperty">Keeps record of the key properties that have been set</param>
            <param name="readerState">State of the content reader</param>
        </member>
        <member name="T:System.Data.Services.Client.EpmReaderState">
            <summary>
            Represents the state of Epm content deserializer related to which fields of an object have already been read
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.EpmReaderState.prefix">
            <summary>Current prefix for paths in <see cref="F:System.Data.Services.Client.EpmReaderState.readerEntries"/></summary>
        </member>
        <member name="F:System.Data.Services.Client.EpmReaderState.readerEntries">
            <summary>Collection of entries that have been read</summary>
        </member>
        <member name="M:System.Data.Services.Client.EpmReaderState.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.EpmReaderState.AppendToPrefix(System.String)">
            <summary>Updates the prefix with the given <paramref name="propertyName"/> appended</summary>
            <param name="propertyName">Name of the property to append to prefix</param>
        </member>
        <member name="M:System.Data.Services.Client.EpmReaderState.Match(System.Data.Services.Common.EpmTargetPathSegment)">
            <summary>Considers a match if an existing entry already exists for a read entry corresponding to the given segment</summary>
            <param name="targetSegment">Segment being read</param>
            <returns>true if match found, false otherwise</returns>
        </member>
        <member name="M:System.Data.Services.Client.EpmReaderState.Add(System.String,System.Object)">
            <summary>Adds a property to the collection of read properties</summary>
            <param name="propertyName">Name of the property</param>
            <param name="propertyValue">Value of the property</param>
            <returns>true of an existing entry is present before addition to the collection of read entries, false otherwise</returns>
        </member>
        <member name="M:System.Data.Services.Client.EpmReaderState.Add(System.Data.Services.Common.EpmTargetPathSegment,System.InvalidOperationException)">
            <summary>Adds a propety to the collection of read properties</summary>
            <param name="targetSegment">Segment being read</param>
            <param name="throwOnFailure">The exception to throw when content section will read a particular property and it is non-null</param>
        </member>
        <member name="M:System.Data.Services.Client.EpmReaderState.AddNullComplexType(System.String,System.Data.Services.Client.ClientType)">
            <summary>Adds a property to the collection of read properties</summary>
            <param name="propertyName">Name of the property</param>
            <param name="complexType">ComplexType for which all properties need to be added</param>
            <returns>true of an existing entry is present before addition to the collection of read entries, false otherwise</returns>
        </member>
        <member name="M:System.Data.Services.Client.EpmReaderState.AssureNoPendingReads">
            <summary>Makes sure that there is no entry in the reader whose value read is pending</summary>
        </member>
        <member name="P:System.Data.Services.Client.EpmReaderState.Prefix">
            <summary>Current prefix for paths in <see cref="F:System.Data.Services.Client.EpmReaderState.readerEntries"/></summary>
        </member>
        <member name="P:System.Data.Services.Client.EpmReaderState.ReaderEntries">
            <summary>Collection of entries that have been read</summary>
        </member>
        <member name="T:System.Data.Services.Client.EpmReaderState.EpmReaderEntry">
            <summary>Entry in the collection of read properties</summary>
        </member>
        <member name="P:System.Data.Services.Client.EpmReaderState.EpmReaderEntry.Path">
            <summary>Path of the read property</summary>
        </member>
        <member name="P:System.Data.Services.Client.EpmReaderState.EpmReaderEntry.ExceptionToThrow">
            <summary>Exception to throw when errors are encountered while reading content section</summary>
        </member>
        <member name="T:System.Data.Services.Client.EpmSyndicationContentSerializer">
            <summary>
            Base visitor class for performing serialization of syndication specific content in the feed entry whose mapping
            is provided through EntityPropertyMappingAttributes
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.EpmSyndicationContentSerializer.authorInfoPresent">
            <summary>
            Is author mapping provided in the target tree
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.EpmSyndicationContentSerializer.authorNamePresent">
            <summary>
            Is author name provided in the target tree
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.EpmSyndicationContentSerializer.#ctor(System.Data.Services.Common.EpmTargetTree,System.Object,System.Xml.XmlWriter)">
            <summary>
            Constructor initializes the base class be identifying itself as a syndication serializer
            </summary>
            <param name="tree">Target tree containing mapping information</param>
            <param name="element">Object to be serialized</param>
            <param name="target">SyndicationItem to which content will be added</param>
        </member>
        <member name="M:System.Data.Services.Client.EpmSyndicationContentSerializer.Dispose">
            <summary>
            Used for housecleaning once every node has been visited, creates an author syndication element if none has been
            created by the visitor
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.EpmSyndicationContentSerializer.Serialize(System.Data.Services.Common.EpmTargetPathSegment,System.Data.Services.Common.EpmSerializationKind)">
            <summary>
            Override of the base Visitor method, which actually performs mapping search and serialization
            </summary>
            <param name="targetSegment">Current segment being checked for mapping</param>
            <param name="kind">Which sub segments to serialize</param>
        </member>
        <member name="M:System.Data.Services.Client.EpmSyndicationContentSerializer.CreateAuthor(System.Boolean)">
            <summary>
            Creates a new author syndication specific object
            </summary>
            <param name="createNull">Whether to create a null author or a non-null author</param>
        </member>
        <member name="M:System.Data.Services.Client.EpmSyndicationContentSerializer.FinishAuthor">
            <summary>
            Finish writing the author atom element
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.LinkDescriptor">
            <summary>
            represents the association between two entities
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.LinkDescriptor.EquivalentComparer">
            <summary>equivalence comparer</summary>
        </member>
        <member name="F:System.Data.Services.Client.LinkDescriptor.source">
            <summary>source entity</summary>
        </member>
        <member name="F:System.Data.Services.Client.LinkDescriptor.sourceProperty">
            <summary>name of property on source entity that references the target entity</summary>
        </member>
        <member name="F:System.Data.Services.Client.LinkDescriptor.target">
            <summary>target entity</summary>
        </member>
        <member name="M:System.Data.Services.Client.LinkDescriptor.#ctor(System.Object,System.String,System.Object,System.Data.Services.Client.EntityStates)">
            <summary>
            constructor
            </summary>
            <param name="source">source entity</param>
            <param name="sourceProperty">name of property on source entity that references the target entity</param>
            <param name="target">target entity</param>
            <param name="state">link state</param>
        </member>
        <member name="P:System.Data.Services.Client.LinkDescriptor.Target">
            <summary>target entity</summary>
        </member>
        <member name="P:System.Data.Services.Client.LinkDescriptor.Source">
            <summary>source entity</summary>
        </member>
        <member name="P:System.Data.Services.Client.LinkDescriptor.SourceProperty">
            <summary>name of property on source entity that references the target entity</summary>
        </member>
        <member name="T:System.Data.Services.Client.LinkDescriptor.Equivalent">
            <summary>equivalence comparer</summary>
        </member>
        <member name="M:System.Data.Services.Client.LinkDescriptor.Equivalent.Equals(System.Data.Services.Client.LinkDescriptor,System.Data.Services.Client.LinkDescriptor)">
            <summary>are two LinkDescriptors equivalent, ignore state</summary>
            <param name="x">link descriptor x</param>
            <param name="y">link descriptor y</param>
            <returns>true if equivalent</returns>
        </member>
        <member name="M:System.Data.Services.Client.LinkDescriptor.Equivalent.GetHashCode(System.Data.Services.Client.LinkDescriptor)">
            <summary>compute hashcode for LinkDescriptor</summary>
            <param name="obj">link descriptor</param>
            <returns>hashcode</returns>
        </member>
        <member name="T:System.Data.Services.Client.ChangeOperationResponse">
            <summary>
            Response from SaveChanges.
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.OperationResponse">
            <summary>Operation response base class</summary>
        </member>
        <member name="F:System.Data.Services.Client.OperationResponse.headers">
            <summary>Http headers of the response.</summary>
        </member>
        <member name="F:System.Data.Services.Client.OperationResponse.statusCode">
            <summary>Http status code of the response.</summary>
        </member>
        <member name="F:System.Data.Services.Client.OperationResponse.innerException">
            <summary>exception to throw during get results</summary>
        </member>
        <member name="M:System.Data.Services.Client.OperationResponse.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            constructor
            </summary>
            <param name="headers">HTTP headers</param>
        </member>
        <member name="P:System.Data.Services.Client.OperationResponse.Headers">
            <summary>Http headers of the response.</summary>
        </member>
        <member name="P:System.Data.Services.Client.OperationResponse.StatusCode">
            <summary>Http status code of the response.</summary>
        </member>
        <member name="P:System.Data.Services.Client.OperationResponse.Error">
            <summary>Get and set the exception object if this response had a failure</summary>
        </member>
        <member name="F:System.Data.Services.Client.ChangeOperationResponse.descriptor">
            <summary>descriptor containing the response object.</summary>
        </member>
        <member name="M:System.Data.Services.Client.ChangeOperationResponse.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Data.Services.Client.Descriptor)">
            <summary>
            constructor
            </summary>
            <param name="headers">HTTP headers</param>
            <param name="descriptor">response object containing information about resources that got changed.</param>
        </member>
        <member name="P:System.Data.Services.Client.ChangeOperationResponse.Descriptor">
            <summary>Descriptor containing the response object.</summary>
        </member>
        <member name="T:System.Data.Services.Client.ClientConvert">
            <summary>
            static utility functions for conversions
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.SystemDataLinq">
            <summary>fullname for assembly</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.knownTypes">
            <summary>list of known value (and reference) types</summary>
            <remarks>
            examples of unsupported value types
            IntPtr, UIntPtr, byte*, char*
            </remarks>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.namedTypesMap">
            <summary>mapping of type names to type</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.needSystemDataLinqBinary">
            <summary>has System.Data.Link.Binary not been delay loaded yet</summary>
        </member>
        <member name="M:System.Data.Services.Client.ClientConvert.ChangeType(System.String,System.Type)">
            <summary>
            convert from string to the appropriate type
            </summary>
            <param name="propertyValue">incoming string value</param>
            <param name="propertyType">type to convert to</param>
            <returns>converted value</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientConvert.IsBinaryValue(System.Object)">
            <summary>Determines whether the specified value is a System.Data.Linq.Binary value.</summary>
            <param name="value">Value to check.</param>
            <returns>true if the value is a System.Data.Linq.Binary value; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientConvert.TryKeyBinaryToString(System.Object,System.String@)">
            <summary>Converts the specified System.Data.Linq.Binary to a serializable string for URI key.</summary>
            <param name="binaryValue">Non-null value to convert.</param>
            <param name="result">out parameter for value converted to a serializable string for URI key.</param>
            <returns>true/ false indicating success</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientConvert.TryKeyPrimitiveToString(System.Object,System.String@)">
            <summary>Converts the specified value to a serializable string for URI key.</summary>
            <param name="value">Non-null value to convert.</param>
            <param name="result">out parameter for value converted to a serializable string for URI key.</param>
            <returns>true/ false indicating success</returns>
            <remarks>
            This is a version of WebConvert.TryKeyPrimitiveToString to be used on the client, to avoid
            referencing System.Data.Linq.Binary unless required.
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.ClientConvert.VerifyCast(System.Type,System.Object)">
            <summary>
            cast value to expected type
            </summary>
            <param name="type">expected type</param>
            <param name="value">value to cast</param>
            <returns>cast value</returns>
            <exception cref="T:System.InvalidOperationException">when the value can't be cast</exception>
        </member>
        <member name="M:System.Data.Services.Client.ClientConvert.ToNamedType(System.String,System.Type@)">
            <summary>
            change primtive typeName into non-nullable type
            </summary>
            <param name="typeName">like Edm.String or Edm.Binary</param>
            <param name="type">the mapped output type</param>
            <returns>true if named</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientConvert.ToTypeName(System.Type)">
            <summary>Change primitive type into a well-known type name.</summary>
            <param name="type">Primitive type to get well-known name for.</param>
            <returns>The well-known name for the specified <paramref name="type"/>.</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientConvert.ToString(System.Object)">
            <summary>
            convert from primitive value to a xml payload string
            </summary>
            <param name="propertyValue">incoming object value</param>
            <returns>converted value</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientConvert.IsKnownType(System.Type)">
            <summary>
            Is this a known primitive type (including string,byte[],uri)
            </summary>
            <param name="type">type to analyze</param>
            <returns>true if known primitive type</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientConvert.IsSupportedPrimitiveTypeForUri(System.Type)">
            <summary>
            Is this a primitive type that can go in the URI
            </summary>
            <param name="type">type to analyze</param>
            <returns>true if known primitive type</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientConvert.GetEdmType(System.Type)">
            <summary>type edm type string for content</summary>
            <param name="propertyType">type to analyze</param>
            <returns>edm type string for payload, null for string and unknown</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientConvert.CreateKnownPrimitives">
            <summary>create list of known value (and reference) types</summary>
            <returns>static list of known types matching StorageType enum</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientConvert.CreateKnownNamesMap">
            <summary>generate mapping of primitive type names to type</summary>
            <returns>mapping of primitive type names to type</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientConvert.IndexOfStorage(System.Type)">
            <summary>get the StorageType for known types</summary>
            <param name="type">type being tested for known type</param>
            <returns>-1 or (int)StorageType</returns>
            <remarks>will validate System.Data.Linq.Binary on demand</remarks>
        </member>
        <member name="M:System.Data.Services.Client.ClientConvert.LoadSystemDataLinqBinary(System.Type)">
            <summary>validating type is System.Data.Linq.Binary</summary>
            <param name="type">type to verify its System.Data.Linq.Binary</param>
            <returns>-1 or (int)StorageType</returns>
        </member>
        <member name="T:System.Data.Services.Client.ClientConvert.StorageType">
            <summary>StorageType enum</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.Boolean">
            <summary>Boolean</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.Byte">
            <summary>Byte</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.ByteArray">
            <summary>ByteArray</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.Char">
            <summary>Char</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.CharArray">
            <summary>CharArray</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.DateTime">
            <summary>DateTime</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.DateTimeOffset">
            <summary>DateTimeOffset</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.Decimal">
            <summary>Decimal</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.Double">
            <summary>Double</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.Guid">
            <summary>Guid</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.Int16">
            <summary>Int16</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.Int32">
            <summary>Int32</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.Int64">
            <summary>Int64</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.Single">
            <summary>Single</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.String">
            <summary>String</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.SByte">
            <summary>SByte</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.TimeSpan">
            <summary>TimeSpan</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.Type">
            <summary>Type</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.UInt16">
            <summary>UInt16</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.UInt32">
            <summary>UInt32</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.UInt64">
            <summary>UInt64</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.Uri">
            <summary>Uri</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.XDocument">
            <summary>System.Xml.Linq.XDocument</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.XElement">
            <summary>System.Xml.Linq.XElement</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientConvert.StorageType.Binary">
            <summary>System.Data.Linq.Binary</summary>
        </member>
        <member name="T:System.Data.Services.Client.ClientType">
            <summary>
            wrapper around a clr type to
                get/set properties
                add items to collections
                support open types
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.ElementTypeName">
            <summary>what is the clr full name using ToString for generic name expansion</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.ElementType">
            <summary>what clr type does this represent</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.HasKeys">
            <summary>if HasKeys then EntityType else if !KnownType then ComplexType else PrimitiveType</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.KeyCount">
            <summary>count of keys on entity type</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.types">
            <summary>appdomain cache discovered types with properties that we materialize</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.namedTypes">
            <summary>cache &lt;T&gt; and wireName to mapped type</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.properties">
            <summary>properties</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.mediaDataMember">
            <summary>Property that holds data for ATOM-style media link entries</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.epmSourceTree">
            <summary>Souce Epm mappings</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.epmTargetTree">
            <summary>Target Epm mappings</summary>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.#ctor(System.Type,System.String,System.Boolean)">
            <summary>
            discover and prepare properties for usage
            </summary>
            <param name="type">type being processed</param>
            <param name="typeName">parameter name</param>
            <param name="skipSettableCheck">Whether the skip the check for settable properties.</param>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.Create(System.Type)">
            <summary>
            get a client type resolver
            </summary>
            <param name="type">type to wrap</param>
            <returns>client type</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.Create(System.Type,System.Boolean)">
            <summary>
            get a client type resolver
            </summary>
            <param name="type">type to wrap</param>
            <param name="expectModelType">Whether the type is expected to be a model type.</param>
            <returns>client type</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.ResolveFromName(System.String,System.Type)">
            <summary>
            resolve the wireName/userType pair to a CLR type
            </summary>
            <param name="wireName">type name sent by server</param>
            <param name="userType">type passed by user or on propertyType from a class</param>
            <returns>mapped clr type</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.GetImplementationType(System.Type,System.Type)">
            <summary>
            get concrete type that implements the genericTypeDefinitation
            </summary>
            <param name="propertyType">starting type</param>
            <param name="genericTypeDefinition">the generic type definition to find</param>
            <returns>concrete type that implementats the generic type</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.GetCollectionMethod(System.Type,System.Type,System.String,System.Type@)">
            <summary>
            get element type, resolves ICollection and Nullable
            </summary>
            <param name="propertyType">starting type</param>
            <param name="genericTypeDefinition">the generic type definition to find</param>
            <param name="methodName">the method to search for</param>
            <param name="type">the collection type if found</param>
            <returns>element types</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.CreateInstance">
            <summary>
            create object using default constructor
            </summary>
            <returns>instance of propertyType</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.GetProperty(System.String,System.Boolean)">
            <summary>
            get property wrapper for a property name, might be method around open types for otherwise unknown properties
            </summary>
            <param name="propertyName">property name</param>
            <param name="ignoreMissingProperties">are missing properties ignored</param>
            <returns>property wrapper</returns>
            <exception cref="T:System.InvalidOperationException">for unknown properties on closed types</exception>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.SetEpmValue(System.Data.Services.Common.EpmTargetPathSegment,System.Object,System.String,System.Data.Services.Client.ArraySet{System.String}@)">
            <summary>
            Sets the value <paramref name="propertyValue"/> on the <paramref name="currentValue"/> object
            </summary>
            <param name="currentSegment">Target path segment containing the corresponding attribute information</param>
            <param name="currentValue">Object on which to set property</param>
            <param name="propertyValue">Value to be set</param>
            <param name="haveSetKeyProperty">Collection of Key properties on the object</param>
            <returns>Exception to throw if non-null values are encountered in the content section</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.IsConstructedGeneric(System.Type,System.Type)">
            <summary>
            Checks whether the specified <paramref name="type"/> is a 
            closed constructed type of the generic type.
            </summary>
            <param name="type">Type to check.</param>
            <param name="genericTypeDefinition">Generic type for checkin.</param>
            <returns>true if <paramref name="type"/> is a constructed type of <paramref name="genericTypeDefinition"/>.</returns>
            <remarks>The check is an immediate check; no inheritance rules are applied.</remarks>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.ResolveSubclass(System.String,System.Type,System.Type,System.Type@)">
            <summary>
            is the type a visible subclass with correct name
            </summary>
            <param name="wireClassName">type name from server</param>
            <param name="userType">the type from user for materialization or property type</param>
            <param name="type">type being tested</param>
            <param name="existing">the previously discovered matching type</param>
            <exception cref="T:System.InvalidOperationException">if the mapping is ambiguous</exception>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.BuildEpmInfo(System.Type)">
            <summary>
            By going over EntityPropertyMappingInfoAttribute(s) defined on <paramref name="type"/>
            builds the corresponding EntityPropertyMappingInfo
            </summary>
            <param name="type">Type being looked at</param>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.BuildEpmInfo(System.Data.Services.Common.EntityPropertyMappingAttribute,System.Type)">
            <summary>
            Builds the EntityPropertyMappingInfo corresponding to an EntityPropertyMappingAttribute, also builds the delegate to
            be invoked in order to retrieve the property provided in the <paramref name="sourceName"/>
            </summary>
            <param name="epmAttr">Source EntityPropertyMappingAttribute</param>
            <param name="definingType">ResourceType on which to look for the property</param>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.BuildPropertyReader(System.Linq.Expressions.Expression,System.Data.Services.Client.ClientType,System.String[],System.Int32,System.Data.Services.Client.ClientType.ClientProperty@)">
            <summary>
            Given a source property path in segmented form, creates the correponding delegate that reads the
            property value from the resource type instance
            </summary>
            <param name="expr">Generated expression tree</param>
            <param name="rsrcType">Resource type whose property is to be read</param>
            <param name="srcPathSegments">Collection of property names used for resource type property lookup</param>
            <param name="currentSegment">Index of current property name in <paramref name="srcPathSegments"/></param>
            <param name="rsrcProp">Final resource property object that the <paramref name="srcPathSegments"/> refers to</param>
            <returns>Expression tree which results in access to property value</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.SetPropertyValueFromPath(System.Object,System.String,System.String[],System.Int32,System.Data.Services.Client.ArraySet{System.String}@)">
            <summary>
            Given a collection of <paramref name="segments"/> corresponding to a property access path
            on the <paramref name="instance"/> object, sets the <paramref name="value"/> on the property
            </summary>
            <param name="instance">Object on which to set property</param>
            <param name="propertyValue">Value of property</param>
            <param name="segments">Property access path where each element is a property name</param>
            <param name="currentIndex">Index of the current segment being looked at</param>
            <param name="haveSetKeyProperty">Remembers which key properties have been set on the <paramref name="instance"/></param>
            <returns>Exception to throw if non-null values are seen in the content section</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.IndexOfProperty(System.String)">
            <summary>get the index of a property</summary>
            <param name="propertyName">propertyName</param>
            <returns>index else -1</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.WireUpMimeTypeProperties">
            <summary>
            Find properties with dynamic MIME type related properties and 
            set the references from each ClientProperty to its related MIME type property
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.CheckMediaLinkEntry">
            <summary>
            Check if this type represents an ATOM-style media link entry and
            if so mark the ClientType as such
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ClientType.Properties">
            <summary>Properties sorted by name</summary>
        </member>
        <member name="P:System.Data.Services.Client.ClientType.MediaDataMember">
            <summary>Property that holds data for ATOM-style media link entries</summary>
        </member>
        <member name="P:System.Data.Services.Client.ClientType.EpmSourceTree">
            <summary>
            Source tree for <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/>s on this type
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ClientType.EpmTargetTree">
            <summary>
            Target tree for <see cref="T:System.Data.Services.Common.EntityPropertyMappingAttribute"/>s on this type
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.ClientType.HasEntityPropertyMappings">
            <summary>Are there any entity property mappings on this type</summary>
        </member>
        <member name="T:System.Data.Services.Client.ClientType.TypeName">
            <summary>type + wireName combination</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.TypeName.Type">
            <summary>type</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.TypeName.Name">
            <summary>type name from server</summary>
        </member>
        <member name="T:System.Data.Services.Client.ClientType.ClientProperty">
            <summary>
            wrapper around property methods
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.ClientProperty.PropertyName">
            <summary>property name for debugging</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.ClientProperty.NullablePropertyType">
            <summary>type of the property</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.ClientProperty.PropertyType">
            <summary>type of the property</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.ClientProperty.CollectionType">
            <summary>what is the nested collection element</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.ClientProperty.IsKnownType">
            <summary>
            Is this a known primitive/reference type or an entity/complex/collection type?
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.ClientProperty.propertyGetter">
            <summary>property getter</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.ClientProperty.propertySetter">
            <summary>property setter</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.ClientProperty.setMethod">
            <summary>"set_Item" method supporting IDictionary properties</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.ClientProperty.addMethod">
            <summary>"Add" method supporting ICollection&lt;&gt; properties</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.ClientProperty.removeMethod">
            <summary>"Remove" method supporting ICollection&lt;&gt; properties</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.ClientProperty.containsMethod">
            <summary>"Contains" method support ICollection&lt;&gt; properties</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.ClientProperty.keyProperty">
            <summary>IsKeyProperty?</summary>
        </member>
        <member name="F:System.Data.Services.Client.ClientType.ClientProperty.mimeTypeProperty">
            <summary>The other property in this type that holds the MIME type for this one</summary>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.ClientProperty.#ctor(System.Reflection.PropertyInfo,System.Type,System.Boolean)">
            <summary>
            constructor
            </summary>
            <param name="property">property</param>
            <param name="propertyType">propertyType</param>
            <param name="keyProperty">keyProperty</param>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.ClientProperty.GetKeyProperty(System.Data.Services.Client.ClientType.ClientProperty)">
            <summary>get KeyProperty</summary>
            <param name="x">x</param>
            <returns>KeyProperty</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.ClientProperty.GetPropertyName(System.Data.Services.Client.ClientType.ClientProperty)">
            <summary>get property name</summary>
            <param name="x">x</param>
            <returns>PropertyName</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.ClientProperty.NameEquality(System.Data.Services.Client.ClientType.ClientProperty,System.Data.Services.Client.ClientType.ClientProperty)">
            <summary>compare name equality</summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <returns>true if the property names are equal; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.ClientProperty.GetValue(System.Object)">
            <summary>
            get property value from an object
            </summary>
            <param name="instance">object to get the property value from</param>
            <returns>property value</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.ClientProperty.RemoveValue(System.Object,System.Object)">
            <summary>
            remove a item from collection
            </summary>
            <param name="instance">collection</param>
            <param name="value">item to remove</param>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.ClientProperty.SetValue(System.Object,System.Object,System.String,System.Boolean)">
            <summary>
            set property value on an object
            </summary>
            <param name="instance">object to set the property value on</param>
            <param name="value">property value</param>
            <param name="propertyName">used for open type</param>
            <param name="allowAdd">allow add to a collection if available, else allow setting collection property</param>
        </member>
        <member name="P:System.Data.Services.Client.ClientType.ClientProperty.DeclaringType">
            <summary>what type was this property declared on?</summary>
        </member>
        <member name="P:System.Data.Services.Client.ClientType.ClientProperty.KeyProperty">
            <summary>Does this property particpate in the primary key?</summary>
        </member>
        <member name="P:System.Data.Services.Client.ClientType.ClientProperty.MimeTypeProperty">
            <summary>The other property in this type that holds the MIME type for this one</summary>
        </member>
        <member name="T:System.Data.Services.Client.ClientType.TypeNameEqualityComparer">
            <summary>equality comparer for TypeName</summary>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.TypeNameEqualityComparer.Equals(System.Data.Services.Client.ClientType.TypeName,System.Data.Services.Client.ClientType.TypeName)">
            <summary>equality comparer for TypeName</summary>
            <param name="x">left type</param>
            <param name="y">right type</param>
            <returns>true if x and y are equal</returns>
        </member>
        <member name="M:System.Data.Services.Client.ClientType.TypeNameEqualityComparer.GetHashCode(System.Data.Services.Client.ClientType.TypeName)">
            <summary>compute hashcode for TypeName</summary>
            <param name="obj">object to compute hashcode for</param>
            <returns>computed hashcode</returns>
        </member>
        <member name="T:System.Data.Services.Client.BatchStream">
            <summary>
            materialize objects from an application/atom+xml stream
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.DefaultBufferSize">
            <summary>Default buffer size, should be larger than buffer size of StreamReader</summary> 
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.batchRequest">
            <summary>Is this a batch resquest or batch response</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.byteBuffer">
            <summary>Buffered bytes from the stream.</summary> 
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.reader">
            <summary>Underlying stream being buffered.</summary> 
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.byteLength">
            <summary>Number of valid bytes in the byteBuffer.</summary> 
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.bytePosition">
            <summary>Position in the byteBuffer.</summary> 
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.batchEncoding">
            <summary>Discovered encoding of underlying stream.</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.checkPreamble">
            <summary>check preamble.</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.batchBoundary">
            <summary>batch boundary.</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.batchLength">
            <summary>batch length</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.totalCount">
            <summary>running total byte count</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.changesetBoundary">
            <summary>changeset boundary.</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.changesetEncoding">
            <summary>Discovered encoding of underlying neseted stream.</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.contentHeaders">
            <summary>content headers</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.contentStream">
            <summary>content stream</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.disposeWithContentStreamDispose">
            <summary>stream dispose delayed until the contentStream is disposed</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.statusCode">
            <summary>status code of the response.</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.batchState">
            <summary>batch state</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.writer">
            <summary>everything batch reads to help debugging</summary>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.#ctor(System.IO.Stream,System.String,System.Text.Encoding,System.Boolean)">
            <summary>Wrap a stream for batching.</summary>
            <param name="stream">underlying stream</param>
            <param name="boundary">batch boundary</param>
            <param name="batchEncoding">encoding of batch</param>
            <param name="requestStream">is request stream or response stream</param>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.Flush">
            <summary>Does nothing.</summary>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Not supported.</summary>
            <param name="buffer">The parameter is not used.</param>
            <param name="offset">The parameter is not used.</param>
            <param name="count">The parameter is not used.</param>
            <param name="callback">The parameter is not used.</param>
            <param name="state">The parameter is not used.</param>
            <returns>nothing</returns>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Not supported.</summary>
            <param name="buffer">The parameter is not used.</param>
            <param name="offset">The parameter is not used.</param>
            <param name="count">The parameter is not used.</param>
            <returns>nothing</returns>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Forward seek in buffered underlying stream.
            </summary>
            <param name="offset">non-negative bytes to forward seek</param>
            <param name="origin">must be Current</param>
            <returns>underlying stream forward seek result.</returns>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.SetLength(System.Int64)">
            <summary>Not supported.</summary>
            <param name="value">The parameter is not used.</param>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Not supported.</summary>
            <param name="buffer">The parameter is not used.</param>
            <param name="offset">The parameter is not used.</param>
            <param name="count">The parameter is not used.</param>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.GetBoundaryAndEncodingFromMultipartMixedContentType(System.String,System.String@,System.Text.Encoding@)">
            <summary>
            Get the boundary string and encoding if the content type is multipart/mixed.
            </summary>
            <param name="contentType">content type specified in the request.</param>
            <param name="boundary">returns the boundary string specified in the content type.</param>
            <param name="encoding">returns the encoding specified in the content type.</param>
            <returns>true if multipart/mixed with boundary</returns>
            <exception cref="T:System.InvalidOperationException">if multipart/mixed without boundary</exception>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.GetResponseVersion">
            <summary>Gets the version from content-headers if available.</summary>
            <returns>The value for the DataServiceVersion header.</returns>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.GetStatusCode">
            <summary>Get and parse status code from content-headers</summary>
            <returns>status code</returns>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.MoveNext">
            <summary>start a multipart content section with a specific boundary</summary>
            <returns>true if this is content to process</returns>
            <remarks>
            5.1.2
            an improperly truncated "multipart" entity may not have
            any terminating boundary marker.
            MIME implementations are required to recognize outer level
            boundary markers at ANY level of inner nesting.
            5.1.3
            The "mixed" subtype of "multipart" is intended for use when the body
            parts are independent and need to be bundled in a particular order.
            Any "multipart" subtypes that an implementation does not recognize
            must be treated as being of subtype "mixed".
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.GetContentStream">
            <summary>Method to get content stream instead of property so it can be passed as function</summary>
            <returns>ContentStream</returns>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.Dispose(System.Boolean)">
            <summary>Dispose underlying stream</summary>
            <param name="disposing">true if active dispose, false if finalizer</param>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.GetStateBasedOnHttpMethodName(System.String)">
            <summary>
            Validates the method name and returns the state based on the method name
            </summary>
            <param name="methodName">method name to be validated</param>
            <returns>state based on the method name</returns>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.VerifyBoundary(System.String)">
            <summary>
            verify boundary delimiter if valid
            </summary>
            <param name="boundary">boundary to test</param>
            <returns>"--" + boundary</returns>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.ClearPreviousOperationInformation">
            <summary>
            Clears the headers, contentUri and stream of the previous operation
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.Append(System.Byte[]@,System.Int32)">
            <summary>appends bytes from byteBuffer to buffer</summary>
            <param name="buffer">buffer to append to, grows as necessary</param>
            <param name="count">count of bytes to append</param>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.AssertOpen">
            <summary>verify reader is open</summary>
            <exception cref="T:System.ObjectDisposedException">if reader is used after dispose</exception>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.ReadBuffer">
            <summary>Fill the buffer from the underlying stream.</summary>
            <returns>true if any data was read.</returns>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.ReadLine">
            <summary>
            Reads a line. A line is defined as a sequence of characters followed by
            a carriage return ('\r'), a line feed ('\n'), or a carriage return
            immediately followed by a line feed. The resulting string does not
            contain the terminating carriage return and/or line feed. The returned
            value is null if the end of the input stream has been reached.
            </summary>
            <returns>line from the buffered stream</returns>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.DetectEncoding">
            <summary>Detect the encoding based data from the stream.</summary>
            <returns>discovered encoding</returns>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.ReadDelimiter(System.Byte[],System.Int32,System.Int32)">
            <summary>
            read from BatchStream buffer into user buffer, stopping when a boundary delimiter is found
            </summary>
            <param name="buffer">place to copy bytes read from underlying stream</param>
            <param name="offset">offset in buffer to start writing</param>
            <param name="count">count of bytes to read from buffered underlying stream</param>
            <returns>count of bytes actualy copied into buffer</returns>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.ReadLength(System.Byte[],System.Int32,System.Int32)">
            <summary>Read from internal buffer or use unbuffered read from underlying stream.</summary>
            <param name="buffer">place to copy bytes read from underlying stream</param>
            <param name="offset">offset in buffer to start writing</param>
            <param name="count">count of bytes to read from buffered underlying stream</param>
            <returns>count of bytes actualy copied into buffer</returns>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.ReadContentHeaders">
            <summary>
            Read the content headers
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.ReadHttpHeaders">
            <summary>
            Validate that the first header is the http method name, followed by url followed by http version
            E.g. POST /Customers HTTP/1.1
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.BatchStream.ContentHeaders">
            <summary>content headers</summary>
        </member>
        <member name="P:System.Data.Services.Client.BatchStream.Encoding">
            <summary>encoding</summary>
        </member>
        <member name="P:System.Data.Services.Client.BatchStream.State">
            <summary>batch state</summary>
        </member>
        <member name="P:System.Data.Services.Client.BatchStream.CanRead">
            <summary>Delegate to underlying stream</summary>
        </member>
        <member name="P:System.Data.Services.Client.BatchStream.CanSeek">
            <summary>False</summary>
        </member>
        <member name="P:System.Data.Services.Client.BatchStream.CanWrite">
            <summary>False</summary>
        </member>
        <member name="P:System.Data.Services.Client.BatchStream.Length">
            <summary>Not supported.</summary>
        </member>
        <member name="P:System.Data.Services.Client.BatchStream.Position">
            <summary>Not supported.</summary>
        </member>
        <member name="T:System.Data.Services.Client.BatchStream.StreamWithDelimiter">
            <summary>
            sub stream of BatchStream that reads up to a boundary delimiter
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.BatchStream.StreamWithLength">
            <summary>
            sub stream of BatchStream that reads a specific length from underlying stream
            </summary>
            <remarks>
            Allows users of stream to call Dispose multiple times
            without affecting the BatchStream
            </remarks>
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.StreamWithLength.target">
            <summary>Underlying batch stream</summary>
        </member>
        <member name="F:System.Data.Services.Client.BatchStream.StreamWithLength.length">
            <summary>Max remaining byte length to read from underlying stream</summary>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.StreamWithLength.#ctor(System.Data.Services.Client.BatchStream,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="stream">underlying stream</param>
            <param name="contentLength">max byte length to read</param>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.StreamWithLength.Flush">
            <summary>Does nothing.</summary>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.StreamWithLength.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>read bytes from stream</summary>
            <param name="buffer">buffer to store bytes being read</param>
            <param name="offset">offset in buffer to start storing bytes</param>
            <param name="count">count of bytes to read</param>
            <returns>count of bytes actualy read into the buffer</returns>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.StreamWithLength.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Not supported.</summary>
            <param name="offset">The parameter is not used.</param>
            <param name="origin">The parameter is not used.</param>
            <returns>nothing</returns>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.StreamWithLength.SetLength(System.Int64)">
            <summary>Not supported.</summary>
            <param name="value">ignored</param>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.StreamWithLength.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Not supported.</summary>
            <param name="buffer">The parameter is not used.</param>
            <param name="offset">The parameter is not used.</param>
            <param name="count">The parameter is not used.</param>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.StreamWithLength.Dispose(System.Boolean)">
            <summary>Dispose of this nested stream.</summary>
            <param name="disposing">true if active dispose</param>
        </member>
        <member name="P:System.Data.Services.Client.BatchStream.StreamWithLength.CanRead">
            <summary>Delegate to underlying stream</summary>
        </member>
        <member name="P:System.Data.Services.Client.BatchStream.StreamWithLength.CanSeek">
            <summary>False</summary>
        </member>
        <member name="P:System.Data.Services.Client.BatchStream.StreamWithLength.CanWrite">
            <summary>False</summary>
        </member>
        <member name="P:System.Data.Services.Client.BatchStream.StreamWithLength.Length">
            <summary>Not supported.</summary>
        </member>
        <member name="P:System.Data.Services.Client.BatchStream.StreamWithLength.Position">
            <summary>Not supported.</summary>
        </member>
        <member name="P:System.Data.Services.Client.BatchStream.StreamWithLength.Target">
            <summary>Underlying batch stream</summary>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.StreamWithDelimiter.#ctor(System.Data.Services.Client.BatchStream)">
            <summary>
            constructor
            </summary>
            <param name="stream">underlying stream</param>
        </member>
        <member name="M:System.Data.Services.Client.BatchStream.StreamWithDelimiter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>read bytes from stream</summary>
            <param name="buffer">buffer to store bytes being read</param>
            <param name="offset">offset in buffer to start storing bytes</param>
            <param name="count">count of bytes to read</param>
            <returns>count of bytes actualy read into the buffer</returns>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceClientException">
            <summary>
            The exception that is thrown when the server returns an error.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceClientException.statusCode">
            <summary>status code as returned by the server.</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor">
            <summary>
            Creates a new instance of DataServiceQueryException.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.String)">
            <summary>
            Creates a new instance of DataServiceQueryException.
            </summary>
            <param name="message">error message for this exception.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of DataServiceQueryException.
            </summary>
            <param name="message">error message for this exception.</param>
            <param name="innerException">Exception that caused this exception to be thrown.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of DataServiceQueryException.
            </summary>
            <param name="message">error message for this exception.</param>
            <param name="statusCode">status code as returned by the server.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.String,System.Exception,System.Int32)">
            <summary>
            Creates a new instance of DataServiceQueryException.
            </summary>
            <param name="message">error message for this exception.</param>
            <param name="innerException">Exception that caused this exception to be thrown.</param>
            <param name="statusCode">status code as returned by the server.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the DataServiceQueryException class from the 
            specified SerializationInfo and StreamingContext instances.
            </summary>
            <param name="serializationInfo">
            A SerializationInfo containing the information required to serialize 
            the new DataServiceQueryException.</param>
            <param name="context">
            A StreamingContext containing the source of the serialized stream 
            associated with the new DataServiceQueryException.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceClientException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the SerializationInfo with information about the exception.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceClientException.StatusCode">
            <summary>Error code to be used in payloads.</summary>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceQuery">
            <summary>non-generic placeholder for generic implementation</summary>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceRequest">
            <summary>non-generic placeholder for generic implementation</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequest.#ctor">
            <summary>internal constructor so that only our assembly can provide an implementation</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequest.ToString">
            <summary>Gets the URI for a the query</summary>
            <returns>a string with the URI</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequest.Materialize(System.Data.Services.Client.DataServiceContext,System.Type,System.String,System.IO.Stream)">
            <summary>
            get an enumerable materializes the objects the response
            </summary>
            <param name="context">context</param>
            <param name="elementType">element type</param>
            <param name="contentType">contentType</param>
            <param name="response">method to get http response stream</param>
            <returns>an enumerable</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequest.GetInstance(System.Type,System.Uri)">
            <summary>
            Creates a instance of strongly typed DataServiceRequest with the given element type.
            </summary>
            <param name="elementType">element type for the DataServiceRequest.</param>
            <param name="requestUri">constructor parameter.</param>
            <returns>returns the strongly typed DataServiceRequest instance.</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequest.ProcessResult``1(System.Data.Services.Client.QueryResult,System.Data.Services.Client.DataServiceContext)">
            <summary>
            Processes the result for successfull request and produces the actual result of the request.
            </summary>
            <typeparam name="TElement">Element type of the result.</typeparam>
            <param name="result">The result which already finished successfully.</param>
            <param name="context">The data service context.</param>
            <returns>The actual result of the request.</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequest.EndExecute``1(System.Object,System.Data.Services.Client.DataServiceContext,System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to an Internet resource.
            </summary>
            <typeparam name="TElement">Element type of the result.</typeparam>
            <param name="source">Source object of async request.</param>
            <param name="context">The data service context.</param>
            <param name="asyncResult">The asyncResult being ended.</param>
            <returns>The response - result of the request.</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequest.Execute``1(System.Data.Services.Client.DataServiceContext,System.Data.Services.Client.QueryComponents)">
            <summary>
            execute uri and materialize result
            </summary>
            <typeparam name="TElement">element type</typeparam>
            <param name="context">context</param>
            <param name="queryComponents">query components for request to execute</param>
            <returns>enumerable of results</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequest.GetQuerySetCount(System.Data.Services.Client.DataServiceContext)">
            <summary>
            Synchronizely get the query set count from the server by executing the $count=value query
            </summary>
            <param name="context">The context</param>
            <returns>The server side count of the query set</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequest.BeginExecute(System.Object,System.Data.Services.Client.DataServiceContext,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to an Internet resource.
            </summary>
            <param name="source">source of execute (DataServiceQuery or DataServiceContext</param>
            <param name="context">context</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">The state object for this request.</param>
            <returns>An IAsyncResult that references the asynchronous request for a response.</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequest.CreateResult(System.Object,System.Data.Services.Client.DataServiceContext,System.AsyncCallback,System.Object)">
            <summary>
            Creates the result object for the specified query parameters.
            </summary>
            <param name="source">The source object for the request.</param>
            <param name="context">The data service context.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">The state object for the callback.</param>
            <returns>Result representing the create request. The request has not been initiated yet.</returns>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceRequest.ElementType">
            <summary>Element Type</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceRequest.RequestUri">
            <summary>Gets the URI for a the query</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceRequest.QueryComponents">
            <summary>The TranslateResult associated with this request</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQuery.#ctor">
            <summary>internal constructor so that only our assembly can provide an implementation</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQuery.System#Collections#IEnumerable#GetEnumerator">
            <summary>Get an enumerator materializes the objects the Uri request.</summary>
            <returns>an enumerator</returns>
            <remarks>Expect derived class to override this with an explict interface implementation</remarks>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceQuery.Expression">
            <summary>Linq Expression</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceQuery.Provider">
            <summary>Linq Query Provider</summary>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceRequest`1">
            <summary>
            Holds a Uri and type for the request.
            </summary>
            <typeparam name="TElement">The type to construct for the request results</typeparam>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceRequest`1.queryComponents">
            <summary>The UriTranslateResult for the request</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequest`1.#ctor(System.Uri)">
            <summary>Create a request for a specific Uri</summary>
            <param name="requestUri">The URI for the request.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceRequest`1.#ctor(System.Data.Services.Client.QueryComponents)">
            <summary>Create a request for a specific Uri</summary>
            <param name="queryComponents">The query components for the request</param>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceRequest`1.ElementType">
            <summary>Element Type</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceRequest`1.RequestUri">
            <summary>The URI for the request.</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceRequest`1.QueryComponents">
            <summary>The TranslateResult associated with this request</summary>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceResponse">
            <summary>
            Data service response to ExecuteBatch &amp; SaveChanges
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceResponse.headers">
            <summary>Http headers of the response.</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceResponse.statusCode">
            <summary>Http status code of the response.</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceResponse.response">
            <summary>responses</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceResponse.batchResponse">
            <summary>true if this is a batch response, otherwise false.</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceResponse.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Collections.Generic.IEnumerable{System.Data.Services.Client.OperationResponse},System.Boolean)">
            <summary>
            constructor
            </summary>
            <param name="headers">HTTP headers</param>
            <param name="statusCode">HTTP status code</param>
            <param name="response">list of responses</param>
            <param name="batchResponse">true if this represents a batch response, otherwise false.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceResponse.GetEnumerator">
            <summary>Responses of a batch query operation.</summary>
            <returns>The sequence of respones to operation</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceResponse.System#Collections#IEnumerable#GetEnumerator">
            <summary>Get an enumerator for the OperationResponse.</summary>
            <returns>an enumerator</returns>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceResponse.BatchHeaders">
            <summary>Http headers of the response.</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceResponse.BatchStatusCode">
            <summary>Http status code of the response.</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceResponse.IsBatchResponse">
            <summary> Returns true if this is a batch response. Otherwise returns false.</summary>
        </member>
        <member name="T:System.Data.Services.Common.DataServiceKeyAttribute">
            <summary>
            Attribute to be annotated on key properties
            </summary>
        </member>
        <member name="F:System.Data.Services.Common.DataServiceKeyAttribute.keyNames">
            <summary>Name of the properties that form the key.</summary>
        </member>
        <member name="M:System.Data.Services.Common.DataServiceKeyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of DataServiceKey attribute with the property name
            that forms the Key.
            </summary>
            <param name='keyName'>Name of the property that form the key for the current type.</param>
        </member>
        <member name="M:System.Data.Services.Common.DataServiceKeyAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of DataServiceKey attribute with the list of property names
            that form the key.
            </summary>
            <param name='keyNames'>Name of the properties that form the key for the current type.</param>
        </member>
        <member name="P:System.Data.Services.Common.DataServiceKeyAttribute.KeyNames">
            <summary>Name of the properties that form the key for the current type.</summary>
        </member>
        <member name="T:System.Data.Services.Client.QueryOperationResponse`1">
            <summary>
            Response to a batched query.
            </summary>
            <typeparam name="T">The type to construct for the request results</typeparam>
            
        </member>
        <member name="T:System.Data.Services.Client.QueryOperationResponse">
            <summary>
            Response to a batched query.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryOperationResponse.query">
            <summary>Original query</summary>
        </member>
        <member name="F:System.Data.Services.Client.QueryOperationResponse.results">
            <summary>Enumerable of objects in query</summary>
        </member>
        <member name="M:System.Data.Services.Client.QueryOperationResponse.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Data.Services.Client.DataServiceRequest,System.Data.Services.Client.MaterializeAtom)">
            <summary>
            constructor
            </summary>
            <param name="headers">HTTP headers</param>
            <param name="query">original query</param>
            <param name="results">retrieved objects</param>
        </member>
        <member name="M:System.Data.Services.Client.QueryOperationResponse.GetEnumerator">
            <summary>Results from a query</summary>
            <returns>enumerator of objects in query</returns>
        </member>
        <member name="M:System.Data.Services.Client.QueryOperationResponse.GetInstance(System.Type,System.Collections.Generic.Dictionary{System.String,System.String},System.Data.Services.Client.DataServiceRequest,System.Data.Services.Client.MaterializeAtom)">
            <summary>
            Creates a generic instance of the QueryOperationResponse and return it
            </summary>
            <param name="elementType">generic type for the QueryOperationResponse.</param>
            <param name="headers">constructor parameter1</param>
            <param name="query">constructor parameter2</param>
            <param name="results">constructor parameter3</param>
            <returns>returns a new strongly typed instance of QueryOperationResponse.</returns>
        </member>
        <member name="P:System.Data.Services.Client.QueryOperationResponse.Query">
            <summary>The query that executed within the batch.</summary>
        </member>
        <member name="P:System.Data.Services.Client.QueryOperationResponse.TotalCount">
            <summary>
            The server Result Set Count value from a query, if the query has requested the value
            </summary>
            <returns>
            The return value can be either a zero or positive value equals to number of entities in the set on the server
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Is thrown when count was not part of the original request, i.e., if the count tag is not found in the response stream.
            </exception>
        </member>
        <member name="P:System.Data.Services.Client.QueryOperationResponse.Results">
            <summary>get a non-null enumerable of the result</summary>
        </member>
        <member name="M:System.Data.Services.Client.QueryOperationResponse`1.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Data.Services.Client.DataServiceRequest,System.Data.Services.Client.MaterializeAtom)">
            <summary>
            constructor
            </summary>
            <param name="headers">HTTP headers</param>
            <param name="query">original query</param>
            <param name="results">retrieved objects</param>
        </member>
        <member name="M:System.Data.Services.Client.QueryOperationResponse`1.GetEnumerator">
            <summary>Results from a query</summary>
            <returns>enumerator of objects in query</returns>
        </member>
        <member name="P:System.Data.Services.Client.QueryOperationResponse`1.TotalCount">
            <summary>
            The server Result Set Count value from a query, if the query has requested the value
            </summary>
            <returns>
            The return value can be either a zero or positive value equals to number of entities in the set on the server
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Is thrown when count was not part of the original request, i.e., if the count tag is not found in the response stream.
            </exception>
        </member>
        <member name="T:System.Data.Services.Client.ReadingWritingEntityEventArgs">
            <summary>
            Event args for the event fired during reading or writing of
            an entity serialization/deserialization
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.ReadingWritingEntityEventArgs.entity">
            <summary>The entity being (de)serialized</summary>
        </member>
        <member name="F:System.Data.Services.Client.ReadingWritingEntityEventArgs.data">
            <summary>The ATOM entry data to/from the network</summary>
        </member>
        <member name="M:System.Data.Services.Client.ReadingWritingEntityEventArgs.#ctor(System.Object,System.Xml.Linq.XElement)">
            <summary>
            Constructor
            </summary>
            <param name="entity">The entity being (de)serialized</param>
            <param name="data">The ATOM entry data to/from the network</param>
        </member>
        <member name="P:System.Data.Services.Client.ReadingWritingEntityEventArgs.Entity">
            <summary>The entity being (de)serialized</summary>
        </member>
        <member name="P:System.Data.Services.Client.ReadingWritingEntityEventArgs.Data">
            <summary>The ATOM entry data to/from the network</summary>
        </member>
        <member name="T:System.Data.Services.Client.Error">
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Error.Argument(System.String,System.String)">
            <summary>
            create and trace new ArgumentException
            </summary>
            <param name="message">exception message</param>
            <param name="parameterName">parameter name in error</param>
            <returns>ArgumentException</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.InvalidOperation(System.String)">
            <summary>
            create and trace new InvalidOperationException
            </summary>
            <param name="message">exception message</param>
            <returns>InvalidOperationException</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.InvalidOperation(System.String,System.Exception)">
            <summary>
            create and trace new InvalidOperationException
            </summary>
            <param name="message">exception message</param>
            <param name="innerException">innerException</param>
            <returns>InvalidOperationException</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.NotSupported(System.String)">
            <summary>
            Create and trace a NotSupportedException with a message
            </summary>
            <param name="message">Message for the exception</param>
            <returns>NotSupportedException</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.ThrowObjectDisposed(System.Type)">
            <summary>
            create and throw a ThrowObjectDisposed with a type name
            </summary>
            <param name="type">type being thrown on</param>
        </member>
        <member name="M:System.Data.Services.Client.Error.HttpHeaderFailure(System.Int32,System.String)">
            <summary>
            create and trace a 
            </summary>
            <param name="errorCode">errorCode</param>
            <param name="message">message</param>
            <returns>InvalidOperationException</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamMissingBoundary">
            <summary>create exception when missing an expected batch boundary</summary>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamContentExpected(System.Data.Services.Client.BatchStreamState)">
            <summary>create exception when the expected content is missing</summary>
            <param name="state">http method operation</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamContentUnexpected(System.Data.Services.Client.BatchStreamState)">
            <summary>create exception when unexpected content is discovered</summary>
            <param name="state">http method operation</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamGetMethodNotSupportInChangeset">
            <summary>create exception when Get operation is specified in changeset</summary>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamInvalidBatchFormat">
            <summary>create exception when invalid batch request is specified</summary>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamInvalidDelimiter(System.String)">
            <summary>create exception when boundary delimiter is not valid</summary>
            <param name="delimiter">boundary delimiter</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamMissingEndChangesetDelimiter">
            <summary>create exception when end changeset boundary delimiter is missing</summary>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamInvalidHeaderValueSpecified(System.String)">
            <summary>create exception when header value specified is not valid</summary>
            <param name="headerValue">headerValue</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamInvalidContentLengthSpecified(System.String)">
            <summary>create exception when content length is not valid</summary>
            <param name="contentLength">contentLength</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamOnlyGETOperationsCanBeSpecifiedInBatch">
            <summary>create exception when CUD operation is specified in batch</summary>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamInvalidOperationHeaderSpecified">
            <summary>create exception when operation header is specified in start of changeset</summary>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamInvalidHttpMethodName(System.String)">
            <summary>create exception when http method name is not valid</summary>
            <param name="methodName">methodName</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamMoreDataAfterEndOfBatch">
            <summary>create exception when more data is specified after end of batch delimiter.</summary>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamInternalBufferRequestTooSmall">
            <summary>internal error where batch stream does do look ahead when read request is smaller than boundary delimiter</summary>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.MethodNotSupported(System.Linq.Expressions.MethodCallExpression)">
            <summary>method not supported</summary>
            <param name="m">method</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.ThrowBatchUnexpectedContent(System.Data.Services.Client.InternalError)">
            <summary>throw an exception because unexpected batch content was encounted</summary>
            <param name="value">internal error</param>
        </member>
        <member name="M:System.Data.Services.Client.Error.ThrowBatchExpectedResponse(System.Data.Services.Client.InternalError)">
            <summary>throw an exception because expected batch content was not encountered</summary>
            <param name="value">internal error</param>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamInvalidMethodHeaderSpecified(System.String)">
            <summary>internal error where the first request header is not of the form: 'MethodName' 'Url' 'Version'</summary>
            <param name="header">actual header value specified in the payload.</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamInvalidHttpVersionSpecified(System.String,System.String)">
            <summary>internal error when http version in batching request is not valid</summary>
            <param name="actualVersion">actual version as specified in the payload.</param>
            <param name="expectedVersion">expected version value.</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamInvalidNumberOfHeadersAtOperationStart(System.String,System.String)">
            <summary>internal error when number of headers at the start of each operation is not 2</summary>
            <param name="header1">valid header name</param>
            <param name="header2">valid header name</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamMissingOrInvalidContentEncodingHeader(System.String,System.String)">
            <summary>internal error Content-Transfer-Encoding is not specified or its value is not 'binary'</summary>
            <param name="headerName">name of the header</param>
            <param name="headerValue">expected value of the header</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamInvalidNumberOfHeadersAtChangeSetStart(System.String,System.String)">
            <summary>internal error number of headers at the start of changeset is not correct</summary>
            <param name="header1">valid header name</param>
            <param name="header2">valid header name</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamMissingContentTypeHeader(System.String)">
            <summary>internal error when content type header is missing</summary>
            <param name="headerName">name of the missing header</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.BatchStreamInvalidContentTypeSpecified(System.String,System.String,System.String,System.String)">
            <summary>internal error when content type header value is invalid.</summary>
            <param name="headerName">name of the header whose value is not correct.</param>
            <param name="headerValue">actual value as specified in the payload</param>
            <param name="mime1">expected value 1</param>
            <param name="mime2">expected value 2</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.InternalError(System.Data.Services.Client.InternalError)">
            <summary>unexpected xml when reading web responses</summary>
            <param name="value">internal error</param>
            <returns>exception to throw</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.ThrowInternalError(System.Data.Services.Client.InternalError)">
            <summary>throw exception for unexpected xml when reading web responses</summary>
            <param name="value">internal error</param>
        </member>
        <member name="M:System.Data.Services.Client.Error.Trace``1(``0)">
            <summary>
            Trace the exception
            </summary>
            <typeparam name="T">type of the exception</typeparam>
            <param name="exception">exception object to trace</param>
            <returns>the exception parameter</returns>
        </member>
        <member name="M:System.Data.Services.Client.Error.ArgumentNull(System.String)">
            <summary>
            The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Error.ArgumentOutOfRange(System.String)">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Error.NotImplemented">
            <summary>
            The exception that is thrown when the author has yet to implement the logic at this point in the program. This can act as an exception based TODO tag.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Error.NotSupported">
            <summary>
            The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality. 
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.InternalError">
            <summary>unique numbers for repeated error messages for unlikely, unactionable exceptions</summary>
        </member>
        <member name="T:System.Data.Services.Client.MaterializeAtom">
            <summary>
            materialize objects from an application/atom+xml stream
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.MergeOptionValue">
            <summary>MergeOption captured from context so its static for the entire materialization</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.AtomNameSpaces">
            <summary>atom namespace</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.CategoryElementName">
            <summary>category element</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.IdElementName">
            <summary>id element</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.LinkElementName">
            <summary>link element</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.SchemeAttributeName">
            <summary>scheme attribute</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.TermAttributeName">
            <summary>term attribute</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.LinkRelationAttributeName">
            <summary>rel attribute</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.HRefAttributeName">
            <summary>href attribute</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.ignoreMissingProperties">
            <summary>Options when deserializing properties to the target type.</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.context">
            <summary>Backreference to the context to allow type resolution.</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.dataNamespace">
            <summary>DataNamespace captured from context so its static for the entire materialization</summary>
            <remarks>reference equality is important here</remarks>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.elementType">
            <summary>base type of the object to create from the stream.</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.expectingSingleValue">
            <summary>when materializing a known type (like string)</summary>
            <remarks>&lt;property&gt; text-value &lt;/property&gt;</remarks>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.links">
            <summary>list of links to add</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.reader">
            <summary>source reader (may be running on top of a buffer or be the real reader)</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.current">
            <summary>untyped current object</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.inserting">
            <summary>object being updated</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.identityStack">
            <summary>identity of new objects and associated etag per enumerator.MoveNext()</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.version">
            <summary>debugging tool, # calls to ReadNext()</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.calledGetEnumerator">
            <summary>has GetEnumerator been called?</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.stackedReaders">
            <summary>stack of readers used when buffering intermediate entries (to create XElements and fire events)</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.countValue">
            <summary>The count tag's value, if requested</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.writer">
            <summary>
            output writer, set using reflection
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.#ctor(System.Data.Services.Client.DataServiceContext,System.Xml.XmlReader,System.Type,System.Data.Services.Client.MergeOption)">
            <summary>
            constructor
            </summary>
            <param name="context">originating context</param>
            <param name="reader">reader</param>
            <param name="elementType">element base type</param>
            <param name="mergeOption">merge option to use for this materialization pass</param>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.#ctor">
            <summary>
            Private internal constructor used for creating empty wrapper.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.Dispose">
            <summary>
            dispose
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.GetEnumerator">
            <summary>
            as IEnumerable
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.MoveNext">
            <summary>
            create the next object from the stream
            </summary>
            <returns>false if stream is finished</returns>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.System#Collections#IEnumerator#Reset">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown</exception>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.CreateWrapper(System.Collections.IEnumerable)">
            <summary>
             Creates materializer for results
            </summary>
            <param name="results">the results to wrap</param>
            <returns>a new materializer</returns>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.SetInsertingObject(System.Object)">
            <summary>set the inserted object expected in the response</summary>
            <param name="addedObject">object being inserted that the response is looking for</param>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.SkipToEnd(System.String,System.String)">
            <summary>
            Skips the children of the current node.
            </summary>
            <param name="localName">local name of the node we search to</param>
            <param name="namespaceURI">namespace of the node we search to</param>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.FlipVersion">
            <summary>
            Flips the version to indicate the end of read operations
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.CountValue">
            <summary>
            The count tag's value, if requested
            </summary>
            <returns>The count value returned from the server</returns>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.CheckGetEnumerator">
            <summary>verify the GetEnumerator can only be called once</summary>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.TryReadCount">
            <summary>
            Try read the m2:count tag in the feed
            </summary>
            <returns>true if the operation was sucessful</returns>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.TryReadCount(System.Xml.Linq.XElement)">
            <summary>
            Try read the m2:count tag in the feed
            </summary>
            <param name="element">The xml element that contains the tag</param>
            <returns>true if the operation was sucessful</returns>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.ReadNext(System.Data.Services.Client.ClientType,System.Type,System.Data.Services.Client.MaterializeAtom.AtomParseState,System.Data.Services.Client.EntityStates@,System.Object@,System.Data.Services.Client.EpmReaderState)">
            <summary>
            build up a single object result
            </summary>
            <param name="currentType">what is the nested element type (collection support)</param>
            <param name="expectedType">what is the expected base type for current object</param>
            <param name="atom">what is the initial parse state</param>
            <param name="entityState">entity state</param>
            <param name="currentValue">current object being populated</param>
            <param name="readerState">State of the epm content reader</param>
            <returns>true if not at end of object</returns>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.ReadNextInternal(System.Data.Services.Client.ClientType,System.Type,System.Data.Services.Client.MaterializeAtom.AtomParseState,System.Data.Services.Client.EntityStates@,System.Object@,System.Data.Services.Client.EpmReaderState)">
            <summary>
            build up a single object result
            </summary>
            <param name="currentType">what is the nested element type (collection support)</param>
            <param name="expectedType">what is the expected base type for current object</param>
            <param name="atom">what is the initial parse state</param>
            <param name="entityState">entity state</param>
            <param name="currentValue">current object being populated</param>
            <param name="readerState">State of the epm content reader</param>
            <returns>true if not at end of object</returns>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.PerformMergeOptionCheck(System.Data.Services.Client.EntityStates)">
            <summary>
            Checks the merge options and decides whether to read the incoming stream for properties for current object or not
            </summary>
            <param name="entityState">State of the current object</param>
            <returns>true if merge option disallows property updates, false otherwise</returns>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.ResolveOrCreateInstance(System.Data.Services.Client.ClientType,System.Uri,System.Uri,System.String,System.Object@,System.Data.Services.Client.EntityStates@)">
            <summary>
            create an instance and associate its identity for callstack identity resolution
            </summary>
            <param name="type">type to create</param>
            <param name="identity">identity of instance</param>
            <param name="editLink">editLink of instance</param>
            <param name="etag">etag of identity</param>
            <param name="currentValue">current value instance</param>
            <param name="state">entity state</param>
            <returns>new instance of type</returns>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.PushBufferedReader(System.Xml.Linq.XElement@)">
            <summary>
            Read subtree into an XElement, push the reader into the stack and set the current
            reader to a reader on top of the XElement
            </summary>
            <param name="currentEntry">Current XElement being processed</param>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.FireEventAndPopBufferedReader(System.Object,System.Xml.Linq.XElement@)">
            <summary>
            Fire the reader event with the current buffered subtree reader and then pop
            the next reader in the stack
            </summary>
            <param name="currentValue">Current .NET object being read</param>
            <param name="currentEntry">Buffered entry with data from the input stream</param>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.ReadTypeAttribute(System.Type)">
            <summary>
            Gets the type attribte and resolves the type from the current XmlReader.
            </summary>
            <param name="expectedType">expected base type</param>
            <returns>resolved type</returns>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.ReadTypeAttribute(System.Xml.Linq.XElement,System.Type,System.Uri@,System.Uri@)">
            <summary>
            Gets the type attribte and resolves the type from the specified <paramref name="entryElement"/>.
            </summary>
            <param name="entryElement">XML element for the ATOM entry.</param>
            <param name="expectedType">expected base type</param>
            <param name="idUri">Uri of id</param>
            <param name="editLinkUri">Edit link uri</param>
            <returns>resolved type</returns>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.ReadElementString(System.Boolean)">
            <summary>
            it can concatenate multiple adjacent text and CDATA blocks
            ignores comments and whitespace
            will leave reader on EndElement
            </summary>
            <param name="checkNullAttribute">check for null attribute or not</param>
            <returns>text contained in the element. An null string if the element was empty</returns>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.ReadChildElement(System.String,System.String)">
            <summary>Move to top-level child element of the expected type</summary>
            <param name="localName">localName of expected child content-node</param>
            <param name="namespaceUri">namespaceUri of expected child content-node</param>
            <returns>true if moved to expected child content node</returns>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.CheckAgainstFailure">
            <summary>throw if current element is Exception</summary>
            <exception cref="T:System.InvalidOperationException">if current element is exception</exception>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.ReadErrorMessage">
            <summary>With the reader positioned on an 'error' element, reads the text of the 'message' child.</summary>
            <returns>The text of the 'message' child element, empty if not found.</returns>
        </member>
        <member name="P:System.Data.Services.Client.MaterializeAtom.Current">
            <summary>
            untyped current object property
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.MaterializeAtom.EmptyResults">
            <summary>
            A materializer for empty results
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.MaterializeAtom.IsEmptyResults">
            <summary>
            Returns true, if the materialize atom has empty results, because of
            IgnoreResourceNotFoundException flag set in context
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.MaterializeAtom.AtomParseState">
            <summary>atom parser state machine positions</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.AtomParseState.None">
            <summary>None</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.AtomParseState.Feed">
            <summary>Feed</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.AtomParseState.Entry">
            <summary>Entry</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.AtomParseState.Content">
            <summary>Content</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.AtomParseState.Complex">
            <summary>Complex</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.AtomParseState.PropertyContent">
            <summary>Property</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.AtomParseState.PropertyComplex">
            <summary>Property</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.AtomParseState.LinkFeed">
            <summary>LinkFeed</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.AtomParseState.LinkEntry">
            <summary>LinkEntry</summary>
        </member>
        <member name="T:System.Data.Services.Client.MaterializeAtom.EntityWithTag">
            <summary>
            hold information about a newly constructed object until the very end of MoveNext
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.EntityWithTag.Entity">
            <summary>entity being attached</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.EntityWithTag.EditLink">
            <summary>uri to edit the entity</summary>
            <remarks>&lt;atom:link rel="edit" href="editLink" /&gt;</remarks>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.EntityWithTag.ETag">
            <summary>etag of entity being attached</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.EntityWithTag.State">
            <summary>state of the entitiy</summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.EntityWithTag.AttachToContext">
            <summary>should we actually attach the entity, i.e. false if OpenType</summary>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.EntityWithTag.#ctor(System.Object,System.Uri,System.String,System.Data.Services.Client.EntityStates,System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="entity">entity</param>
            <param name="editLink">editLink</param>
            <param name="etag">etag</param>
            <param name="state">state</param>
            <param name="attach">attach</param>
        </member>
        <member name="T:System.Data.Services.Client.MaterializeAtom.ResultsWrapper">
            <summary>
            Private type to wrap results and make it look like standard materialized results.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.MaterializeAtom.ResultsWrapper.results">
            <summary> The results to wrap </summary>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.ResultsWrapper.#ctor(System.Collections.IEnumerable)">
            <summary>
            Creates a wrapper for raw results
            </summary>
            <param name="results">the results to wrap</param>
        </member>
        <member name="M:System.Data.Services.Client.MaterializeAtom.ResultsWrapper.GetEnumerator">
            <summary>
            Gets Enumerator for wrapped results.
            </summary>
            <returns>IEnumerator for results</returns>
        </member>
        <member name="T:System.Data.Services.Client.MediaEntryAttribute">
            <summary>
            This class marks a type that represents an Astoria client entity
            such that the Astoria client will treat it as a media entry 
            according to ATOM's "media link entry" concept.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.MediaEntryAttribute.mediaMemberName">
            <summary>Name of the member that contains the data for the media entry</summary>
        </member>
        <member name="M:System.Data.Services.Client.MediaEntryAttribute.#ctor(System.String)">
            <summary>
            Creates a new MediaEntryAttribute attribute and sets the name
            of the member that contains the actual data of the media entry
            (e.g. a byte[] containing a picture, a string containing HTML, etc.)
            </summary>
            <param name="mediaMemberName">Name of the member that contains the data for the media entry</param>
        </member>
        <member name="P:System.Data.Services.Client.MediaEntryAttribute.MediaMemberName">
            <summary>Name of the member that contains the data for the media entry</summary>
        </member>
        <member name="T:System.Data.Services.Client.MergeOption">
            <summary>
            Used to specify a value synchronization strategy. 
            </summary>
            <remarks>
            Equivalent to System.Data.dll!System.Data.LoadOption
            Equivalent to System.Data.Linq.dll!System.Data.Linq.RefreshMode
            Equivalent to System.Data.Entity.dll!System.Data.Objects.MergeOption
            </remarks>
        </member>
        <member name="F:System.Data.Services.Client.MergeOption.AppendOnly">
            <summary>
            No current values are modified.
            </summary>
            <remarks>
            Equivalent to System.Data.Objects.MergeOption.AppendOnly
            Equivalent to System.Data.Linq.RefreshMode.KeepCurrentValues
            </remarks>
        </member>
        <member name="F:System.Data.Services.Client.MergeOption.OverwriteChanges">
            <summary>
            All current values are overwritten with current store values,
            regardless of whether they have been changed.
            </summary>
            <remarks>
            Equivalent to System.Data.LoadOption.OverwriteChanges
            Equivalent to System.Data.Objects.MergeOption.OverwriteChanges
            Equivalent to System.Data.Linq.RefreshMode.OverwriteCurrentValues
            </remarks>
        </member>
        <member name="F:System.Data.Services.Client.MergeOption.PreserveChanges">
            <summary>
            Current values that have been changed are not modified, but
            any unchanged values are updated with the current store
            values.  No changes are lost in this merge.
            </summary>
            <remarks>
            Equivalent to System.Data.LoadOption.PreserveChanges
            Equivalent to System.Data.Objects.MergeOption.PreserveChanges
            Equivalent to System.Data.Linq.RefreshMode.KeepChanges
            </remarks>
        </member>
        <member name="F:System.Data.Services.Client.MergeOption.NoTracking">
            <summary>
            Equivalent to System.Data.Objects.MergeOption.NoTracking
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.MimeTypePropertyAttribute">
            <summary>
            This attribute indicates another property in the same type that
            contains the MIME type that should be used for the data contained
            in the property this attribute is applied to.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.MimeTypePropertyAttribute.dataPropertyName">
            <summary>The name of the property that contains the data</summary>
        </member>
        <member name="F:System.Data.Services.Client.MimeTypePropertyAttribute.mimeTypePropertyName">
            <summary>The name of the property that contains the mime type</summary>
        </member>
        <member name="M:System.Data.Services.Client.MimeTypePropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of this attribute pointing to a particular 
            property to be used for the MIME type
            </summary>
            <param name="dataPropertyName">Name of the property holding the data</param>
            <param name="mimeTypePropertyName">Name of the property holding the MIME type</param>
        </member>
        <member name="P:System.Data.Services.Client.MimeTypePropertyAttribute.DataPropertyName">
            <summary>The name of the property that contains the data.</summary>
        </member>
        <member name="P:System.Data.Services.Client.MimeTypePropertyAttribute.MimeTypePropertyName">
            <summary>The name of the property that contains the mime type</summary>
        </member>
        <member name="T:System.Data.Services.Client.EntityDescriptor">
            <summary>
            represents the cached entity
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityDescriptor.entity">
            <summary>entity</summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityDescriptor.etag">
            <summary>entity tag</summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityDescriptor.parent">
            <summary>Parent resource in case of AddRelatedObject</summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityDescriptor.parentProperty">
            <summary>Parent resource property to which this node is linked</summary>
        </member>
        <member name="M:System.Data.Services.Client.EntityDescriptor.#ctor(System.Object,System.Object,System.String,System.String,System.Data.Services.Client.EntityStates)">
            <summary>
            constructor
            </summary>
            <param name="entity">entity</param>
            <param name="parent">parent entity</param>
            <param name="parentProperty">Parent entity property to which this entity is linked</param>
            <param name="etag">etag</param>
            <param name="state">entity state</param>
        </member>
        <member name="P:System.Data.Services.Client.EntityDescriptor.Entity">
            <summary>entity</summary>
        </member>
        <member name="P:System.Data.Services.Client.EntityDescriptor.ETag">
            <summary>etag</summary>
        </member>
        <member name="P:System.Data.Services.Client.EntityDescriptor.Parent">
            <summary>Parent entity</summary>
        </member>
        <member name="P:System.Data.Services.Client.EntityDescriptor.ParentProperty">
            <summary>Parent entity property to which this entity is linked</summary>
        </member>
        <member name="T:System.Data.Services.Client.EntityStates">
            <summary>
            Describes the insert/update/delete state of an entity or link.
            </summary>
            <remarks>
            Deleting an inserted resource will detach it.
            After SaveChanges, deleted resources will become detached and Added &amp; Modified resources will become unchanged.
            </remarks>
        </member>
        <member name="F:System.Data.Services.Client.EntityStates.Detached">
            <summary>
            The resource is not tracked by the context.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityStates.Unchanged">
            <summary>
            The resource is tracked by a context with no changes.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityStates.Added">
            <summary>
            The resource is tracked by a context for insert.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityStates.Deleted">
            <summary>
            The resource is tracked by a context for deletion.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.EntityStates.Modified">
            <summary>
            The resource is tracked by a context for update.
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.SaveChangesOptions">
            <summary>
            options when saving changes
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.SaveChangesOptions.None">
            <summary>default option, using multiple requests to the server stopping on the first failure</summary>
        </member>
        <member name="F:System.Data.Services.Client.SaveChangesOptions.Batch">
            <summary>save the changes in a single batch request</summary>
        </member>
        <member name="F:System.Data.Services.Client.SaveChangesOptions.ContinueOnError">
            <summary>save all the changes using multiple requests</summary>
        </member>
        <member name="F:System.Data.Services.Client.SaveChangesOptions.ReplaceOnUpdate">
            <summary>Use replace semantics when doing update.</summary>
        </member>
        <member name="T:System.Data.Services.Client.SendingRequestEventArgs">
            <summary>
            Event args for the event fired before executing a web request. Gives a 
            chance to customize or replace the request object to be used.
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.SendingRequestEventArgs.request">
            <summary>The web request reported through this event</summary>
        </member>
        <member name="F:System.Data.Services.Client.SendingRequestEventArgs.requestHeaders">
            <summary>The request header collection.</summary>
        </member>
        <member name="M:System.Data.Services.Client.SendingRequestEventArgs.#ctor(System.Net.WebRequest,System.Net.WebHeaderCollection)">
            <summary>
            Constructor
            </summary>
            <param name="request">The request reported through this event</param>
            <param name="requestHeaders">The request header collection.</param>
        </member>
        <member name="P:System.Data.Services.Client.SendingRequestEventArgs.Request">
            <summary>The web request reported through this event. The handler may modify or replace it.</summary>
        </member>
        <member name="P:System.Data.Services.Client.SendingRequestEventArgs.RequestHeaders">
            <summary>The request header collection.</summary>
        </member>
        <member name="T:System.Data.Services.Client.Util">
            <summary>
            static utility function
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.Util.VersionSuffix">
            <summary>
            String Suffix on outgoing version numbers
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.Util.DataServiceVersionEmpty">
            <summary>
            Empty Data Service Version - represents a blank DSV header
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.Util.DataServiceVersion1">
            <summary>
            Data Service Version 1
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.Util.DataServiceVersion2">
            <summary>
            Data Service Version 2
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.Util.MaxResponseVersion">
            <summary>
            Default maximum data service version this client can handle
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.Util.ForwardSlash">
            <summary>forward slash char array for triming uris</summary>
        </member>
        <member name="F:System.Data.Services.Client.Util.whitespaceForTracing">
            <summary>
            static char[] for indenting whitespace when tracing xml
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Util.DebugInjectFault(System.String)">
            <summary>
            DebugInjectFault is a test hook to inject faults in specific locations. The string is the ID for the location
            </summary>
            <param name="state">The injector state parameter</param>
        </member>
        <member name="M:System.Data.Services.Client.Util.ReferenceIdentity(System.Uri)">
            <summary>
            ReferenceIdentity is a test hook to help verify we dont' use identity instead of editLink
            </summary>
            <param name="uri">The uri argument</param>
            <returns>Returned value by the referenceIdentity hook</returns>
        </member>
        <member name="M:System.Data.Services.Client.Util.DereferenceIdentity(System.Uri)">
            <summary>
            DereferenceIdentity is a test hook to help verify we dont' use identity instead of editLink
            </summary>
            <param name="uri">The uri argument</param>
            <returns>returned value by the dereferenceIdentity hook</returns>
        </member>
        <member name="M:System.Data.Services.Client.Util.CheckArgumentNull``1(``0,System.String)">
            <summary>
            Checks the argument value for null and throw ArgumentNullException if it is null
            </summary>
            <typeparam name="T">type of the argument to prevent accidental boxing of value types</typeparam>
            <param name="value">argument whose value needs to be checked</param>
            <param name="parameterName">name of the argument</param>
            <exception cref="T:System.ArgumentNullException">if value is null</exception>
            <returns>value</returns>
        </member>
        <member name="M:System.Data.Services.Client.Util.CheckArgumentNotEmpty(System.String,System.String)">
            <summary>
            Checks the string value is not empty
            </summary>
            <param name="value">value to check </param>
            <param name="parameterName">parameterName of public function</param>
            <exception cref="T:System.ArgumentNullException">if value is null</exception>
            <exception cref="T:System.ArgumentException">if value is empty</exception>
        </member>
        <member name="M:System.Data.Services.Client.Util.CheckArgumentNotEmpty``1(``0[],System.String)">
            <summary>
            Checks the array value is not empty
            </summary>
            <typeparam name="T">type of the argument to prevent accidental boxing of value types</typeparam>
            <param name="value">value to check </param>
            <param name="parameterName">parameterName of public function</param>
            <exception cref="T:System.ArgumentNullException">if value is null</exception>
            <exception cref="T:System.ArgumentException">if value is empty or contains null elements</exception>
        </member>
        <member name="M:System.Data.Services.Client.Util.CheckEnumerationValue(System.Data.Services.Client.MergeOption,System.String)">
            <summary>
            Validate MergeOption
            </summary>
            <param name="value">option to validate</param>
            <param name="parameterName">name of the parameter being validated</param>
            <exception cref="T:System.ArgumentOutOfRangeException">if option is not valid</exception>
            <returns>option</returns>
        </member>
        <member name="M:System.Data.Services.Client.Util.GetWhitespaceForTracing(System.Int32)">
            <summary>
            get char[] for indenting whitespace when tracing xml
            </summary>
            <param name="depth">how many characters to trace</param>
            <returns>char[]</returns>
        </member>
        <member name="M:System.Data.Services.Client.Util.CreateUri(System.String,System.UriKind)">
            <summary>new Uri(string uriString, UriKind uriKind)</summary>
            <param name="value">value</param>
            <param name="kind">kind</param>
            <returns>new Uri(value, kind)</returns>
        </member>
        <member name="M:System.Data.Services.Client.Util.CreateUri(System.Uri,System.Uri)">
            <summary>new Uri(Uri baseUri, Uri requestUri)</summary>
            <param name="baseUri">baseUri</param>
            <param name="requestUri">relativeUri</param>
            <returns>new Uri(baseUri, requestUri)</returns>
        </member>
        <member name="M:System.Data.Services.Client.Util.ContainsReference``1(``0[],``0)">
            <summary>
            does the array contain the value reference
            </summary>
            <typeparam name="T">generic type</typeparam>
            <param name="array">array to search</param>
            <param name="value">value being looked for</param>
            <returns>true if value reference was found in array</returns>
        </member>
        <member name="M:System.Data.Services.Client.Util.Dispose``1(``0@)">
            <summary>dispose of the object and set the reference to null</summary>
            <typeparam name="T">type that implements IDisposable</typeparam>
            <param name="disposable">object to dispose</param>
        </member>
        <member name="M:System.Data.Services.Client.Util.Dispose``1(``0)">
            <summary>dispose of the object</summary>
            <typeparam name="T">type that implements IDisposable</typeparam>
            <param name="disposable">object to dispose</param>
        </member>
        <member name="M:System.Data.Services.Client.Util.IndexOfReference``1(``0[],``0)">
            <summary>
            index of value reference in the array
            </summary>
            <typeparam name="T">generic type</typeparam>
            <param name="array">array to search</param>
            <param name="value">value being looked for</param>
            <returns>index of value reference in the array else (-1)</returns>
        </member>
        <member name="M:System.Data.Services.Client.Util.DoNotHandleException(System.Exception)">
            <summary>Checks whether the exception should not be handled.</summary>
            <param name="ex">exception to test</param>
            <returns>true if the exception should not be handled</returns>
        </member>
        <member name="M:System.Data.Services.Client.Util.NullCheck``1(``0,System.Data.Services.Client.InternalError)">
            <summary>validate value is non-null</summary>
            <typeparam name="T">type of value</typeparam>
            <param name="value">value</param>
            <param name="errorcode">error code to throw if null</param>
            <returns>the non-null value</returns>
        </member>
        <member name="M:System.Data.Services.Client.Util.AreSame(System.String,System.String)">
            <summary>are the two values the same reference</summary>
            <param name="value1">value1</param>
            <param name="value2">value2</param>
            <returns>true if they are the same reference</returns>
        </member>
        <member name="M:System.Data.Services.Client.Util.AreSame(System.Xml.XmlReader,System.String,System.String)">
            <summary>is the reader on contentNode where the localName and namespaceUri match</summary>
            <param name="reader">reader</param>
            <param name="localName">localName</param>
            <param name="namespaceUri">namespaceUri</param>
            <returns>true if localName and namespaceUri match reader current element</returns>
        </member>
        <member name="M:System.Data.Services.Client.Util.DoesNullAttributeSayTrue(System.Xml.XmlReader)">
            <summary>
            check the atom:null="true" attribute
            </summary>
            <param name="reader">XmlReader</param>
            <returns>true of null is true</returns>
        </member>
        <member name="M:System.Data.Services.Client.Util.TypeAllowsNull(System.Type)">
            <summary>Checks whether the specified <paramref name='type' /> can be assigned null.</summary>
            <param name='type'>Type to check.</param>
            <returns>true if type is a reference type or a Nullable type; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Services.Client.Util.GetTypeAllowingNull(System.Type)">
            <summary>Gets a type for <paramref name="type"/> that allows null values.</summary>
            <param name="type">Type to base resulting type on.</param>
            <returns>
            <paramref name="type"/> if it's a reference or Nullable&lt;&gt; type;
            Nullable&lt;<paramref name="type"/>&gt; otherwise.
            </returns>
        </member>
        <member name="M:System.Data.Services.Client.Util.TraceElement(System.Xml.XmlReader,System.IO.TextWriter)">
            <summary>
            trace Element node
            </summary>
            <param name="reader">XmlReader</param>
            <param name="writer">TextWriter</param>
        </member>
        <member name="M:System.Data.Services.Client.Util.TraceEndElement(System.Xml.XmlReader,System.IO.TextWriter,System.Boolean)">
            <summary>
            trace EndElement node
            </summary>
            <param name="reader">XmlReader</param>
            <param name="writer">TextWriter</param>
            <param name="indent">indent or not</param>
        </member>
        <member name="M:System.Data.Services.Client.Util.TraceText(System.IO.TextWriter,System.String)">
            <summary>
            trace string value
            </summary>
            <param name="writer">TextWriter</param>
            <param name="value">value</param>
        </member>
        <member name="M:System.Data.Services.Client.Util.IsNullableType(System.Type)">
            <summary>Checks whether the specified type is a generic nullable type.</summary>
            <param name="type">Type to check.</param>
            <returns>true if <paramref name="type"/> is nullable; false otherwise.</returns>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceContext">
            <summary>
            context
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.NoIdentity">
            <summary>represents identity for a resource without one</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.NoEntitySet">
            <summary>represents entityset for a resource without one</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.NoETag">
            <summary>represents empty etag</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.NewLine">
            <summary>cache NewLine string</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.baseUri">
            <summary>base uri prepended to relative uri</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.baseUriWithSlash">
            <summary>base uri with guranteed trailing slash</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.credentials">
            <summary>Authentication interface for retrieving credentials for Web client authentication.</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.dataNamespace">
            <summary>Override the namespace used for the data parts of the ATOM entries</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.resolveName">
            <summary>resolve type from a typename</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.resolveType">
            <summary>resolve typename from a type</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.timeout">
            <summary>time-out value in seconds, 0 for default</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.postTunneling">
            <summary>whether to use post-tunneling for PUT/DELETE</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.ignoreMissingProperties">
            <summary>Options when deserializing properties to the target type.</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.mergeOption">
            <summary>Used to specify a value synchronization strategy.</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.saveChangesDefaultOptions">
            <summary>Default options to be used while doing savechanges.</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.typeScheme">
            <summary>Override the namespace used for the scheme in the category for ATOM entries.</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.ignoreResourceNotFoundException">
            <summary>Client will ignore 404 resource not found exception and return an empty set when this is set to true</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.nextChange">
            <summary>change order</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.objectToResource">
            <summary>Set of tracked resources by ResourceBox.Resource</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.identityToResource">
            <summary>Set of tracked resources by ResourceBox.Identity</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.bindings">
            <summary>Set of tracked bindings by ResourceBox.Identity</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.applyingChanges">
            <summary>
            A flag indicating if the data service context is applying changes 
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.#ctor(System.Uri)">
            <summary>
            Instantiates a new context with the specified <paramref name="serviceRoot"/> Uri.
            The library expects the Uri to point to the root of a data service,
            but does not issue a request to validate it does indeed identify the root of a service.
            If the Uri does not identify the root of the service, the behavior of the client library is undefined.    
            </summary>
            <param name="serviceRoot">
            An absolute, well formed http or https URI without a query or fragment which identifies the root of a data service.
            A Uri provided with a trailing slash is equivalent to one without such a trailing character
            </param>
            <exception cref="T:System.ArgumentException">if the <paramref name="serviceRoot"/> is not an absolute, well formed http or https URI without a query or fragment</exception>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="serviceRoot"/> is null</exception>
            <remarks>
            With Silverlight, the <paramref name="serviceRoot"/> can be a relative Uri
            that will be combined with System.Windows.Browser.HtmlPage.Document.DocumentUri.
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.GetEntityDescriptor(System.Object)">
            <summary>Gets the entity descriptor corresponding to a particular entity</summary>
            <param name="entity">Entity for which to find the entity descriptor</param>
            <returns>EntityDescriptor for the <paramref name="entity"/> or null if not found</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.GetLinkDescriptor(System.Object,System.String,System.Object)">
            <summary>
            Gets the link descriptor corresponding to a particular link b/w source and target objects
            </summary>
            <param name="source">Source entity</param>
            <param name="sourceProperty">Property of <paramref name="source"/></param>
            <param name="target">Target entity</param>
            <returns>LinkDescriptor for the relationship b/w source and target entities or null if not found</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.CancelRequest(System.IAsyncResult)">
            <summary>Best effort to abort the outstand request</summary>
            <param name="asyncResult">the current async request to cancel</param>
            <remarks>DataServiceContext is not safe to use until asyncResult.IsCompleted is true.</remarks>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.CreateQuery``1(System.String)">
            <summary>
            create a query based on (BaseUri + relativeUri)
            </summary>
            <typeparam name="T">type of object to materialize</typeparam>
            <param name="entitySetName">entitySetName</param>
            <returns>composible, enumerable query object</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.GetMetadataUri">
            <summary>
            Given the base URI, resolves the location of the metadata endpoint for the service by using an HTTP OPTIONS request or falling back to convention ($metadata)
            </summary>
            <returns>Uri to retrieve metadata from</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.BeginLoadProperty(System.Object,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begin getting response to load a collection or reference property.
            </summary>
            <remarks>actually doesn't modify the property until EndLoadProperty is called.</remarks>
            <param name="entity">entity</param>
            <param name="propertyName">name of collection or reference property to load</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">The state object for this request.</param>
            <returns>An IAsyncResult that references the asynchronous request for a response.</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.EndLoadProperty(System.IAsyncResult)">
            <summary>
            Load a collection or reference property from a async result.
            </summary>
            <param name="asyncResult">async result generated by BeginLoadProperty</param>
            <returns>QueryOperationResponse instance containing information about the response.</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.LoadProperty(System.Object,System.String)">
             <summary>
             Load a collection or reference property.
             </summary>
             <remarks>
             An entity in detached or added state will throw an InvalidOperationException
             since there is nothing it can load from the server.
             
             An entity in unchanged or modified state will load its collection or
             reference elements as unchanged with unchanged bindings.
            
             An entity in deleted state will loads its collection or reference elements
             in the unchanged state with bindings in the deleted state.
             </remarks>
             <param name="entity">entity</param>
             <param name="propertyName">name of collection or reference property to load</param>
             <returns>QueryOperationResponse instance containing information about the response.</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.BeginExecuteBatch(System.AsyncCallback,System.Object,System.Data.Services.Client.DataServiceRequest[])">
            <summary>
            Batch multiple queries into a single async request.
            </summary>
            <param name="callback">User callback when results from batch are available.</param>
            <param name="state">user state in IAsyncResult</param>
            <param name="queries">queries to batch</param>
            <returns>async result object</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.EndExecuteBatch(System.IAsyncResult)">
            <summary>
            Call when results from batch are desired.
            </summary>
            <param name="asyncResult">async result object returned from BeginExecuteBatch</param>
            <returns>batch response from which query results can be enumerated.</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.ExecuteBatch(System.Data.Services.Client.DataServiceRequest[])">
            <summary>
            Batch multiple queries into a single request.
            </summary>
            <param name="queries">queries to batch</param>
            <returns>batch response from which query results can be enumerated.</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.BeginExecute``1(System.Uri,System.AsyncCallback,System.Object)">
            <summary>begin the execution of the request uri</summary>
            <typeparam name="TElement">element type of the result</typeparam>
            <param name="requestUri">request to execute</param>
            <param name="callback">User callback when results from execution are available.</param>
            <param name="state">user state in IAsyncResult</param>
            <returns>async result object</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.EndExecute``1(System.IAsyncResult)">
            <summary>
            Call when results from batch are desired.
            </summary>
            <typeparam name="TElement">element type of the result</typeparam>
            <param name="asyncResult">async result object returned from BeginExecuteBatch</param>
            <returns>batch response from which query results can be enumerated.</returns>
            <exception cref="T:System.ArgumentNullException">asyncResult is null</exception>
            <exception cref="T:System.ArgumentException">asyncResult did not originate from this instance or End was previously called</exception>
            <exception cref="T:System.InvalidOperationException">problem in request or materializing results of query into objects</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.Execute``1(System.Uri)">
            <summary>
            Execute the requestUri
            </summary>
            <typeparam name="TElement">element type of the result</typeparam>
            <param name="requestUri">request uri to execute</param>
            <returns>batch response from which query results can be enumerated.</returns>
            <exception cref="T:System.ArgumentNullException">null requestUri</exception>
            <exception cref="T:System.ArgumentException">!BaseUri.IsBaseOf(requestUri)</exception>
            <exception cref="T:System.InvalidOperationException">problem materializing results of query into objects</exception>
            <exception cref="T:System.Net.WebException">failure to get response for requestUri</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)">
            <summary>
            submit changes to the server in a single change set
            </summary>
            <param name="callback">callback</param>
            <param name="state">state</param>
            <returns>async result</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.Data.Services.Client.SaveChangesOptions,System.AsyncCallback,System.Object)">
            <summary>
            begin submitting changes to the server
            </summary>
            <param name="options">options on how to save changes</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">The state object for this request.</param>
            <returns>An IAsyncResult that references the asynchronous request for a response.</returns>
            <remarks>
            BeginSaveChanges will asynchronously attach identity Uri returned by server to sucessfully added entites.
            EndSaveChanges will apply updated values to entities, raise ReadingEntity events and change entity states.
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.EndSaveChanges(System.IAsyncResult)">
            <summary>
            done submitting changes to the server
            </summary>
            <param name="asyncResult">The pending request for a response. </param>
            <returns>changeset response</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveChanges">
            <summary>
            submit changes to the server in a single change set
            </summary>
            <returns>changeset response</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveChanges(System.Data.Services.Client.SaveChangesOptions)">
            <summary>
            submit changes to the server
            </summary>
            <param name="options">options on how to save changes</param>
            <returns>changeset response</returns>
            <remarks>
            MergeOption.NoTracking is tricky but supported because to insert a relationship we need the identity
            of both ends and if one end was an inserted object then its identity is attached, but may not match its value
            
            This initial implementation does not do batching.
            Things are sent to the server in the following order
            1) delete relationships
            2) delete objects
            3) update objects
            4) insert objects
            5) insert relationship
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.AddLink(System.Object,System.String,System.Object)">
            <summary>
            Notifies the context that a new link exists between the <paramref name="source"/> and <paramref name="target"/> objects
            and that the link is represented via the source.<paramref name="sourceProperty"/> which is a collection.
            The context adds this link to the set of newly created links to be sent to
            the data service on the next call to SaveChanges().
            </summary>
            <remarks>
            Links are one way relationships.  If a back pointer exists (ie. two way association),
            this method should be called a second time to notify the context object of the second link.
            </remarks>
            <param name="source">Source object participating in the link.</param>
            <param name="sourceProperty">The name of the property on the source object which represents a link from the source to the target object.</param>
            <param name="target">The target object involved in the link which is bound to the source object also specified in this call.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/>, <paramref name="sourceProperty"/> or <paramref name="target"/> are null.</exception>
            <exception cref="T:System.InvalidOperationException">if link already exists</exception>
            <exception cref="T:System.InvalidOperationException">if source or target are detached</exception>
            <exception cref="T:System.InvalidOperationException">if source or target are in deleted state</exception>
            <exception cref="T:System.InvalidOperationException">if sourceProperty is not a collection</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.AttachLink(System.Object,System.String,System.Object)">
            <summary>
            Notifies the context to start tracking the specified link between source and the specified target entity.
            </summary>
            <param name="source">Source object participating in the link.</param>
            <param name="sourceProperty">The name of the property on the source object which represents a link from the source to the target object.</param>
            <param name="target">The target object involved in the link which is bound to the source object also specified in this call.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/>, <paramref name="sourceProperty"/> or <paramref name="target"/> are null.</exception>
            <exception cref="T:System.InvalidOperationException">if binding already exists</exception>
            <exception cref="T:System.InvalidOperationException">if source or target are in added state</exception>
            <exception cref="T:System.InvalidOperationException">if source or target are in deleted state</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.DetachLink(System.Object,System.String,System.Object)">
            <summary>
            Removes the specified link from the list of links being tracked by the context.
            Any link being tracked by the context, regardless of its current state, can be detached.   
            </summary>
            <param name="source">Source object participating in the link.</param>
            <param name="sourceProperty">The name of the property on the source object which represents a link from the source to the target object.</param>
            <param name="target">The target object involved in the link which is bound to the source object also specified in this call.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> or <paramref name="sourceProperty"/> are null.</exception>
            <exception cref="T:System.ArgumentException">if sourceProperty is empty</exception>
            <returns>true if binding was previously being tracked, false if not</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.DeleteLink(System.Object,System.String,System.Object)">
            <summary>
            Notifies the context that a link exists between the <paramref name="source"/> and <paramref name="target"/> object
            and that the link is represented via the source.<paramref name="sourceProperty"/> which is a collection.
            The context adds this link to the set of deleted links to be sent to
            the data service on the next call to SaveChanges().
            If the specified link exists in the "Added" state, then the link is detached (see DetachLink method) instead.
            </summary>
            <param name="source">Source object participating in the link.</param>
            <param name="sourceProperty">The name of the property on the source object which represents a link from the source to the target object.</param>
            <param name="target">The target object involved in the link which is bound to the source object also specified in this call.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/>, <paramref name="sourceProperty"/> or <paramref name="target"/> are null.</exception>
            <exception cref="T:System.InvalidOperationException">if source or target are detached</exception>
            <exception cref="T:System.InvalidOperationException">if source or target are in added state</exception>
            <exception cref="T:System.InvalidOperationException">if sourceProperty is not a collection</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SetLink(System.Object,System.String,System.Object)">
            <summary>
            Notifies the context that a modified link exists between the <paramref name="source"/> and <paramref name="target"/> objects
            and that the link is represented via the source.<paramref name="sourceProperty"/> which is a reference.
            The context adds this link to the set of modified created links to be sent to
            the data service on the next call to SaveChanges().
            </summary>
            <remarks>
            Links are one way relationships.  If a back pointer exists (ie. two way association),
            this method should be called a second time to notify the context object of the second link.
            </remarks>
            <param name="source">Source object participating in the link.</param>
            <param name="sourceProperty">The name of the property on the source object which represents a link from the source to the target object.</param>
            <param name="target">The target object involved in the link which is bound to the source object also specified in this call.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/>, <paramref name="sourceProperty"/> or <paramref name="target"/> are null.</exception>
            <exception cref="T:System.InvalidOperationException">if link already exists</exception>
            <exception cref="T:System.InvalidOperationException">if source or target are detached</exception>
            <exception cref="T:System.InvalidOperationException">if source or target are in deleted state</exception>
            <exception cref="T:System.InvalidOperationException">if sourceProperty is not a reference property</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.AddObject(System.String,System.Object)">
            <summary>
            Add entity into the context in the Added state for tracking.
            It does not follow the object graph and add related objects.
            </summary>
            <param name="entitySetName">EntitySet for the object to be added.</param>
            <param name="entity">entity graph to add</param>
            <exception cref="T:System.ArgumentNullException">if entitySetName is null</exception>
            <exception cref="T:System.ArgumentException">if entitySetName is empty</exception>
            <exception cref="T:System.ArgumentNullException">if entity is null</exception>
            <exception cref="T:System.ArgumentException">if entity does not have a key property</exception>
            <exception cref="T:System.InvalidOperationException">if entity is already being tracked by the context</exception>
            <remarks>
            Any leading or trailing forward slashes will automatically be trimmed from entitySetName.
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.AddRelatedObject(System.Object,System.String,System.Object)">
            <summary>
            This API enables adding the target object and setting the link between the source object and target object in one request.
            </summary>
            <param name="source">the parent object which is already tracked by the context.</param>
            <param name="sourceProperty">The name of the navigation property which forms the association between the source and target.</param>
            <param name="target">the target object which needs to be added.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.AttachTo(System.String,System.Object)">
            <summary>
            Attach entity into the context in the Unchanged state for tracking.
            It does not follow the object graph and attach related objects.
            </summary>
            <param name="entitySetName">EntitySet for the object to be attached.</param>        
            <param name="entity">entity graph to attach</param>
            <exception cref="T:System.ArgumentNullException">if entitySetName is null</exception>
            <exception cref="T:System.ArgumentException">if entitySetName is empty</exception>
            <exception cref="T:System.ArgumentNullException">if entity is null</exception>
            <exception cref="T:System.ArgumentException">if entity does not have a key property</exception>
            <exception cref="T:System.InvalidOperationException">if entity is already being tracked by the context</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.AttachTo(System.String,System.Object,System.String)">
            <summary>
            Attach entity into the context in the Unchanged state for tracking.
            It does not follow the object graph and attach related objects.
            </summary>
            <param name="entitySetName">EntitySet for the object to be attached.</param>        
            <param name="entity">entity graph to attach</param>
            <param name="etag">etag</param>
            <exception cref="T:System.ArgumentNullException">if entitySetName is null</exception>
            <exception cref="T:System.ArgumentException">if entitySetName is empty</exception>
            <exception cref="T:System.ArgumentNullException">if entity is null</exception>
            <exception cref="T:System.ArgumentException">if entity does not have a key property</exception>
            <exception cref="T:System.InvalidOperationException">if entity is already being tracked by the context</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.DeleteObject(System.Object)">
            <summary>
            Mark an existing object being tracked by the context for deletion.
            </summary>
            <param name="entity">entity to be mark deleted</param>
            <exception cref="T:System.ArgumentNullException">if entity is null</exception>
            <exception cref="T:System.InvalidOperationException">if entity is not being tracked by the context</exception>
            <remarks>
            Existings objects in the Added state become detached.
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.Detach(System.Object)">
            <summary>
            Detach entity from the context.
            </summary>
            <param name="entity">entity to detach.</param>
            <returns>true if object was detached</returns>
            <exception cref="T:System.ArgumentNullException">if entity is null</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.UpdateObject(System.Object)">
            <summary>
            Mark an existing object for update in the context.
            </summary>
            <param name="entity">entity to be mark for update</param>
            <exception cref="T:System.ArgumentNullException">if entity is null</exception>
            <exception cref="T:System.ArgumentException">if entity is detached</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.TryGetEntity``1(System.Uri,``0@)">
            <summary>
            Find tracked entity by its identity.
            </summary>
            <remarks>entities in added state are not likely to have a identity</remarks>
            <typeparam name="TEntity">entity type</typeparam>
            <param name="identity">identity</param>
            <param name="entity">entity being tracked by context</param>
            <returns>true if entity was found</returns>
            <exception cref="T:System.ArgumentNullException">identity is null</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.TryGetUri(System.Object,System.Uri@)">
            <summary>
            Identity uri for tracked entity.
            Though the identity might use a dereferencable scheme, you MUST NOT assume it can be dereferenced.
            </summary>
            <remarks>Entities in added state are not likely to have an identity.</remarks>
            <param name="entity">entity being tracked by context</param>
            <param name="identity">identity</param>
            <returns>true if entity is being tracked and has a identity</returns>
            <exception cref="T:System.ArgumentNullException">entity is null</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.HandleResponse(System.Net.HttpStatusCode,System.String,System.Func{System.IO.Stream},System.Boolean)">
            <summary>
            Handle response by looking at status and possibly throwing an exception.
            </summary>
            <param name="statusCode">response status code</param>
            <param name="responseVersion">Version string on the response header; possibly null.</param>
            <param name="getResponseStream">delegate to get response stream</param>
            <param name="throwOnFailure">throw or return on failure</param>
            <returns>exception on failure</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.AttachIdentity(System.Uri,System.Uri,System.Object,System.String)">
            <summary>response materialization has an identity to attach to the inserted object</summary>
            <param name="identity">identity of entity</param>
            <param name="editLink">edit link of entity</param>
            <param name="entity">inserted object</param>
            <param name="etag">etag of attached object</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.AttachLocation(System.Object,System.String)">
            <summary>use location from header to generate initial edit and identity</summary>
            <param name="entity">entity in added state</param>
            <param name="location">location from post header</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.AttachLink(System.Object,System.String,System.Object,System.Data.Services.Client.MergeOption)">
            <summary>
            Track a binding.
            </summary>
            <param name="source">Source resource.</param>
            <param name="sourceProperty">Property on the source resource that relates to the target resource.</param>
            <param name="target">Target resource.</param>
            <param name="linkMerge">merge operation</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.AttachTo(System.Uri,System.Uri,System.String,System.Object,System.Boolean)">
            <summary>
            Attach entity into the context in the Unchanged state.
            </summary>
            <param name="identity">Identity for the object to be attached.</param>        
            <param name="editLink">EntitySet for the object to be attached.</param>        
            <param name="etag">etag for the entity</param>
            <param name="entity">entity graph to attach</param>
            <param name="fail">fail for public api else change existing relationship to unchanged</param>
            <exception cref="T:System.ArgumentException">if entitySetName is empty</exception>
            <exception cref="T:System.ArgumentNullException">if entitySetName is null</exception>
            <exception cref="T:System.ArgumentNullException">if entity is null</exception>
            <exception cref="T:System.InvalidOperationException">if entity is already being tracked by the context</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.CreateRequest(System.Uri,System.String,System.Boolean,System.String,System.Version)">
            <summary>
            create the request object
            </summary>
            <param name="requestUri">requestUri</param>
            <param name="method">updating</param>
            <param name="allowAnyType">Whether the request/response should request/assume ATOM or any MIME type</param>
            <param name="contentType">content type for the request</param>
            <param name="requestVersion">The version associated with this request</param>
            <returns>a request ready to get a response</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.TryGetEntity(System.Uri,System.String,System.Data.Services.Client.MergeOption,System.Data.Services.Client.EntityStates@)">
            <summary>
            Find tracked entity by its resourceUri and update its etag.
            </summary>
            <param name="resourceUri">resource id</param>
            <param name="etag">updated etag</param>
            <param name="merger">merge option</param>
            <param name="state">state of entity</param>
            <returns>entity if found else null</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.GetEntity(System.Object)">
            <summary>
            get the resource box for an entity
            </summary>
            <param name="source">entity</param>
            <returns>resource box</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.GetLinks(System.Object,System.String)">
            <summary>
            get the related links ignoring target entity
            </summary>
            <param name="source">source entity</param>
            <param name="sourceProperty">source entity's property</param>
            <returns>enumerable of related ends</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.ResolveTypeFromName(System.String,System.Type)">
            <summary>
            user hook to resolve name into a type
            </summary>
            <param name="wireName">name to resolve</param>
            <param name="userType">base type associated with name</param>
            <returns>null to skip node</returns>
            <exception cref="T:System.InvalidOperationException">if ResolveType function returns a type not assignable to the userType</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.ResolveNameFromType(System.Type)">
            <summary>
            The reverse of ResolveType
            </summary>
            <param name="type">client type</param>
            <returns>type for the server</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.FireReadingEntityEvent(System.Object,System.Xml.Linq.XElement)">
            <summary>
            Fires the ReadingEntity event
            </summary>
            <param name="entity">Entity being (de)serialized</param>
            <param name="data">XML data of the ATOM entry</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.HasModifiedResourceState(System.Data.Services.Client.DataServiceContext.Entry)">
            <summary>Filter to verify states</summary>
            <param name="x">x</param>
            <returns>true if added/updated/deleted</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.IncludeLinkState(System.Data.Services.Client.EntityStates)">
            <summary>modified or unchanged</summary>
            <param name="x">state to test</param>
            <returns>true if modified or unchanged</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.CanHandleResponseVersion(System.String)">
            <summary>Checks whether an ADO.NET Data Service version string can be handled.</summary>
            <param name="responseVersion">Version string on the response header; possibly null.</param>
            <returns>true if the version can be handled; false otherwise.</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.GenerateEditLinkUri(System.Uri,System.String,System.Object)">
            <summary>generate a Uri based on key properties of the entity</summary>
            <param name="baseUriWithSlash">baseUri</param>
            <param name="entitySetName">entitySetName</param>
            <param name="entity">entity</param>
            <returns>absolute uri</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.GetEntityHttpMethod(System.Data.Services.Client.EntityStates,System.Boolean)">
            <summary>Get http method string from entity resource state</summary>
            <param name="state">resource state</param>
            <param name="replaceOnUpdate">whether we need to update MERGE or PUT method for update.</param>
            <returns>http method string delete, put or post</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.GetLinkHttpMethod(System.Data.Services.Client.DataServiceContext.RelatedEnd)">
            <summary>Get http method string from link resource state</summary>
            <param name="link">resource</param>
            <returns>http method string put or post</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.GetResponseText(System.Func{System.IO.Stream},System.Net.HttpStatusCode)">
            <summary>
            get the response text into a string
            </summary>
            <param name="getResponseStream">method to get response stream</param>
            <param name="statusCode">status code</param>
            <returns>text</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.HandleResponsePost(System.Data.Services.Client.DataServiceContext.RelatedEnd)">
            <summary>Handle changeset response.</summary>
            <param name="entry">headers of changeset response</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.HandleResponsePut(System.Data.Services.Client.DataServiceContext.Entry,System.String)">
            <summary>Handle changeset response.</summary>
            <param name="entry">updated entity or link</param>
            <param name="etag">updated etag</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.WriteContentProperty(System.Xml.XmlWriter,System.String,System.Data.Services.Client.ClientType.ClientProperty,System.Object)">
            <summary>
            write out an individual property value which can be a primitive or link
            </summary>
            <param name="writer">writer</param>
            <param name="namespaceName">namespaceName in which we need to write the property element.</param>
            <param name="property">property which contains name, type, is key (if false and null value, will throw)</param>
            <param name="propertyValue">property value</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.ValidateEntityWithKey(System.Object)">
            <summary>validate <paramref name="entity"/></summary>
            <param name="entity">entity to validate</param>
            <exception cref="T:System.ArgumentNullException">if entity was null</exception>
            <exception cref="T:System.ArgumentException">if entity does not have a key property</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.ValidateSaveChangesOptions(System.Data.Services.Client.SaveChangesOptions)">
            <summary>
            Validate the SaveChanges Option
            </summary>
            <param name="options">options as specified by the user.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.IsFlagSet(System.Data.Services.Client.SaveChangesOptions,System.Data.Services.Client.SaveChangesOptions)">
            <summary>
            checks whether the given flag is set on the options
            </summary>
            <param name="options">options as specified by the user.</param>
            <param name="flag">whether the given flag is set on the options</param>
            <returns>true if the given flag is set, otherwise false.</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.WriteOperationRequestHeaders(System.IO.StreamWriter,System.String,System.String,System.Version)">
            <summary>
            Write the batch headers along with the first http header for the batch operation.
            </summary>
            <param name="writer">Stream writer which writes to the underlying stream.</param>
            <param name="methodName">HTTP method name for the operation.</param>
            <param name="uri">uri for the operation.</param>
            <param name="requestVersion">version for the request</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.WriteHostNameForUri(System.IO.StreamWriter,System.String)">
            <summary>
            Appends the Host header to the HTTP request
            </summary>
            <param name="writer">Writer for HTTP request</param>
            <param name="requestUri">Input URI</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.WriteOperationResponseHeaders(System.IO.StreamWriter,System.Int32)">
            <summary>
            Write the batch headers along with the first http header for the batch operation.
            </summary>
            <param name="writer">Stream writer which writes to the underlying stream.</param>
            <param name="statusCode">status code for the response.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.DetachResource(System.Data.Services.Client.DataServiceContext.ResourceBox)">
            <summary>the work to detach a resource</summary>
            <param name="resource">resource to detach</param>
            <returns>true if detached</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.DetachResourceIdentity(System.Data.Services.Client.DataServiceContext.ResourceBox)">
            <summary>remove the identity attached to the resource</summary>
            <param name="resource">resource with an identity to detach to detach</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.CreateRequest(System.Data.Services.Client.DataServiceContext.RelatedEnd)">
            <summary>
            write out binding payload using POST with http method override for PUT
            </summary>
            <param name="binding">binding</param>
            <returns>for non-batching its a request object ready to get a response from else null when batching</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.CreateRequestUri(System.Data.Services.Client.DataServiceContext.ResourceBox,System.Data.Services.Client.DataServiceContext.RelatedEnd)">
            <summary>create the uri for a link</summary>
            <param name="sourceResource">edit link of source</param>
            <param name="binding">link</param>
            <returns>appropriate uri for link state</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.CreateRequestRelativeUri(System.Data.Services.Client.DataServiceContext.RelatedEnd)">
            <summary>
            create the uri for the link relative to its source entity
            </summary>
            <param name="binding">link</param>
            <returns>uri</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.CreateRequestBatch(System.Data.Services.Client.DataServiceContext.RelatedEnd,System.IO.StreamWriter)">
            <summary>
            write content to batch text stream
            </summary>
            <param name="binding">link</param>
            <param name="text">batch text stream</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.CreateRequestData(System.Data.Services.Client.DataServiceContext.RelatedEnd,System.Boolean)">
            <summary>
            create content memory stream for link
            </summary>
            <param name="binding">link</param>
            <param name="newline">should newline be written</param>
            <returns>memory stream</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.CreateRequest(System.Data.Services.Client.DataServiceContext.ResourceBox,System.Data.Services.Client.EntityStates,System.Boolean)">
            <summary>
            Create HttpWebRequest from a resource
            </summary>
            <param name="box">resource</param>
            <param name="state">resource state</param>
            <param name="replaceOnUpdate">whether we need to update MERGE or PUT method for update.</param>
            <returns>web request</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.CreateRequestBatch(System.Data.Services.Client.DataServiceContext.ResourceBox,System.IO.StreamWriter,System.Boolean)">
            <summary>
            generate batch request for entity
            </summary>
            <param name="box">entity</param>
            <param name="text">batch stream to write to</param>
            <param name="replaceOnUpdate">whether we need to update MERGE or PUT method for update.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.CreateRequestData(System.Data.Services.Client.DataServiceContext.ResourceBox,System.Boolean)">
            <summary>
            create memory stream with entity data
            </summary>
            <param name="box">entity</param>
            <param name="newline">should newline be written</param>
            <returns>memory stream containing data</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.CreateRequestDataLinks(System.Data.Services.Client.DataServiceContext.ResourceBox,System.Xml.XmlWriter)">
            <summary>
            add the related links for new entites to non-new entites
            </summary>
            <param name="box">entity in added state</param>
            <param name="writer">writer to add links to</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.HandleResponseDelete(System.Data.Services.Client.DataServiceContext.Entry)">
            <summary>Handle response to deleted entity.</summary>
            <param name="entry">deleted entity</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.HandleResponsePost(System.Data.Services.Client.DataServiceContext.ResourceBox,System.Data.Services.Client.MaterializeAtom,System.Uri,System.String)">
            <summary>Handle changeset response.</summary>
            <param name="entry">headers of changeset response</param>
            <param name="materializer">changeset response stream</param>
            <param name="editLink">editLink of the newly created item (non-null if materialize is null)</param>
            <param name="etag">ETag header value from the server response (or null if no etag or if there is an actual response)</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResultProcessed(System.Data.Services.Client.DataServiceContext.Entry)">
            <summary>flag results as being processed</summary>
            <param name="entry">result entry being processed</param>
            <returns>count of related links that were also processed</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.RelatedLinks(System.Data.Services.Client.DataServiceContext.ResourceBox)">
            <summary>
            enumerate the related Modified/Unchanged links for an added item
            </summary>
            <param name="box">entity</param>
            <returns>related links</returns>
            <remarks>
            During a non-batch SaveChanges, an Added entity can become an Unchanged entity
            and should be included in the set of related links for the second Added entity.
            </remarks>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.CreateLoadPropertyRequest(System.Object,System.String,System.AsyncCallback,System.Object)">
            <summary>
            create the load property request
            </summary>
            <param name="entity">entity</param>
            <param name="propertyName">name of collection or reference property to load</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">user state</param>
            <returns>a aync result that you can get a response from</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.WriteContentProperties(System.Xml.XmlWriter,System.Data.Services.Client.ClientType,System.Object,System.Data.Services.Common.EpmSourcePathSegment)">
            <summary>
            write the content section of the atom payload
            </summary>
            <param name="writer">writer</param>
            <param name="type">resource type</param>
            <param name="resource">resource value</param>
            <param name="currentSegment">Source EPM tree segment corresponding to <paramref name="type"/></param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.DetachExistingLink(System.Data.Services.Client.DataServiceContext.RelatedEnd,System.Boolean)">
            <summary>Detach existing link</summary>
            <param name="existingLink">link to detach</param>
            <param name="targetDelete">true if target is being deleted, false otherwise</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.DetachReferenceLink(System.Object,System.String,System.Object,System.Data.Services.Client.MergeOption)">
            <summary>
            find and detach link for reference property
            </summary>
            <param name="source">source entity</param>
            <param name="sourceProperty">source entity property name for target entity</param>
            <param name="target">target entity</param>
            <param name="linkMerge">link merge option</param>
            <returns>true if found and not removed</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.EnsureContained(System.Object,System.String)">
            <summary>
            verify the resource being tracked by context
            </summary>
            <param name="resource">resource</param>
            <param name="parameterName">parameter name to include in ArgumentException</param>
            <returns>The given resource.</returns>
            <exception cref="T:System.ArgumentException">if resource is not contained</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.EnsureRelatable(System.Object,System.String,System.Object,System.Data.Services.Client.EntityStates)">
            <summary>
            verify the source and target are relatable
            </summary>
            <param name="source">source Resource</param>
            <param name="sourceProperty">source Property</param>
            <param name="target">target Resource</param>
            <param name="state">destination state of relationship to evaluate for</param>
            <returns>true if DeletedState and one of the ends is in the added state</returns>
            <exception cref="T:System.ArgumentNullException">if source or target are null</exception>
            <exception cref="T:System.ArgumentException">if source or target are not contained</exception>
            <exception cref="T:System.ArgumentNullException">if source property is null</exception>
            <exception cref="T:System.ArgumentException">if source property empty</exception>
            <exception cref="T:System.InvalidOperationException">Can only relate ends with keys.</exception>
            <exception cref="T:System.ArgumentException">If target doesn't match property type.</exception>
            <exception cref="T:System.InvalidOperationException">If adding relationship where one of the ends is in the deleted state.</exception>
            <exception cref="T:System.InvalidOperationException">If attaching relationship where one of the ends is in the added or deleted state.</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.ValidateEntitySetName(System.String@)">
            <summary>validate <paramref name="entitySetName"/> and trim leading and trailing forward slashes</summary>
            <param name="entitySetName">resource name to validate</param>
            <exception cref="T:System.ArgumentNullException">if entitySetName was null</exception>
            <exception cref="T:System.ArgumentException">if entitySetName was empty or contained only forward slash</exception>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.EnsureIdentityToResource">
            <summary>create this.identityToResource when necessary</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.IncrementChange(System.Data.Services.Client.DataServiceContext.RelatedEnd)">
            <summary>
            increment the resource change for sorting during submit changes
            </summary>
            <param name="box">the resource to update the change order</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.IncrementChange(System.Data.Services.Client.DataServiceContext.ResourceBox)">
            <summary>
            increment the resource change for sorting during submit changes
            </summary>
            <param name="box">the resource to update the change order</param>
        </member>
        <member name="E:System.Data.Services.Client.DataServiceContext.SendingRequest">
            <summary>
            This event is fired before a request it sent to the server, giving
            the handler the opportunity to inspect, adjust and/or replace the
            WebRequest object used to perform the request.
            </summary>
            <remarks>
            When calling BeginSaveChanges and not using SaveChangesOptions.Batch,
            this event may be raised from a different thread.
            </remarks>
        </member>
        <member name="E:System.Data.Services.Client.DataServiceContext.ReadingEntity">
            <summary>
            This event fires once an entry has been read into a .NET object
            but before the serializer returns to the caller, giving handlers
            an opporunity to read further information from the incoming ATOM
            entry and updating the object
            </summary>
            <remarks>
            This event should only be raised from the thread that was used to
            invoke Execute, EndExecute, SaveChanges, EndSaveChanges.
            </remarks>
        </member>
        <member name="E:System.Data.Services.Client.DataServiceContext.WritingEntity">
            <summary>
            This event fires once an ATOM entry is ready to be written to
            the network for a request, giving handlers an opportunity to
            customize the entry with information from the corresponding
            .NET object or the environment.
            </summary>
            <remarks>
            When calling BeginSaveChanges and not using SaveChangesOptions.Batch,
            this event may be raised from a different thread.
            </remarks>
        </member>
        <member name="E:System.Data.Services.Client.DataServiceContext.ChangesSaved">
            <summary>
            This event fires when SaveChanges or EndSaveChanges is called
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.BaseUri">
            <summary>
            Absolute Uri identifying the root of the target data service.
            A Uri provided with a trailing slash is equivalent to one without such a trailing character.
            </summary>
            <remarks>
            Example: http://server/host/myservice.svc
            </remarks>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.Credentials">
            <summary>
            Gets and sets the authentication information used by each query created using the context object.
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.MergeOption">
            <summary>
            Used to specify a synchronization strategy when sending/receiving entities to/from a data service.
            This value is read by the deserialization component of the client prior to materializing objects.
            As such, it is recommended to set this property to the appropriate materialization strategy
            before executing any queries/updates to the data service.
            </summary>
            <remarks>
            The default value is <see cref="P:System.Data.Services.Client.DataServiceContext.MergeOption"/>.AppendOnly.
            </remarks>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.ApplyingChanges">
            <summary>
            A flag indicating if the data service context is applying changes 
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.IgnoreMissingProperties">
            <summary>
            Are properties missing from target type ignored? 
            </summary>
            <remarks>
            This also affects responses during SaveChanges.
            </remarks>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.DataNamespace">
            <summary>Override the namespace used for the data parts of the ATOM entries</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.ResolveName">
            <summary>
            Enables one to override the default type resolution strategy used by the client library.
            Set this property to a delegate which identifies a function that resolves
            a type within the client application to a namespace-qualified type name.
            This enables the client to perform custom mapping between the type name
            provided in a response from the server and a type on the client.
            </summary>
            <remarks>
            This method enables one to override the entity name that is serialized
            to the target representation (ATOM,JSON, etc) for the specified type.
            </remarks>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.ResolveType">
            <summary>
            Enables one to override the default type resolution strategy used by the client library.
            Set this property to a delegate which identifies a function that resolves a 
            namespace-qualified type name to type within the client application.
            This enables the client to perform custom mapping between the type name
            provided in a response from the server and a type on the client.
            </summary>
            <remarks>
            Overriding type resolution enables inserting a custom type name to type mapping strategy.
            It does not enable one to affect how a response is materialized into the identified type.
            </remarks>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.Timeout">
            <summary>
            Get and sets the timeout span in seconds to use for the underlying HTTP request to the data service.
            </summary>
            <remarks>
            A value of 0 will use the default timeout of the underlying HTTP request.
            This value must be set before executing any query or update operations against
            the target data service for it to have effect on the on the request.
            The value may be changed between requests to a data service and the new value
            will be picked up by the next data service request.  
            </remarks>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.TypeScheme">
            <summary>Gets or sets the URI used to indicate what type scheme is used by the service.</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.UsePostTunneling">
            <summary>whether to use post-tunneling for PUT/DELETE</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.Links">
            <summary>
            Returns a collection of all the links (ie. associations) currently being tracked by the context.
            If no links are being tracked, a collection with 0 elements is returned.
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.Entities">
            <summary>
            Returns a collection of all the resources currently being tracked by the context.
            If no resources are being tracked, a collection with 0 elements is returned.
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.SaveChangesDefaultOptions">
            <summary>
            Default SaveChangesOptions that needs to be used when doing SaveChanges.
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.IgnoreResourceNotFoundException">
            <summary>
            When set to true, client will return an empty set instead of throwing when the
            server generates a HTTP 404: Resource Not Found exception
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.BaseUriWithSlash">
            <summary>base uri with guranteed trailing slash</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.HasReadingEntityHandlers">
            <summary>Indicates if there are subscribers for the ReadingEntity event</summary>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceContext.Entry">
            <summary>
            Entity and LinkDescriptor base class that contains change order and state
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.Entry.changeOrder">
            <summary>change order</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.Entry.saveContentGenerated">
            <summary>was content generated for the entity</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.Entry.saveResultProcessed">
            <summary>was this entity save result processed</summary>
            <remarks>0 - no processed, otherwise reflects the previous state</remarks>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.Entry.state">
            <summary>state</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.Entry.saveError">
            <summary>last save exception per entry</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.Entry.ChangeOrder">
            <summary>changeOrder</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.Entry.IsResource">
            <summary>true if resource, false if link</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.Entry.ContentGeneratedForSave">
            <summary>was content generated for the entity</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.Entry.SaveResultWasProcessed">
            <summary>was this entity save result processed</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.Entry.SaveError">
            <summary>last save exception per entry</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.Entry.State">
            <summary>state</summary>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceContext.ResourceBox">
            <summary>
            An untyped container for a resource and its identity
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.ResourceBox.identity">
            <summary>uri to identitfy the entity</summary>
            <remarks>&lt;atom:id&gt;identity&lt;/id&gt;</remarks>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.ResourceBox.editLink">
            <summary>uri to edit the entity. In case of deep add, this can also refer to the navigation property name.</summary>
            <remarks>&lt;atom:link rel="edit" href="editLink" /&gt;</remarks>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.ResourceBox.etag">
            <summary>entity ETag (concurrency token)</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.ResourceBox.resource">
            <summary>entity</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.ResourceBox.relatedLinkCount">
            <summary>count of links for which this entity is the source</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.ResourceBox.parentResource">
            <summary>The parent resource that this resource is linked to.</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.ResourceBox.#ctor(System.Uri,System.Uri,System.Object)">
            <summary>constructor</summary>
            <param name="identity">resource Uri</param>
            <param name="editLink">resource EntitySet</param>
            <param name="resource">non-null resource</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.ResourceBox.#ctor(System.Data.Services.Client.DataServiceContext.ResourceBox,System.String,System.Object)">
            <summary>
            The parent object and the property name gives you deep collection that you need to add.
            </summary>
            <param name="parentResource">parent object that the new object is related to.</param>
            <param name="propertyName">property name via which the resource object is linked to its parentResource.</param>
            <param name="resource">resource that needs to be added and linked.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.ResourceBox.GetResourceUri(System.Uri)">
            <summary>uri to edit the entity</summary>
            <param name="baseUriWithSlash">baseUriWithSlash</param>
            <returns>absolute uri which can be used to edit the entity</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.ResourceBox.IsRelatedEntity(System.Data.Services.Client.DataServiceContext.RelatedEnd)">
            <summary>is the entity the same as the source or target entity</summary>
            <param name="related">related end</param>
            <returns>true if same as source or target entity</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.ResourceBox.GetRelatedEnd">
            <summary>
            Return the related end for this resource. One should call this method, only if the resource is inserted via deep resource.
            </summary>
            <returns>returns the related end via which the resource was inserted.</returns>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.ResourceBox.IsResource">
            <summary>this is a entity</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.ResourceBox.EditLink">
            <summary>uri to edit entity</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.ResourceBox.ETag">
            <summary>etag</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.ResourceBox.Identity">
            <summary>entity uri identity</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.ResourceBox.RelatedLinkCount">
            <summary>count of links for which this entity is the source</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.ResourceBox.Resource">
            <summary>entity</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.ResourceBox.Parent">
            <summary>Parent resource</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.ResourceBox.IsDeepInsert">
            <summary>
            Returns true if the resource was inserted via its parent. E.g. POST customer(0)/Orders
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceContext.RelatedEnd">
            <summary>
            An untyped container for a resource and its related end
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.RelatedEnd.EquivalenceComparer">
            <summary>IEqualityComparer to compare equivalence between to related ends</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.RelatedEnd.source">
            <summary>source entity</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.RelatedEnd.sourceProperty">
            <summary>name of property on source entity that references the target entity</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.RelatedEnd.target">
            <summary>target entity</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.RelatedEnd.#ctor(System.Object,System.String,System.Object)">
            <summary>constructor</summary>
            <param name="source">parentResource</param>
            <param name="property">sourceProperty</param>
            <param name="target">childResource</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.RelatedEnd.Equals(System.Data.Services.Client.DataServiceContext.RelatedEnd,System.Data.Services.Client.DataServiceContext.RelatedEnd)">
            <summary>
            Are the two related ends equivalent?
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <returns>true if the related ends are equivalent</returns>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.RelatedEnd.IsResource">
            <summary>this is a link</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.RelatedEnd.TargetResource">
            <summary>target resource</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.RelatedEnd.SourceProperty">
            <summary>source resource property name</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.RelatedEnd.SourceResource">
            <summary>source resource</summary>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceContext.RelatedEnd.EqualityComparer">
            <summary>test for equivalence</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.RelatedEnd.EqualityComparer.System#Collections#Generic#IEqualityComparer{System#Data#Services#Client#DataServiceContext#RelatedEnd}#Equals(System.Data.Services.Client.DataServiceContext.RelatedEnd,System.Data.Services.Client.DataServiceContext.RelatedEnd)">
            <summary>test for equivalence</summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <returns>true if equivalent</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.RelatedEnd.EqualityComparer.System#Collections#Generic#IEqualityComparer{System#Data#Services#Client#DataServiceContext#RelatedEnd}#GetHashCode(System.Data.Services.Client.DataServiceContext.RelatedEnd)">
            <summary>hash code based on the contained resources</summary>
            <param name="x">x</param>
            <returns>hash code</returns>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceContext.LoadPropertyResult">
            <summary>wrapper around loading a property from a response</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.LoadPropertyResult.entity">
            <summary>entity whose property is being loaded</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.LoadPropertyResult.propertyName">
            <summary>name of the property on the entity that is being loaded</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.LoadPropertyResult.#ctor(System.Object,System.String,System.Data.Services.Client.DataServiceContext,System.Net.HttpWebRequest,System.AsyncCallback,System.Object,System.Data.Services.Client.DataServiceRequest)">
            <summary>constructor</summary>
            <param name="entity">entity</param>
            <param name="propertyName">name of collection or reference property to load</param>
            <param name="context">Originating context</param>
            <param name="request">Originating WebRequest</param>
            <param name="callback">user callback</param>
            <param name="state">user state</param>
            <param name="dataServiceRequest">request object.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.LoadPropertyResult.LoadProperty">
            <summary>
            loading a property from a response
            </summary>
            <returns>QueryOperationResponse instance containing information about the response.</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.LoadPropertyResult.ReadPropertyFromAtom(System.Data.Services.Client.DataServiceContext.ResourceBox,System.Data.Services.Client.ClientType.ClientProperty)">
            <summary>
            Load property data from an ATOM response
            </summary>
            <param name="box">Box pointing to the entity to load this to</param>
            <param name="property">The property being loaded</param>
            <returns>property values as IEnumerable.</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.LoadPropertyResult.ReadPropertyFromRawData(System.Data.Services.Client.ClientType.ClientProperty)">
            <summary>
            Load property data form a raw response
            </summary>
            <param name="property">The property being loaded</param>
            <returns>property values as IEnumerable.</returns>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceContext.SaveResult">
            <summary>
            implementation of IAsyncResult for SaveChanges
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.Context">
            <summary>where to pull the changes from</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.ChangedEntries">
            <summary>sorted list of entries by change order</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.Queries">
            <summary>array of queries being executed</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.Responses">
            <summary>operations</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.batchBoundary">
            <summary>boundary used when generating batch boundary</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.options">
            <summary>option in use for SaveChanges</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.executeAsync">
            <summary>if true then async, else sync</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.changesCompleted">
            <summary>debugging trick to track number of completed requests</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.request">
            <summary>wrapped request</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.batchResponse">
            <summary>batch web response</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.httpWebResponseStream">
            <summary>response stream for the batch</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.service">
            <summary>service response</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.entryIndex">
            <summary>The ResourceBox or RelatedEnd currently in flight</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.processingMediaLinkEntry">
            <summary>
            True if the current in-flight request is a media link entry POST
            that needs to be followed by a PUT for the rest of the properties
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.mediaResourceRequestStream">
            <summary>
            If the <see cref="F:System.Data.Services.Client.DataServiceContext.SaveResult.processingMediaLinkEntry"/> is set to true
            this field holds a memory stream which contains the body of the MR POST request
            to be sent.
            This can be null in the case where the content of MR is empty. (In which case
            we will no try to open the request stream and thus avoid additional async call).
            </summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.responseBatchStream">
            <summary>response stream</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.buildBatchBuffer">
            <summary>temporary buffer when cache results from CUD op in non-batching save changes</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.buildBatchWriter">
            <summary>temporary writer when cache results from CUD op in non-batching save changes</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.copiedContentLength">
            <summary>count of data actually copied</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.changesetBoundary">
            <summary>what is the changset boundary</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.changesetStarted">
            <summary>is a change set being cached</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.#ctor(System.Data.Services.Client.DataServiceContext,System.String,System.Data.Services.Client.DataServiceRequest[],System.Data.Services.Client.SaveChangesOptions,System.AsyncCallback,System.Object,System.Boolean)">
            <summary>
            constructor for operations
            </summary>
            <param name="context">context</param>
            <param name="method">method</param>
            <param name="queries">queries</param>
            <param name="options">options</param>
            <param name="callback">user callback</param>
            <param name="state">user state object</param>
            <param name="async">async or sync</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.EndRequest">
            <summary>process the batch</summary>
            <returns>data service response</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.BatchBeginRequest(System.Boolean)">
            <summary>initial the async batch save changeset</summary>
            <param name="replaceOnUpdate">whether we need to update MERGE or PUT method for update.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.BatchRequest(System.Boolean)">
            <summary>
            Synchronous batch request
            </summary>
            <param name="replaceOnUpdate">whether we need to update MERGE or PUT method for update.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.BeginNextChange(System.Boolean)">
            <summary>
            This starts the next change
            </summary>
            <param name="replaceOnUpdate">whether we need to update MERGE or PUT method for update.</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.CompletedRequest">
            <summary>cleanup work to do once the batch / savechanges is complete</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.BuildReturn(System.Data.Services.Client.DataServiceContext.Entry)">
            <summary>build the *Descriptor object in the ChangeList</summary>
            <param name="entry">entry to build from</param>
            <returns>EntityDescriptor or LinkDescriptor</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.CompleteCheck(System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest,System.Data.Services.Client.InternalError)">
            <summary>verify non-null and not completed</summary>
            <param name="value">the request in progress</param>
            <param name="errorcode">error code if null or completed</param>
            <returns>the next step to validate CompletedSyncronously</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.EqualRefCheck(System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest,System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest,System.Data.Services.Client.InternalError)">
            <summary>verify they have the same reference</summary>
            <param name="actual">the actual thing</param>
            <param name="expected">the expected thing</param>
            <param name="errorcode">error code if they are not</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.HandleCompleted(System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest)">
            <summary>Set the AsyncWait and invoke the user callback.</summary>
            <param name="pereq">the request object</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.HandleFailure(System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest,System.Exception)">
            <summary>Cache the exception that happened on the background thread for the caller of EndSaveChanges.</summary>
            <param name="pereq">the request object</param>
            <param name="e">exception object from background thread</param>
            <returns>true if the exception should be rethrown</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.CreateNextRequest(System.Boolean)">
            <summary>
            Create HttpWebRequest from the next availabe resource
            </summary>
            <param name="replaceOnUpdate">whether we need to update MERGE or PUT method for update.</param>
            <returns>web request</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.CheckAndProcessMediaEntry(System.Data.Services.Client.DataServiceContext.ResourceBox)">
            <summary>
            Check to see if the resource to be inserted is a media entry, and if so
            setup a POST request for the media content first and turn the rest of 
            the operation into a PUT to update the rest of the properties.
            </summary>
            <param name="box">The resource to check/process</param>
            <returns>A web request setup to do POST the media resource</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.CreateChangeData(System.Int32,System.Boolean)">
            <summary>
            create memory stream for entry (entity or link)
            </summary>
            <param name="index">index into changed entries</param>
            <param name="newline">include newline in output</param>
            <returns>memory stream of data for entry</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.HandleOperationStart">
            <summary>basic separator between response</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.HandleOperationEnd">
            <summary>write the trailing --changesetboundary--</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.HandleOperationException(System.Exception,System.Net.HttpWebRequest,System.Net.HttpWebResponse)">
            <summary>operation with exception</summary>
            <param name="e">exception object</param>
            <param name="httpWebRequest">request object</param>
            <param name="response">response object</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.HandleOperationResponse(System.Net.HttpWebRequest,System.Net.HttpWebResponse)">
            <summary>operation with HttpWebResponse</summary>
            <param name="httpWebRequest">request object</param>
            <param name="response">response object</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.HandleOperationResponseData(System.Net.HttpWebResponse)">
            <summary>
            copy the response data
            </summary>
            <param name="response">response object</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.HandleOperationResponseNoData">
            <summary>only call when no data was written to added "Content-Length: 0"</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.CreateBatchRequest(System.IO.MemoryStream)">
            <summary>
            create the web request for a batch
            </summary>
            <param name="memory">memory stream for length</param>
            <returns>httpweb request</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.GenerateBatchRequest(System.Boolean)">
            <summary>generate the batch request of all changes to save</summary>
            <param name="replaceOnUpdate">whether we need to update MERGE or PUT method for update.</param>
            <returns>buffer containing data for request stream</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.HandleBatchResponse">
            <summary>
            process the batch changeset response
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.HandleBatchResponse(System.Data.Services.Client.BatchStream)">
            <summary>
            process the batch changeset response
            </summary>
            <param name="batch">batch stream</param>
            <returns>enumerable of QueryResponse or null</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.ValidateContentID(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            validate the content-id
            </summary>
            <param name="contentHeaders">headers</param>
            <returns>return the correct ChangedEntries index</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.AsyncEndGetRequestStream(System.IAsyncResult)">
            <summary>handle request.BeginGetRequestStream with request.EndGetRquestStream and then write out request stream</summary>
            <param name="asyncResult">async result</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.AsyncEndWrite(System.IAsyncResult)">
            <summary>handle reqestStream.BeginWrite with requestStream.EndWrite then BeginGetResponse</summary>
            <param name="asyncResult">async result</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.AsyncEndGetResponse(System.IAsyncResult)">
            <summary>handle request.BeginGetResponse with request.EndGetResponse and then copy response stream</summary>
            <param name="asyncResult">async result</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.AsyncEndRead(System.IAsyncResult)">
            <summary>handle responseStream.BeginRead with responseStream.EndRead</summary>
            <param name="asyncResult">async result</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.SaveNextChange(System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest)">
            <summary>continue with the next change</summary>
            <param name="pereq">the completed per request object</param>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.SaveResult.DataServiceResponse">
            <summary>generate the batch request of all changes to save</summary>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest">
            <summary>wrap the full request</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest.requestStatus">
            <summary>
            did the sequence (BeginGetRequest, EndGetRequest, ... complete. 0 = In Progress, 1 = Completed, 2 = Aborted
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest.#ctor">
            <summary>ctor</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest.SetComplete">
            <summary>
            Change the request status to completed
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest.SetAborted">
            <summary>
            Change the request status to aborted
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest.Dispose">
            <summary>
            dispose of the request object
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest.Request">
            <summary>active web request</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest.RequestStream">
            <summary>active web request stream</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest.RequestStreamContent">
            <summary>content to write to request stream</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest.HttpWebResponse">
            <summary>web response</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest.ResponseStream">
            <summary>async web response stream</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest.RequestCompletedSynchronously">
            <summary>did the request complete all of its steps synchronously?</summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest.RequestCompleted">
            <summary>
            Short cut for testing if request has finished (either completed or aborted)
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest.RequestAborted">
            <summary>
            Short cut for testing request status is 2 (Aborted)
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceContext.SaveResult.PerRequest.RequestStep">
            <summary>
            If CompletedSynchronously and requestStep didn't increment, then underlying implementation lied.
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceQuery`1">
            <summary>
            query object
            </summary>
            <typeparam name="TElement">type of object to materialize</typeparam>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceQuery`1.queryExpression">
            <summary>Linq Expression</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceQuery`1.queryProvider">
            <summary>Linq Query Provider</summary>
        </member>
        <member name="F:System.Data.Services.Client.DataServiceQuery`1.queryComponents">
            <summary>Uri, Projection, Version for translated query</summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQuery`1.#ctor(System.Linq.Expressions.Expression,System.Data.Services.Client.DataServiceQueryProvider)">
            <summary>
            query object
            </summary>
            <param name="expression">expression for query</param>
            <param name="provider">query provider for query</param>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQuery`1.BeginExecute(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to an Internet resource.
            </summary>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">The state object for this request.</param>
            <returns>An IAsyncResult that references the asynchronous request for a response.</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQuery`1.EndExecute(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to an Internet resource.
            </summary>
            <param name="asyncResult">The pending request for a response. </param>
            <returns>An IEnumerable that contains the response from the Internet resource.</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQuery`1.Execute">
            <summary>
            Returns an IEnumerable from an Internet resource. 
            </summary>
            <returns>An IEnumerable that contains the response from the Internet resource.</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQuery`1.Expand(System.String)">
            <summary>
            Sets Expand option
            </summary>
            <param name="path">Path to expand</param>
            <returns>New DataServiceQuery with expand option</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQuery`1.IncludeTotalCount">
            <summary>
            Turn the inline counting option on for the query
            </summary>
            <returns>New DataServiceQuery with count option</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQuery`1.AddQueryOption(System.String,System.Object)">
            <summary>
            Sets user option
            </summary>
            <param name="name">name of value</param>
            <param name="value">value of option</param>
            <returns>New DataServiceQuery with expand option</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQuery`1.GetEnumerator">
            <summary>
            get an enumerator materializes the objects the Uri request
            </summary>
            <returns>an enumerator</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQuery`1.ToString">
            <summary>
            gets the URI for the query
            </summary>
            <returns>a string with the URI</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQuery`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            get an enumerator materializes the objects the Uri request
            </summary>
            <returns>an enumerator</returns>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQuery`1.Translate">
            <summary>
            gets the query components for the query after translating
            </summary>
            <returns>QueryComponents for query</returns>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceQuery`1.ElementType">
            <summary>
            Element Type
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceQuery`1.Expression">
            <summary>
            Linq Expression
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceQuery`1.Provider">
            <summary>
            Linq Query Provider
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceQuery`1.RequestUri">
            <summary>
            gets the URI for a the query
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.DataServiceQuery`1.QueryComponents">
            <summary>
            gets the UriTranslateResult for a the query
            </summary>
        </member>
        <member name="T:System.Data.Services.Client.DataServiceQuery`1.DataServiceOrderedQuery">
            <summary>
            Ordered DataServiceQuery which implements IOrderedQueryable.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.DataServiceQuery`1.DataServiceOrderedQuery.#ctor(System.Linq.Expressions.Expression,System.Data.Services.Client.DataServiceQueryProvider)">
            <summary>
            constructor
            </summary>
            <param name="expression">expression for query</param>
            <param name="provider">query provider for query</param>
        </member>
        <member name="T:System.Data.Services.Client.WebUtil">
            <summary>web utility functions</summary>
        </member>
        <member name="M:System.Data.Services.Client.WebUtil.CopyStream(System.IO.Stream,System.IO.Stream,System.Byte[]@)">
            <summary>copy from one stream to another</summary>
            <param name="input">input stream</param>
            <param name="output">output stream</param>
            <param name="refBuffer">reusable buffer</param>
            <returns>count of copied bytes</returns>
        </member>
        <member name="M:System.Data.Services.Client.WebUtil.GetHttpWebResponse(System.InvalidOperationException,System.Net.HttpWebResponse@)">
            <summary>get response object from possible WebException</summary>
            <param name="exception">exception to probe</param>
            <param name="response">http web respose object from exception</param>
        </member>
        <member name="M:System.Data.Services.Client.WebUtil.SuccessStatusCode(System.Net.HttpStatusCode)">
            <summary>is this a success status code</summary>
            <param name="status">status code</param>
            <returns>true if status is between 200-299</returns>
        </member>
        <member name="M:System.Data.Services.Client.WebUtil.WrapResponseHeaders(System.Net.HttpWebResponse)">
            <summary>
            turn the response object headers into a dictionary
            </summary>
            <param name="response">response</param>
            <returns>dictionary</returns>
        </member>
        <member name="T:System.Data.Services.Client.UriUtil">
            <summary>
            static uri utility functions
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.UriUtil.CreateBaseComparableUri(System.Uri)">
            <summary>Creates a URI suitable for host-agnostic comparison purposes.</summary>
            <param name="uri">URI to compare.</param>
            <returns>URI suitable for comparison.</returns>
        </member>
        <member name="M:System.Data.Services.Client.UriUtil.GetNameFromAtomLinkRelationAttribute(System.String)">
            <summary>Parse the atom link relation attribute value</summary>
            <param name="value">atom link relation attribute value</param>
            <returns>the assocation name or null</returns>
        </member>
        <member name="M:System.Data.Services.Client.UriUtil.IsBaseOf(System.Uri,System.Uri)">
            <summary>is the serviceRoot the base of the request uri</summary>
            <param name="baseUriWithSlash">baseUriWithSlash</param>
            <param name="requestUri">requestUri</param>
            <returns>true if the serviceRoot is the base of the request uri</returns>
        </member>
        <member name="M:System.Data.Services.Client.UriUtil.UriInvariantInsensitiveIsBaseOf(System.Uri,System.Uri)">
            <summary>
            Determines whether the <paramref name="current"/> Uri instance is a 
            base of the specified Uri instance. 
            </summary>
            <param name="current">Candidate base URI.</param>
            <param name="uri">The specified Uri instance to test.</param>
            <returns>true if the current Uri instance is a base of uri; otherwise, false.</returns>
        </member>
        <member name="T:System.Data.Services.Client.XmlUtil">
            <summary>
            static xml utility function
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.XmlUtil.CreateAtomNameTable">
            <summary>
            An initial nametable so that string comparisons during
            deserialization become reference comparisions
            </summary>
            <returns>nametable with element names used in application/atom+xml payload</returns>
        </member>
        <member name="M:System.Data.Services.Client.XmlUtil.CreateXmlReader(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates a new XmlReader instance using the specified stream reader
            </summary>
            <param name="stream">The stream reader from which you want to read</param>
            <param name="encoding">The encoding of the stream</param>
            <returns>XmlReader with the appropriate xml settings</returns>
        </member>
        <member name="M:System.Data.Services.Client.XmlUtil.CreateXmlWriterAndWriteProcessingInstruction(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Creates a new XmlWriter instance using the specified stream and writers the processing instruction
            with the given encoding value
            </summary>
            <param name="stream"> The stream to which you want to write</param>
            <param name="encoding"> Encoding that you want to specify in the reader settings as well as the processing instruction </param>
            <returns>mlWriter with the appropriate xml settings and processing instruction</returns>
        </member>
        <member name="M:System.Data.Services.Client.XmlUtil.GetAttributeEx(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            get attribute value from specified namespace or empty namespace
            </summary>
            <param name="reader">reader</param>
            <param name="attributeName">attributeName</param>
            <param name="namespaceUri">namespaceUri</param>
            <returns>attribute value</returns>
        </member>
        <member name="T:System.Data.Services.Client.Strings">
            <summary>
               Strongly-typed and parameterized string resources.
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.BatchStream_ContentExpected(System.Object)">
            <summary>
            A string like "Content was expected for the {0} operation."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.BatchStream_ContentUnexpected(System.Object)">
            <summary>
            A string like "Content is unexpected for the {0} operation."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.BatchStream_InvalidDelimiter(System.Object)">
            <summary>
            A string like "The boundary delimiter '{0}' is not valid. Please specify a valid boundary delimiter or make sure that the content length specified is correct."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Data.Services.Client.Strings.BatchStream_InvalidHeaderValueSpecified(System.Object)" -->
        <member name="M:System.Data.Services.Client.Strings.BatchStream_InvalidContentLengthSpecified(System.Object)">
            <summary>
            A string like "The content length '{0}' is not valid. The content length must be a valid Int32 literal and must be greater than 0."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.BatchStream_InvalidHttpMethodName(System.Object)">
            <summary>
            A string like "'{0}' is not a supported HTTP method name. Please specify a supported HTTP method name."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.BatchStream_InvalidMethodHeaderSpecified(System.Object)">
            <summary>
            A string like "Error processing batch response. The following header is not valid '{0}'. The first header at the start of the each operation must be of the following format: 'HttpMethod RequestUrl HttpVersion'."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.BatchStream_InvalidHttpVersionSpecified(System.Object,System.Object)">
            <summary>
            A string like "Error processing batch response. The HTTP version '{0}' is not valid. The value must be '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.BatchStream_InvalidNumberOfHeadersAtOperationStart(System.Object,System.Object)">
            <summary>
            A string like "Error processing batch response. At the start of every operation, exactly two headers need to be specified: '{0}' and '{1}'. Make sure these headers are present and have the correct values."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.BatchStream_MissingOrInvalidContentEncodingHeader(System.Object,System.Object)">
            <summary>
            A string like "Error processing batch response. At the start of every operation, '{0}' header must be specified and its value must be '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.BatchStream_InvalidNumberOfHeadersAtChangeSetStart(System.Object,System.Object)">
            <summary>
            A string like "Error processing batch response. At the start of each change set, only two headers can be specified - '{0}' and '{1}'. Custom headers are allowed only within each operation, along with the standard HTTP headers."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.BatchStream_MissingContentTypeHeader(System.Object)">
            <summary>
            A string like "Error processing batch response. Missing '{0}' header. This header must be specified at the start of each operation and change set."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.BatchStream_InvalidContentTypeSpecified(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "Error processing batch response. The '{0}' header value '{1}' is not valid. If this is the start of the change set, then the value must be '{2}', otherwise it must be '{3}'."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Batch_ExpectedContentType(System.Object)">
            <summary>
            A string like "The expected content type for a batch requests is "multipart/mixed;boundary=batch" not "{0}"."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Batch_ExpectedResponse(System.Object)">
            <summary>
            A string like "The POST request expected a response with content. ID={0}"
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Batch_UnexpectedContent(System.Object)">
            <summary>
            A string like "The web response contained unexpected sections. ID={0}"
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Context_CannotConvertKey(System.Object)">
            <summary>
            A string like "Unable to convert value '{0}' into a key string for a URI."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Context_InternalError(System.Object)">
            <summary>
            A string like "System.Data.Services.Client internal error {0}."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Context_NoContentTypeForMediaLink(System.Object,System.Object)">
            <summary>
            A string like "Media link object of type '{0}' is configured to use the MIME type specified in the property '{1}'. However, that property's value is null or empty."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Context_VersionNotSupported(System.Object,System.Object)">
            <summary>
            A string like "Response version '{0}' is not supported. The highest version supported is '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Collection_NullCollectionReference(System.Object,System.Object)">
            <summary>
            A string like "{0}.{1} must return a non-null open property collection."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ClientType_MissingOpenProperty(System.Object,System.Object)">
            <summary>
            A string like "The open object property '{0}:{1}' is not defined."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Clienttype_MultipleOpenProperty(System.Object)">
            <summary>
            A string like "{0} has multiple definitions for OpenObjectAttribute."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ClientType_MissingProperty(System.Object,System.Object)">
            <summary>
            A string like "The closed type {0} does not have a corresponding {1} settable property."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ClientType_KeysMustBeSimpleTypes(System.Object)">
            <summary>
            A string like "{0} has key properties declared on a non-simple type."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ClientType_KeysOnDifferentDeclaredType(System.Object)">
            <summary>
            A string like "{0} has key properties declared at different levels within its type hierarchy."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ClientType_MissingMimeTypeProperty(System.Object,System.Object)">
            <summary>
            A string like "Property '{0}' has a MimeTypeAttribute indicating that '{1}' contains its mime type. However, this type does not have a property '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ClientType_MissingMediaEntryProperty(System.Object)">
            <summary>
            A string like "The MediaLink attribute in this type points to a property called '{0}', but the type has not property with that name."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ClientType_NoSettableFields(System.Object)">
            <summary>
            A string like "The type '{0}' has no settable properties."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ClientType_NullOpenProperties(System.Object)">
            <summary>
            A string like "The open type property '{0}' returned a null instance."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ClientType_Ambiguous(System.Object,System.Object)">
            <summary>
            A string like "Resolving type from '{0}' that inherits from '{1}' is ambiguous."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Deserialize_Current(System.Object,System.Object)">
            <summary>
            A string like "The current value '{1}' type is not compatible with the expected '{0}' type."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Deserialize_MixedContent(System.Object)">
            <summary>
            A string like "Error processing response stream. Mixed content is not supported. The structured type being evaluated is '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Deserialize_MismatchAtomLinkFeedPropertyNotCollection(System.Object)">
            <summary>
            A string like "Error processing response stream. Atom payload has a feed and the property '{0}' is not a collection."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Deserialize_MismatchAtomLinkEntryPropertyIsCollection(System.Object)">
            <summary>
            A string like "Error processing response stream. Atom payload has an entry and the property '{0}' is a collection."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Deserialize_UnknownMimeTypeSpecified(System.Object)">
            <summary>
            A string like "Error processing response's mime-type type '{0}'.  The only supported mime-type is 'application/atom+xml'."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Deserialize_ServerException(System.Object)">
            <summary>
            A string like "Error processing response stream. Server failed with following message:\r\n{0}"
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Deserialize_NoContentForClientKey(System.Object,System.Object)">
            <summary>
            A string like "The ATOM content did not include a value for the target '{0}' client key '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.EpmClientType_PropertyIsComplex(System.Object)">
            <summary>
            A string like "The property '{0}' specified in source path for EntityPropertyMappingAttribute is of non-primitive type while it is provided as the last segment in the path."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.EpmClientType_PropertyIsPrimitive(System.Object)">
            <summary>
            A string like "The property '{0}' specified in source path for EntityPropertyMappingAttribute is of primitive type while it is not provided as the last segment in the path."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.EpmSourceTree_InvalidSourcePath(System.Object,System.Object)">
            <summary>
            A string like "The PropertyName property value '{1}' of EntityPropertyMappingAttribute on type '{0}' is not valid."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.EpmSourceTree_DuplicateEpmAttrsWithSameSourceName(System.Object,System.Object)">
            <summary>
            A string like "The PropertyName property value '{0}' on more than one EntityPropertyMappingAttribute on resource type '{1}' is provided more than once."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.EpmSourceTree_InaccessiblePropertyOnType(System.Object,System.Object)">
            <summary>
            A string like "The property '{0}' on type '{1}' is not present or is inaccessible."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.EpmTargetTree_InvalidTargetPath(System.Object)">
            <summary>
            A string like "The TargetName property path '{0}' of EntityPropertyMappingAttribute is not valid."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.EpmTargetTree_AttributeInMiddle(System.Object)">
            <summary>
            A string like "The attribute identifier '{0}' is provided in the middle of the TargetName property of EntityPropertyMappingAttribute."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.EpmTargetTree_DuplicateEpmAttrsWithSameTargetName(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like "The TargetName property '{0}' on more than one EntityPropertyMappingAttribute on resource type '{1}' have the same value. Conflicting properties are '{2}' and '{3}'."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.EntityPropertyMapping_EpmAttribute(System.Object)">
            <summary>
            A string like "The '{0}' value provided for the EntityPropertyMappingAttribute is not valid."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.EntityPropertyMapping_TargetNamespaceUriNotValid(System.Object)">
            <summary>
            A string like "The targetNamespaceUri value '{0}' provided for the EntityPropertyMappingAttribute does not have a valid URI format."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.HttpProcessUtility_EncodingNotSupported(System.Object)">
            <summary>
            A string like "Character set '{0}' is not supported."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.HttpProcessUtility_EscapeCharWithoutQuotes(System.Object)">
            <summary>
            A string like "Value for MIME type parameter '{0}' is incorrect because it contained escape characters even though it was not quoted."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.HttpProcessUtility_EscapeCharAtEnd(System.Object)">
            <summary>
            A string like "Value for MIME type parameter '{0}' is incorrect because it terminated with escape character. Escape characters must always be followed by a character in a parameter value."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.HttpProcessUtility_ClosingQuoteNotFound(System.Object)">
            <summary>
            A string like "Value for MIME type parameter '{0}' is incorrect because the closing quote character could not be found while the parameter value started with a quote character."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.Serializer_NullKeysAreNotSupported(System.Object)">
            <summary>
            A string like "The serialized resource has a null value in key member '{0}'. Null values are not supported in key members."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ALinq_UnsupportedExpression(System.Object)">
            <summary>
            A string like "The expression type {0} is not supported."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ALinq_CouldNotConvert(System.Object)">
            <summary>
            A string like "Could not convert constant {0} expression to string."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ALinq_MethodNotSupported(System.Object)">
            <summary>
            A string like "The method '{0}' is not supported."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ALinq_UnaryNotSupported(System.Object)">
            <summary>
            A string like "The unary operator '{0}' is not supported."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ALinq_BinaryNotSupported(System.Object)">
            <summary>
            A string like "The binary operator '{0}' is not supported."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ALinq_ConstantNotSupported(System.Object)">
            <summary>
            A string like "The constant for '{0}' is not supported."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ALinq_MemberAccessNotSupported(System.Object)">
            <summary>
            A string like "The member access of '{0}' is not supported."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ALinq_CantCastToUnsupportedPrimitive(System.Object)">
            <summary>
            A string like "Can't cast to unsupported type '{0}'"
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ALinq_CantTranslateExpression(System.Object)">
            <summary>
            A string like "The expression {0} is not supported."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ALinq_TranslationError(System.Object)">
            <summary>
            A string like "Error translating Linq expression to URI: {0}"
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ALinq_CantAddDuplicateQueryOption(System.Object)">
            <summary>
            A string like "Can't add duplicate query option '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ALinq_CantAddAstoriaQueryOption(System.Object)">
            <summary>
            A string like "Can't add query option '{0}' because it would conflict with the query options from the translated Linq expression."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ALinq_CantAddQueryOptionStartingWithDollarSign(System.Object)">
            <summary>
            A string like "Can't add query option '{0}' because it begins with reserved character '$'."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ALinq_CantReferToPublicField(System.Object)">
            <summary>
            A string like "Referencing public field '{0}' not supported in query option expression.  Use public property instead."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.ALinq_QueryOptionOutOfOrder(System.Object,System.Object)">
            <summary>
            A string like "The {0} query option cannot be specified after the {1} query option."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.DataBinding_ObservableEntityCollectionArgumentMustHaveEntityType(System.Object)">
            <summary>
            A string like "The ObservableEntityCollection to be tracked must contain entity typed elements with at least one key property. The element type '{0}' does not have any key property."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.DataBinding_CollectionPropertySetterValueHasObserver(System.Object,System.Object)">
            <summary>
            A string like "Setting an instance of ObservableEntityCollection to an entity property is disallowed if the instance is already being tracked. Error occurred on property '{0}' for entity type '{1}'."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.DataBinding_CollectionChangedUnknownAction(System.Object)">
            <summary>
            A string like "Unexpected action '{0}' on the OnCollectionChanged event raised by ObservableEntityCollection."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.DataBinding_BindingOperation_ArrayItemNull(System.Object)">
            <summary>
            A string like "Null values are disallowed during '{0}' operations on ObservableEntityCollection."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.DataBinding_BindingOperation_ArrayItemNotEntity(System.Object)">
            <summary>
            A string like "A value provided during '{0}' operation on ObservableEntityCollection is not of an entity type with key."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.DataBinding_Util_UnknownEntitySetName(System.Object)">
            <summary>
            A string like "Entity set name has not been provided for an entity of type '{0}'."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.DataBinding_EntityAlreadyInCollection(System.Object)">
            <summary>
            A string like "An attempt was made to add entity of type '{0}' to a collection in which the same entity already exists."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.Strings.DataBinding_NotifyPropertyChangedNotImpl(System.Object)">
            <summary>
            A string like "An attempt to track an entity failed because the entity type '{0}' does not implement the INotifyPropertyChanged interface."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.BatchStream_MissingBoundary">
            <summary>
            A string like "Missing or repeated the required content-type boundary parameter."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.BatchStream_GetMethodNotSupportedInChangeset">
            <summary>
            A string like "GET operation cannot be specified in a change set. Only PUT, POST and DELETE operations can be specified in a change set."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.BatchStream_InvalidBatchFormat">
            <summary>
            A string like "Error processing batch response. The response is not a valid batch response."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.BatchStream_MissingEndChangesetDelimiter">
            <summary>
            A string like "Missing change set boundary delimiter. Please make sure that change set boundary delimiter is specified to mark the end of a change set."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.BatchStream_OnlyGETOperationsCanBeSpecifiedInBatch">
            <summary>
            A string like "Only GET operations can be specified in a batch. POST, PUT and DELETE operations must be specified within a change set."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.BatchStream_InvalidOperationHeaderSpecified">
            <summary>
            A string like "Header containing the HTTP method name, request url and version can only be specified for GET operations in a batch or POST, PUT, DELETE operations in a change set."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.BatchStream_MoreDataAfterEndOfBatch">
            <summary>
            A string like "No data should be specified after the batch delimiter."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.BatchStream_InternalBufferRequestTooSmall">
            <summary>
            A string like "Error processing batch response. An internal read request was too small."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Batch_IncompleteResponseCount">
            <summary>
            A string like "Not all requests in the batch had a response."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_BaseUri">
            <summary>
            A string like "Expected an absolute, well formed http URL without a query or fragment."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_ServiceRootNotBaseUri">
            <summary>
            A string like "The context BaseUri is not the base URI of the specified URI parameter."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_TrackingExpectsAbsoluteUri">
            <summary>
            A string like "The ATOM payload is required to specify an absolute URI as the Id."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_LinkResourceInsertFailure">
            <summary>
            A string like "One of the link's resources failed to insert."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_BatchExecuteError">
            <summary>
            A string like "An error occurred for this query during batch execution.  See the inner exception for details."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_SaveChangesError">
            <summary>
            A string like "An error occurred while saving changes. See the inner exception for details."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_EntitySetName">
            <summary>
            A string like "Expected a relative URL path without query or fragment."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_MissingEditLinkInResponseBody">
            <summary>
            A string like "Error processing response stream. Missing edit link element in the response."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Content_EntityWithoutKey">
            <summary>
            A string like "The context needs the entity to have at least one key property before it can be tracked."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_EntityNotContained">
            <summary>
            A string like "The context is not currently tracking the entity."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_EntityAlreadyContained">
            <summary>
            A string like "The context is already tracking the entity."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_DifferentEntityAlreadyContained">
            <summary>
            A string like "The context is already tracking a different entity with the same resource Uri."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_DidNotOriginateAsync">
            <summary>
            A string like "The current object did not originate the async result."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_AsyncAlreadyDone">
            <summary>
            A string like "The asynchronous result has already been completed."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_NoLoadWithInsertEnd">
            <summary>
            A string like "The context can not load the related collection or reference for objects in the added state."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_NoRelationWithInsertEnd">
            <summary>
            A string like "One or both of the ends of the relationship is in the added state."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_NoRelationWithDeleteEnd">
            <summary>
            A string like "One or both of the ends of the relationship is in the deleted state."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_RelationAlreadyContained">
            <summary>
            A string like "The context is already tracking the relationship."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_RelationNotRefOrCollection">
            <summary>
            A string like "The sourceProperty is not a reference or collection of the target's object type."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_AddLinkCollectionOnly">
            <summary>
            A string like "AddLink and DeleteLink methods only work when the sourceProperty is a collection."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_AddRelatedObjectCollectionOnly">
            <summary>
            A string like "AddRelatedObject method only works when the sourceProperty is a collection."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_AddRelatedObjectSourceDeleted">
            <summary>
            A string like "AddRelatedObject method only works if the source entity is in a non-deleted state."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_SetLinkReferenceOnly">
            <summary>
            A string like "SetLink method only works when the sourceProperty is not a collection."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_BatchNotSupportedForMediaLink">
            <summary>
            A string like "Saving entities with the [MediaEntry] attribute is not currently supported in batch mode. Use non-batched mode instead."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Data.Services.Client.Strings.Context_UnexpectedZeroRawRead" -->
        <member name="P:System.Data.Services.Client.Strings.Context_SendingRequestEventArgsNotHttp">
            <summary>
            A string like "Only instances of HttpWebRequest are currently allowed for this property. Other subtypes of WebRequest are not supported."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Context_ChildResourceExists">
            <summary>
            A string like "Attempt to delete a link between two objects failed because the identity of the target object of the link depends on the source object of the link."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Data.Services.Client.Strings.ClientType_MultipleImplementationNotSupported" -->
        <member name="P:System.Data.Services.Client.Strings.ClientType_CollectionOfNonEntities">
            <summary>
            A string like "Only collections of entities are supported."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.DataServiceException_GeneralError">
            <summary>
            A string like "An error occurred while processing this request."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.DataServiceRequest_FailGetCount">
            <summary>
            A string like "Failed to get the count value from the server."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Deserialize_GetEnumerator">
            <summary>
            A string like "Only a single enumeration is supported by this IEnumerable."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Deserialize_MixedTextWithComment">
            <summary>
            A string like "Error processing response stream. Element value interspersed with a comment is not supported."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Deserialize_ExpectingSimpleValue">
            <summary>
            A string like "Error processing response stream. The XML element contains mixed content."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Deserialize_NotApplicationXml">
            <summary>
            A string like "Error processing response stream.  The expected content of "application/xml" not found."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Deserialize_MismatchAtomLinkLocalSimple">
            <summary>
            A string like "Error processing response stream. Atom payload has a link, local object has a simple value."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Deserialize_ExpectedEmptyMediaLinkEntryContent">
            <summary>
            A string like "Error processing response stream. The ATOM content element is expected to be empty if it has a source attribute."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Deserialize_ContentPlusPropertiesNotAllowed">
            <summary>
            A string like "Error processing response stream. An ATOM entry should either be a regular entry (with data in the 'content' element) or a media link entry (with an empty 'content' element and data in the 'properties' element), it cannot have data in both 'content' and 'properties' elements."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Deserialize_NoLocationHeader">
            <summary>
            A string like "The response to this POST request did not contain a 'location' header. That is not supported by this client."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Deserialize_ServerException1">
            <summary>
            A string like "Error processing response stream. The ATOM entry had an in-stream error."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Deserialize_MissingIdElement">
            <summary>
            A string like "Error processing response stream. Missing id element in the response."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.HttpProcessUtility_ContentTypeMissing">
            <summary>
            A string like "Content-Type header value missing."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.HttpProcessUtility_MediaTypeMissingValue">
            <summary>
            A string like "Media type is missing a parameter value."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.HttpProcessUtility_MediaTypeRequiresSemicolonBeforeParameter">
            <summary>
            A string like "Media type requires a ';' character before a parameter definition."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.HttpProcessUtility_MediaTypeRequiresSlash">
            <summary>
            A string like "Media type requires a '/' character."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.HttpProcessUtility_MediaTypeRequiresSubType">
            <summary>
            A string like "Media type requires a subtype definition."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.HttpProcessUtility_MediaTypeUnspecified">
            <summary>
            A string like "Media type is unspecified."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.MaterializeFromAtom_CountNotPresent">
            <summary>
            A string like "Count value is not part of the response stream."
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:System.Data.Services.Client.Strings.MaterializeFromAtom_CountFormatError" -->
        <member name="P:System.Data.Services.Client.Strings.Util_EmptyString">
            <summary>
            A string like "Empty string."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Util_EmptyArray">
            <summary>
            A string like "Empty array."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.Util_NullArrayElement">
            <summary>
            A string like "Array contains a null element."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_TypeBinaryNotSupported">
            <summary>
            A string like "An operation between an expression and a type is not supported."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_ConditionalNotSupported">
            <summary>
            A string like "The conditional expression is not supported."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_ParameterNotSupported">
            <summary>
            A string like "The parameter expression is not supported."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_LambdaNotSupported">
            <summary>
            A string like "Lambda Expressions not supported."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_NewNotSupported">
            <summary>
            A string like "New Expressions not supported."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_MemberInitNotSupported">
            <summary>
            A string like "Member Init Expressions not supported."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_ListInitNotSupported">
            <summary>
            A string like "List Init Expressions not supported."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_NewArrayNotSupported">
            <summary>
            A string like "New Array Expressions not supported."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_InvocationNotSupported">
            <summary>
            A string like "Invocation Expressions not supported."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_QueryOptionsOnlyAllowedOnLeafNodes">
            <summary>
            A string like "Can only specify query options (orderby, where, take, skip) after last projection."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_CantExpand">
            <summary>
            A string like "Expand query option not allowed."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_CantNavigateWithoutKeyPredicate">
            <summary>
            A string like "Navigation properties can only be selected from a single resource. Specify a key predicate to restrict the entity set to a single instance."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_CanOnlyApplyOneKeyPredicate">
            <summary>
            A string like "Multiple key predicates cannot be specified for the same entity set."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_CantAddQueryOption">
            <summary>
            A string like "Custom query option not allowed."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_QueryOptionsOnlyAllowedOnSingletons">
            <summary>
            A string like "Cannot specify query options (orderby, where, take, skip) on single resource."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_CannotAddCountOption">
            <summary>
            A string like "Cannot add count option to the resource set."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ALinq_CannotAddCountOptionConflict">
            <summary>
            A string like "Cannot add count option to the resource set because it would conflict with existing count options."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.DSKAttribute_MustSpecifyAtleastOnePropertyName">
            <summary>
            A string like "DataServiceKey attribute must specify at least one property name."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ObservableEntityCollection_LoadRequiresTargetCollectionObserved">
            <summary>
            A string like "Target collection for the Load operation must have an associated DataServiceContext."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.ObservableEntityCollection_CannotStopTrackingChildCollection">
            <summary>
            A string like "The tracking of ObservableEntityCollection can not be stopped for child collections."
            </summary>
        </member>
        <member name="P:System.Data.Services.Client.Strings.DataBinding_BindingOperation_DetachedSource">
            <summary>
            A string like "Add/Update/Delete operation cannot be performed on a child entity, if the parent entity is already detached."
            </summary>
        </member>
        <member name="M:System.Data.Services.Client.TextResDescriptionAttribute.#ctor(System.String)">
            <summary>
                Constructs a new sys description.
            </summary>
            <param name='description'>
                description text.
            </param>
        </member>
        <member name="P:System.Data.Services.Client.TextResDescriptionAttribute.Description">
            <summary>
                Retrieves the description text.
            </summary>
            <returns>
                description
            </returns>
        </member>
        <member name="T:System.Data.Services.Client.TextRes">
             <summary>
                AutoGenerated resource class. Usage:
            
                    string s = TextRes.GetString(TextRes.MyIdenfitier);
             </summary>
        </member>
    </members>
</doc>
